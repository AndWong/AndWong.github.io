{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/reward/alipay.png","path":"reward/alipay.png","modified":1,"renderable":0},{"_id":"source/reward/logo.jpg","path":"reward/logo.jpg","modified":1,"renderable":0},{"_id":"source/reward/wxpay.png","path":"reward/wxpay.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1489066734805},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1489066734805},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1489066734805},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1489066734805},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1489066734805},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1489066734805},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1489066734805},{"_id":"themes/hexo-theme-next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1489066734805},{"_id":"themes/hexo-theme-next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1489066734805},{"_id":"themes/hexo-theme-next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1489066734805},{"_id":"themes/hexo-theme-next/_config.yml","hash":"efd9216060fcd47eb2cb079b1cdd617c1c1f0e3b","modified":1489222167221},{"_id":"themes/hexo-theme-next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1489066734805},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1489066734805},{"_id":"themes/hexo-theme-next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1489066734813},{"_id":"source/_posts/Android-App选择器.md","hash":"208bfbcabe868140128e2a86caaae94b11a86879","modified":1489200400344},{"_id":"source/_posts/Android-SQLite的使用.md","hash":"9dde9e0d7ce98fe6d6def4f01158e7342eeea0d0","modified":1489200409168},{"_id":"source/_posts/Android中Handler的简单终结.md","hash":"520ec08ff414d319d30cd1f4fc7de4d69890333e","modified":1489200432366},{"_id":"source/_posts/Android事件分发机制的简单解读.md","hash":"49ce5b3a7d84fadfed701dd09dbb6c3843e0d029","modified":1487333914192},{"_id":"source/_posts/Android动态修改某个控件大小.md","hash":"a9d0ae733169cda36f2f43b2e1d78d1bf7ce4cb1","modified":1487333788920},{"_id":"source/_posts/Android设置全屏的几种方式.md","hash":"84d0b40c76a9bf8d74687baf33d9ea764fa618ab","modified":1487333781596},{"_id":"source/_posts/EditText相关.md","hash":"077107a03e52ca1aa658a0e6c0e672ca6b1a234b","modified":1489200443434},{"_id":"source/_posts/Fragment的管理.md","hash":"c42cab1ed6f1e8441c37aef9883d75251897d959","modified":1489200454350},{"_id":"source/_posts/Java注解反射.md","hash":"566d30205724083cf8a4e523bbcc211625401354","modified":1489200466758},{"_id":"source/_posts/MVP与MVVM.md","hash":"cfd2864fa99ec25388ae9f8578bf36dc14fe3235","modified":1489200474652},{"_id":"source/_posts/Markdown的初级使用.md","hash":"3be3b4ff220e5b337ca0d0f945d9e8cc7bb76d38","modified":1487333729001},{"_id":"source/_posts/WebView-获取网页源码.md","hash":"da6c61f923b73a68755a0439a218d95c4d2fc5bf","modified":1489200480390},{"_id":"source/_posts/WiFi-Portal检测.md","hash":"9e00e4a4c10f4f27499409edfbc41888d77ca090","modified":1489200484847},{"_id":"source/_posts/gitbub-blog.md","hash":"f3197ecaa1b46a6a29626272da34f8969d42831d","modified":1489200461576},{"_id":"source/_posts/rx-retrofit-okhttp网络框架.md","hash":"877b7f4e2b1cc28bea1aa045748c599dfe415157","modified":1489200272923},{"_id":"source/_posts/一套临时使用的图片压缩缓存上传方案.md","hash":"56eb066dc770110fafbb5fb0142935cae69400fc","modified":1489200387642},{"_id":"source/_posts/关于通知栏使用权的介绍.md","hash":"2eae3b8084dc59a70fcb89b40d0229ef814ee017","modified":1489200270171},{"_id":"source/_posts/四大组件之Activity.md","hash":"57367abfa84a9c960ee66f418ff99ab37204bb24","modified":1489200364762},{"_id":"source/_posts/四大组件之BroadcastReceiver.md","hash":"cd9394a12b90ba038f9b32938cdd71527d84349e","modified":1489200372618},{"_id":"source/_posts/四大组件之Service.md","hash":"855ac886685bb4e30f5f1576e657ad2050974d1e","modified":1489200377617},{"_id":"source/_posts/如何在moudle中引入aar.md","hash":"2146cd2a917fbb7e6ba6307b709887a5f3b66948","modified":1487333812544},{"_id":"source/_posts/常用网络请求框架OkHttp、Volley、Retrofit对比.md","hash":"c170c191f8003d1fbd12ae1a86e4d618e218cb15","modified":1489200274831},{"_id":"source/_posts/开发中经常用到的网站.md","hash":"8cbca27901ad96095cee87e550d12aa3f63c8dda","modified":1489412885430},{"_id":"source/_posts/自定义View.md","hash":"64d35b761b0c24e655ad4a135c95f01879424e09","modified":1489200394686},{"_id":"source/_posts/记一次使用Realm的体会.md","hash":"09c401708107e971348eb8882f163cea57b926e0","modified":1489200318902},{"_id":"source/reward/alipay.png","hash":"4bdd9dfc71e673293fe84b3a3ac04ee110b808b5","modified":1489221846262},{"_id":"source/reward/logo.jpg","hash":"20fc606637606c00ce1fcdd54842fba10db5e3f6","modified":1489221946668},{"_id":"source/reward/wxpay.png","hash":"cc331268249300e73addb5224627972837195493","modified":1489221549720},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1489066734805},{"_id":"themes/hexo-theme-next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1489066734805},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1489066734813},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1489066734885},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1489066734885},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1489066734885},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734841},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1489068148156},{"_id":"themes/hexo-theme-next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1489066734813},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1489066734817},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1489066734817},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489066734845},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734809},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489066734841},{"_id":"themes/hexo-theme-next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1489066734805},{"_id":"themes/hexo-theme-next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1489066734813},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489066734885},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489066734885},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489066734885},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489066734881},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1489066734809},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1489066734813},{"_id":"themes/hexo-theme-next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1489066734813},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489066734845},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489066734857},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489066734881},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489066734885},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1489066734833},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1489066734837},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489066734841},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489066734865},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489066734869},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489066734877},{"_id":"themes/hexo-theme-next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489066734853},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489066734877},{"_id":"public/2017/01/16/如何在moudle中引入aar/index.html","hash":"e8e065d0da9c0be913bf7beae77f54076caa5f9d","modified":1489412948661},{"_id":"public/2016/06/17/Fragment的管理/index.html","hash":"a0489cdcd56463248a63eff6157b10fae6b4065b","modified":1489412948661},{"_id":"public/2016/06/10/Android动态修改某个控件大小/index.html","hash":"d39caf4665f43c2e5d409c52aa085734c007f375","modified":1489412948662},{"_id":"public/2016/06/10/Android设置全屏的几种方式/index.html","hash":"16c51107f6f61c7383c0b8c98c95c9dd8c264800","modified":1489412948662},{"_id":"public/2016/05/22/Android事件分发机制的简单解读/index.html","hash":"fcea1ed9e8d20faadf684b0196b445dcd420c4e6","modified":1489412948662},{"_id":"public/2016/02/16/Markdown的初级使用/index.html","hash":"555222f7295f50d2e35da633ed82b8ab576a53d4","modified":1489412948663},{"_id":"public/archives/page/3/index.html","hash":"e9393aa087507ec7f8d7d844270e9b05a8cfd2bf","modified":1489412948663},{"_id":"public/archives/2016/page/2/index.html","hash":"5b78d88f40a951de139a1b126118f135c1baa72a","modified":1489412948663},{"_id":"public/archives/2016/01/index.html","hash":"0ec957aebc1abe738ab872e26947b9dea48d7d9d","modified":1489412948663},{"_id":"public/archives/2016/02/index.html","hash":"23a8b8fe6c4370c70e674998dd30cc0580ba7e4e","modified":1489412948663},{"_id":"public/archives/2016/03/index.html","hash":"5c73a17c07ab4a2a7274d29a031352ff7439958e","modified":1489412948663},{"_id":"public/archives/2016/04/index.html","hash":"fe36412b1c293442339ab9cdc0a612ebfe2386e2","modified":1489412948663},{"_id":"public/archives/2016/05/index.html","hash":"38eb5a6a24197f31e6b5a52bd3ef3931999efb2c","modified":1489412948663},{"_id":"public/archives/2016/06/index.html","hash":"376c5f8cbe70bec2e2f6125f15ab5ab88ec9f27c","modified":1489412948664},{"_id":"public/archives/2016/07/index.html","hash":"45b5ad4357a5dee5a1059b7b994e11708dbc98ae","modified":1489412948664},{"_id":"public/archives/2016/10/index.html","hash":"3173ea57f912c65ac8231e9706e48746c92578a1","modified":1489412948664},{"_id":"public/archives/2016/12/index.html","hash":"d49bcdfbbf85c7bc9309467c8d37c903af72e3e4","modified":1489412948664},{"_id":"public/archives/2017/index.html","hash":"d118c4dd72c895b25a209a38d06390a343123cb7","modified":1489412948664},{"_id":"public/archives/2017/01/index.html","hash":"99fd074f00a1665de30d3d5830c23f94dbd5e44e","modified":1489412948664},{"_id":"public/archives/2017/02/index.html","hash":"a53b96c501f59952c675d96a19f30da6dc6296c8","modified":1489412948664},{"_id":"public/archives/2017/03/index.html","hash":"9aaebecd287cfac714bf5f188d4a7eac2f58b62d","modified":1489412948664},{"_id":"public/tags/Android/index.html","hash":"f074471b9f2f63b9db1c8da4cb1f82a2f7fec3d8","modified":1489412948665},{"_id":"public/tags/Android/page/2/index.html","hash":"5ded57f25e210ba9582712aed2e9042754f06d4a","modified":1489412948665},{"_id":"public/tags/Java/index.html","hash":"4dfd1a90e486c18bb53cc8e85d9c8d354c6ac01e","modified":1489412948665},{"_id":"public/tags/架构/index.html","hash":"06f88fd780d8838cbf561bd11ccd81135d219ba3","modified":1489412948665},{"_id":"public/tags/tools/index.html","hash":"51701658683eec940cf66ff7f4a16ceed8446a50","modified":1489412948665},{"_id":"public/tags/github/index.html","hash":"3669f461e8d31f5b8d48bbcef65a6422224786d8","modified":1489412948665},{"_id":"public/tags/四大组件之Activity/index.html","hash":"b40a34410a1662695afd6e6cc5206e490b96b19b","modified":1489412948665},{"_id":"public/tags/Android-Studio/index.html","hash":"7bc0748e51c3d233637a992ec9d19e7fd3b9971f","modified":1489412948665},{"_id":"public/tags/记录/index.html","hash":"4291cccda054ed123b2553c8b717c21a3853798a","modified":1489412948665},{"_id":"public/tags/Realm/index.html","hash":"b2ad648916fb5223e5d485173ceeb366ac148217","modified":1489412948666},{"_id":"public/2017/03/13/开发中经常用到的网站/index.html","hash":"a07d5e59ff1d92033e48c07b89efd04bc6bf22db","modified":1489412948666},{"_id":"public/2017/03/06/rx-retrofit-okhttp网络框架/index.html","hash":"8408d5d542efa906a2058700a8c205267d7f9e9b","modified":1489412948666},{"_id":"public/2017/03/01/常用网络请求框架OkHttp、Volley、Retrofit对比/index.html","hash":"5c466eb812dfaf9d77b066cd3d3f2c71fdee17e6","modified":1489412948666},{"_id":"public/2017/02/20/关于通知栏使用权的介绍/index.html","hash":"c9b2df27e5ec47eee3d06b0c5bceb168c0282d0c","modified":1489412948666},{"_id":"public/2017/02/20/Android-App选择器/index.html","hash":"26d0223cff79b225844a7a233db5dc572b1a0e1e","modified":1489412948666},{"_id":"public/2017/02/17/一套临时使用的图片压缩缓存上传方案/index.html","hash":"b388da4e391fe7cfb9883be0f39953bbe1735717","modified":1489412948666},{"_id":"public/2017/02/17/自定义View/index.html","hash":"9dd18b2ddd453d7b630b0b9524f78aec24ce6f57","modified":1489412948666},{"_id":"public/2017/02/16/记一次使用Realm的体会/index.html","hash":"8560b9c9146fed1f6177303f9ccc98af726652ae","modified":1489412948666},{"_id":"public/2016/12/17/MVP与MVVM/index.html","hash":"eb067df293460b461b1718ceae30dacf5d898633","modified":1489412948667},{"_id":"public/2016/10/18/四大组件之BroadcastReceiver/index.html","hash":"1c792a693e75e629108295329276922768fc2531","modified":1489412948667},{"_id":"public/2016/10/16/四大组件之Service/index.html","hash":"d958baf37d8683801f047eda948e0339a37be953","modified":1489412948667},{"_id":"public/2016/10/15/四大组件之Activity/index.html","hash":"977eaabf23f54b71d31f40e8c5dd119c55408561","modified":1489412948667},{"_id":"public/2016/07/13/Android-SQLite的使用/index.html","hash":"a9881e4d497e7bbc25287438fec00f60adaadb5c","modified":1489412948667},{"_id":"public/2016/06/17/Java注解反射/index.html","hash":"c7924f805b9b3ac5123a20e126b08a7a5669122c","modified":1489412948667},{"_id":"public/2016/05/12/Android中Handler的简单终结/index.html","hash":"a3537be4692bd636d058daaea658f4a0a77295ca","modified":1489412948667},{"_id":"public/2016/04/11/WiFi-Portal检测/index.html","hash":"7c51106e405296e3d4168c0223a6d3d50b3bda8a","modified":1489412948668},{"_id":"public/2016/03/21/EditText相关/index.html","hash":"76e0b8b8809e3663b34c278d30b601e058adfd78","modified":1489412948668},{"_id":"public/2016/02/10/WebView-获取网页源码/index.html","hash":"26019f02ec47aa41279fd873a7bf74d1f513fff2","modified":1489412948668},{"_id":"public/2016/01/05/gitbub-blog/index.html","hash":"498a124081557b6b282d2d54ba22cbe643a28f94","modified":1489412948668},{"_id":"public/archives/index.html","hash":"ecd45f549ac0dde3f81d30019d73cea60289261f","modified":1489412948668},{"_id":"public/archives/page/2/index.html","hash":"516ad8b51edc4c682de5d1abaff23e07ff39ef4a","modified":1489412948668},{"_id":"public/archives/2016/index.html","hash":"95074fabbae6baf88a6779d4c4ed4f8dbf8fb81c","modified":1489412948668},{"_id":"public/index.html","hash":"82dd17fd5d38aab01d63d46def6469d1691c9858","modified":1489412948668},{"_id":"public/page/2/index.html","hash":"453c9eba20a6e7dd3ee243cdfc9fbd3b8732cded","modified":1489412948668},{"_id":"public/page/3/index.html","hash":"292268d67ec480256fe7c1536c3b596c14dc7409","modified":1489412948669},{"_id":"public/reward/alipay.png","hash":"4bdd9dfc71e673293fe84b3a3ac04ee110b808b5","modified":1489412948669},{"_id":"public/reward/logo.jpg","hash":"20fc606637606c00ce1fcdd54842fba10db5e3f6","modified":1489412948669},{"_id":"public/reward/wxpay.png","hash":"cc331268249300e73addb5224627972837195493","modified":1489412948669},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489412948669},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489412948669},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489412948669},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489412948669},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489412948669},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489412948670},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489412948670},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489412948670},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489412948670},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489412948670},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489412948670},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489412948670},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489412948670},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489412948670},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489412948671},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489412948671},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489412948671},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489412948671},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489412948671},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489412948671},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489412950347},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489412950355},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489412950356},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489412950358},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489412950381},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489412950382},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1489412950394},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489412950394},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489412950395},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489412950395},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489412950395},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489412950395},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489412950395},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489412950395},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489412950395},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1489412950395},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1489412950395},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1489412950395},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1489412950396},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1489412950396},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1489412950396},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489412950396},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489412950396},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1489412950396},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489412950396},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489412950396},{"_id":"public/css/main.css","hash":"fc3c94d26ec9e1e22d71b0c5346a3f54e75b9602","modified":1489412950396},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489412950396},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489412950397},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489412950397},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489412950397},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489412950397},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489412950415},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489412950415},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489412950415},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489412950415},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489412950415},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489412950415},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489412950415},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489412950415},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489412950415},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489412950416},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489412950416},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489412950416},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489412950416},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489412950416},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489412950416},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489412950416},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489412950416},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489412950417},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489412950417},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489412950492}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android App选择器","date":"2017-02-20T12:00:10.000Z","_content":"当手机同时装有多个同样功能的软件时,如何让系统弹出App选择界面.\n\n例如 当用户选择打开WiFi软件时.\n\n一.先来介绍第一种方式:\n\n1.在AndroidManifest.xml中为目标Activity添加如下代码\n```\n<intent-filter>\n  <action android:name=\"android.settings.WIFI_SETTINGS\" />\n  <action android:name=\"android.net.wifi.PICK_WIFI_NETWORK\" />\n  <category android:name=\"android.intent.category.DEFAULT\" />\n</intent-filter>\n```\n<!--more-->\n2.Java代码中调用\n```\nIntent intent = new Intent();\nintent.setAction(\"android.settings.WIFI_SETTINGS\");\nintent.addCategory(\"android.intent.category.DEFAULT\");\n//弹出设置默认APP选择器\nintent.setComponent(new ComponentName(\"android\",\"com.android.internal.app.ResolverActivity\"));\nstartActivity(intent);\n```\n通过上述方式,虽然可以成功启动APP选择器,\n但是会有一个问题,\n如果用户已经设置其他app为默认应用,那么此次的设置就会无效.\n\n接下来我将介绍的第二种方式可以解决上述的问题.\n通过在AndroidManifest.xml中为多个activity配置intent-filter,\n在调用startActivity时系统不知道要匹配哪个intent-filter便会弹出选择器.\n\n代码如下:\n1.这个Activity什么都不用做连布局都不需要,只需要在xml中配置intent-filter\n以及enabled=false和exported=false\n```\npublic class DefaultSetting extends Activity{\n\n}\n```\nAndroidManifest.xml中配置\n```\n<!--　enabled和exported很重要　-->\n<activity\n    android:name=\"com.wifibanlv.wifipartner.usu.activity.DefaultSetting\"\n    android:enabled=\"false\"\n    android:exported=\"false\">\n    <intent-filter>\n      <action android:name=\"android.settings.WIFI_SETTINGS\" />\n      <action android:name=\"android.net.wifi.PICK_WIFI_NETWORK\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n    </intent-filter>\n</activity>\n```\n\n2.这个Activity为调用startActivity时匹配的目标Activity,\n也可将它作为一个中转界面,监听设置是否成功.\n同样不需要布局\n```\npublic class DefaultSettingTransfer extends Activity{\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ToastUtil.showMessage(\"设置成功~\");\n        startActivity(new Intent(this, MainActivity.class));\n        finish();\n    }\n}\n```\n在AndroidManifest.xml中配置\n```\n<!-- 设置默认wifi工具中转界面 -->\n<activity\n  android:name=\"com.wifibanlv.wifipartner.activity.DefaultSettingTransfer\"\n  android:icon=\"@drawable/ic_launcher\"\n  android:label=\"@string/app_name\"\n  android:screenOrientation=\"portrait\"\n  android:theme=\"@style/AppTheme\">\n  <intent-filter>\n    <action android:name=\"android.settings.WIFI_SETTINGS\" />\n    <action android:name=\"android.net.wifi.PICK_WIFI_NETWORK\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n  </intent-filter>\n</activity>\n```\n3.在Java代码中调用启动App选择器的方法,如下:\n```\nPackageManager packageManager = context.getPackageManager();\n//设置activity的enable=true,会出现多个匹配项系统就会弹出选择器\nComponentName componentName = new ComponentName(App.getInstance().getPackageName(), \"com.wifibanlv.wifipartner.usu.activity.DefaultSetting\");\npackageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);\nIntent intent = new Intent();\nintent.setAction(\"android.settings.WIFI_SETTINGS\");\nintent.addCategory(\"android.intent.category.DEFAULT\");\nstartActivity(intent);\n//设置activity的enable=false;系统会选择enable=true的activity作为目标activity\npackageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, PackageManager.DONT_KILL_APP);\n```\n这个设置之后,即使用户已经设置其他app为默认app,我们也同样能重新设置.\n\n二.判断是否已经设置了默认app\n```\n/**\n* 是否已经设置了默认App\n*\n* @param context\n* @return\n*/\npublic static boolean isSetDefaultApp(Context context) {\n  Intent intent = new Intent();\n  intent.setAction(\"android.settings.WIFI_SETTINGS\");\n  intent.addCategory(\"android.intent.category.DEFAULT\");\n  return hasPreferredApplication(context, intent);\n}\n\n/**\n* 若info.activityInfo.packageName返回\"android\"表示未设置默认应用\n* 返回哪个应用的包名表示设置哪个应用为默认应用\n* @param context\n* @param intent\n* @return\n*/\nprivate static boolean hasPreferredApplication(final Context context, final Intent intent) {\n  PackageManager pm = context.getPackageManager();\n  ResolveInfo info = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);\n  return App.getInstance().getPackageName().equals(info.activityInfo.packageName);\n}\n```\n","source":"_posts/Android-App选择器.md","raw":"---\ntitle: Android App选择器\ndate: 2017-02-20 20:00:10\ntags: Android\n---\n当手机同时装有多个同样功能的软件时,如何让系统弹出App选择界面.\n\n例如 当用户选择打开WiFi软件时.\n\n一.先来介绍第一种方式:\n\n1.在AndroidManifest.xml中为目标Activity添加如下代码\n```\n<intent-filter>\n  <action android:name=\"android.settings.WIFI_SETTINGS\" />\n  <action android:name=\"android.net.wifi.PICK_WIFI_NETWORK\" />\n  <category android:name=\"android.intent.category.DEFAULT\" />\n</intent-filter>\n```\n<!--more-->\n2.Java代码中调用\n```\nIntent intent = new Intent();\nintent.setAction(\"android.settings.WIFI_SETTINGS\");\nintent.addCategory(\"android.intent.category.DEFAULT\");\n//弹出设置默认APP选择器\nintent.setComponent(new ComponentName(\"android\",\"com.android.internal.app.ResolverActivity\"));\nstartActivity(intent);\n```\n通过上述方式,虽然可以成功启动APP选择器,\n但是会有一个问题,\n如果用户已经设置其他app为默认应用,那么此次的设置就会无效.\n\n接下来我将介绍的第二种方式可以解决上述的问题.\n通过在AndroidManifest.xml中为多个activity配置intent-filter,\n在调用startActivity时系统不知道要匹配哪个intent-filter便会弹出选择器.\n\n代码如下:\n1.这个Activity什么都不用做连布局都不需要,只需要在xml中配置intent-filter\n以及enabled=false和exported=false\n```\npublic class DefaultSetting extends Activity{\n\n}\n```\nAndroidManifest.xml中配置\n```\n<!--　enabled和exported很重要　-->\n<activity\n    android:name=\"com.wifibanlv.wifipartner.usu.activity.DefaultSetting\"\n    android:enabled=\"false\"\n    android:exported=\"false\">\n    <intent-filter>\n      <action android:name=\"android.settings.WIFI_SETTINGS\" />\n      <action android:name=\"android.net.wifi.PICK_WIFI_NETWORK\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n    </intent-filter>\n</activity>\n```\n\n2.这个Activity为调用startActivity时匹配的目标Activity,\n也可将它作为一个中转界面,监听设置是否成功.\n同样不需要布局\n```\npublic class DefaultSettingTransfer extends Activity{\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ToastUtil.showMessage(\"设置成功~\");\n        startActivity(new Intent(this, MainActivity.class));\n        finish();\n    }\n}\n```\n在AndroidManifest.xml中配置\n```\n<!-- 设置默认wifi工具中转界面 -->\n<activity\n  android:name=\"com.wifibanlv.wifipartner.activity.DefaultSettingTransfer\"\n  android:icon=\"@drawable/ic_launcher\"\n  android:label=\"@string/app_name\"\n  android:screenOrientation=\"portrait\"\n  android:theme=\"@style/AppTheme\">\n  <intent-filter>\n    <action android:name=\"android.settings.WIFI_SETTINGS\" />\n    <action android:name=\"android.net.wifi.PICK_WIFI_NETWORK\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n  </intent-filter>\n</activity>\n```\n3.在Java代码中调用启动App选择器的方法,如下:\n```\nPackageManager packageManager = context.getPackageManager();\n//设置activity的enable=true,会出现多个匹配项系统就会弹出选择器\nComponentName componentName = new ComponentName(App.getInstance().getPackageName(), \"com.wifibanlv.wifipartner.usu.activity.DefaultSetting\");\npackageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);\nIntent intent = new Intent();\nintent.setAction(\"android.settings.WIFI_SETTINGS\");\nintent.addCategory(\"android.intent.category.DEFAULT\");\nstartActivity(intent);\n//设置activity的enable=false;系统会选择enable=true的activity作为目标activity\npackageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, PackageManager.DONT_KILL_APP);\n```\n这个设置之后,即使用户已经设置其他app为默认app,我们也同样能重新设置.\n\n二.判断是否已经设置了默认app\n```\n/**\n* 是否已经设置了默认App\n*\n* @param context\n* @return\n*/\npublic static boolean isSetDefaultApp(Context context) {\n  Intent intent = new Intent();\n  intent.setAction(\"android.settings.WIFI_SETTINGS\");\n  intent.addCategory(\"android.intent.category.DEFAULT\");\n  return hasPreferredApplication(context, intent);\n}\n\n/**\n* 若info.activityInfo.packageName返回\"android\"表示未设置默认应用\n* 返回哪个应用的包名表示设置哪个应用为默认应用\n* @param context\n* @param intent\n* @return\n*/\nprivate static boolean hasPreferredApplication(final Context context, final Intent intent) {\n  PackageManager pm = context.getPackageManager();\n  ResolveInfo info = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);\n  return App.getInstance().getPackageName().equals(info.activityInfo.packageName);\n}\n```\n","slug":"Android-App选择器","published":1,"updated":"2017-03-11T02:46:40.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860djd0000vj2zo6mc4eha","content":"<p>当手机同时装有多个同样功能的软件时,如何让系统弹出App选择界面.</p>\n<p>例如 当用户选择打开WiFi软件时.</p>\n<p>一.先来介绍第一种方式:</p>\n<p>1.在AndroidManifest.xml中为目标Activity添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.settings.WIFI_SETTINGS&quot; /&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.net.wifi.PICK_WIFI_NETWORK&quot; /&gt;</div><div class=\"line\">  &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.Java代码中调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = new Intent();</div><div class=\"line\">intent.setAction(&quot;android.settings.WIFI_SETTINGS&quot;);</div><div class=\"line\">intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class=\"line\">//弹出设置默认APP选择器</div><div class=\"line\">intent.setComponent(new ComponentName(&quot;android&quot;,&quot;com.android.internal.app.ResolverActivity&quot;));</div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p>通过上述方式,虽然可以成功启动APP选择器,<br>但是会有一个问题,<br>如果用户已经设置其他app为默认应用,那么此次的设置就会无效.</p>\n<p>接下来我将介绍的第二种方式可以解决上述的问题.<br>通过在AndroidManifest.xml中为多个activity配置intent-filter,<br>在调用startActivity时系统不知道要匹配哪个intent-filter便会弹出选择器.</p>\n<p>代码如下:<br>1.这个Activity什么都不用做连布局都不需要,只需要在xml中配置intent-filter<br>以及enabled=false和exported=false<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DefaultSetting extends Activity&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AndroidManifest.xml中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--　enabled和exported很重要　--&gt;</div><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=&quot;com.wifibanlv.wifipartner.usu.activity.DefaultSetting&quot;</div><div class=\"line\">    android:enabled=&quot;false&quot;</div><div class=\"line\">    android:exported=&quot;false&quot;&gt;</div><div class=\"line\">    &lt;intent-filter&gt;</div><div class=\"line\">      &lt;action android:name=&quot;android.settings.WIFI_SETTINGS&quot; /&gt;</div><div class=\"line\">      &lt;action android:name=&quot;android.net.wifi.PICK_WIFI_NETWORK&quot; /&gt;</div><div class=\"line\">      &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\">    &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>\n<p>2.这个Activity为调用startActivity时匹配的目标Activity,<br>也可将它作为一个中转界面,监听设置是否成功.<br>同样不需要布局<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DefaultSettingTransfer extends Activity&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        ToastUtil.showMessage(&quot;设置成功~&quot;);</div><div class=\"line\">        startActivity(new Intent(this, MainActivity.class));</div><div class=\"line\">        finish();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在AndroidManifest.xml中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 设置默认wifi工具中转界面 --&gt;</div><div class=\"line\">&lt;activity</div><div class=\"line\">  android:name=&quot;com.wifibanlv.wifipartner.activity.DefaultSettingTransfer&quot;</div><div class=\"line\">  android:icon=&quot;@drawable/ic_launcher&quot;</div><div class=\"line\">  android:label=&quot;@string/app_name&quot;</div><div class=\"line\">  android:screenOrientation=&quot;portrait&quot;</div><div class=\"line\">  android:theme=&quot;@style/AppTheme&quot;&gt;</div><div class=\"line\">  &lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=&quot;android.settings.WIFI_SETTINGS&quot; /&gt;</div><div class=\"line\">    &lt;action android:name=&quot;android.net.wifi.PICK_WIFI_NETWORK&quot; /&gt;</div><div class=\"line\">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\">  &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>\n<p>3.在Java代码中调用启动App选择器的方法,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PackageManager packageManager = context.getPackageManager();</div><div class=\"line\">//设置activity的enable=true,会出现多个匹配项系统就会弹出选择器</div><div class=\"line\">ComponentName componentName = new ComponentName(App.getInstance().getPackageName(), &quot;com.wifibanlv.wifipartner.usu.activity.DefaultSetting&quot;);</div><div class=\"line\">packageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);</div><div class=\"line\">Intent intent = new Intent();</div><div class=\"line\">intent.setAction(&quot;android.settings.WIFI_SETTINGS&quot;);</div><div class=\"line\">intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class=\"line\">startActivity(intent);</div><div class=\"line\">//设置activity的enable=false;系统会选择enable=true的activity作为目标activity</div><div class=\"line\">packageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, PackageManager.DONT_KILL_APP);</div></pre></td></tr></table></figure></p>\n<p>这个设置之后,即使用户已经设置其他app为默认app,我们也同样能重新设置.</p>\n<p>二.判断是否已经设置了默认app<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 是否已经设置了默认App</div><div class=\"line\">*</div><div class=\"line\">* @param context</div><div class=\"line\">* @return</div><div class=\"line\">*/</div><div class=\"line\">public static boolean isSetDefaultApp(Context context) &#123;</div><div class=\"line\">  Intent intent = new Intent();</div><div class=\"line\">  intent.setAction(&quot;android.settings.WIFI_SETTINGS&quot;);</div><div class=\"line\">  intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class=\"line\">  return hasPreferredApplication(context, intent);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 若info.activityInfo.packageName返回&quot;android&quot;表示未设置默认应用</div><div class=\"line\">* 返回哪个应用的包名表示设置哪个应用为默认应用</div><div class=\"line\">* @param context</div><div class=\"line\">* @param intent</div><div class=\"line\">* @return</div><div class=\"line\">*/</div><div class=\"line\">private static boolean hasPreferredApplication(final Context context, final Intent intent) &#123;</div><div class=\"line\">  PackageManager pm = context.getPackageManager();</div><div class=\"line\">  ResolveInfo info = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class=\"line\">  return App.getInstance().getPackageName().equals(info.activityInfo.packageName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>当手机同时装有多个同样功能的软件时,如何让系统弹出App选择界面.</p>\n<p>例如 当用户选择打开WiFi软件时.</p>\n<p>一.先来介绍第一种方式:</p>\n<p>1.在AndroidManifest.xml中为目标Activity添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.settings.WIFI_SETTINGS&quot; /&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.net.wifi.PICK_WIFI_NETWORK&quot; /&gt;</div><div class=\"line\">  &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>","more":"<p>2.Java代码中调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = new Intent();</div><div class=\"line\">intent.setAction(&quot;android.settings.WIFI_SETTINGS&quot;);</div><div class=\"line\">intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class=\"line\">//弹出设置默认APP选择器</div><div class=\"line\">intent.setComponent(new ComponentName(&quot;android&quot;,&quot;com.android.internal.app.ResolverActivity&quot;));</div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p>通过上述方式,虽然可以成功启动APP选择器,<br>但是会有一个问题,<br>如果用户已经设置其他app为默认应用,那么此次的设置就会无效.</p>\n<p>接下来我将介绍的第二种方式可以解决上述的问题.<br>通过在AndroidManifest.xml中为多个activity配置intent-filter,<br>在调用startActivity时系统不知道要匹配哪个intent-filter便会弹出选择器.</p>\n<p>代码如下:<br>1.这个Activity什么都不用做连布局都不需要,只需要在xml中配置intent-filter<br>以及enabled=false和exported=false<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DefaultSetting extends Activity&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AndroidManifest.xml中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--　enabled和exported很重要　--&gt;</div><div class=\"line\">&lt;activity</div><div class=\"line\">    android:name=&quot;com.wifibanlv.wifipartner.usu.activity.DefaultSetting&quot;</div><div class=\"line\">    android:enabled=&quot;false&quot;</div><div class=\"line\">    android:exported=&quot;false&quot;&gt;</div><div class=\"line\">    &lt;intent-filter&gt;</div><div class=\"line\">      &lt;action android:name=&quot;android.settings.WIFI_SETTINGS&quot; /&gt;</div><div class=\"line\">      &lt;action android:name=&quot;android.net.wifi.PICK_WIFI_NETWORK&quot; /&gt;</div><div class=\"line\">      &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\">    &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>\n<p>2.这个Activity为调用startActivity时匹配的目标Activity,<br>也可将它作为一个中转界面,监听设置是否成功.<br>同样不需要布局<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DefaultSettingTransfer extends Activity&#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        ToastUtil.showMessage(&quot;设置成功~&quot;);</div><div class=\"line\">        startActivity(new Intent(this, MainActivity.class));</div><div class=\"line\">        finish();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在AndroidManifest.xml中配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 设置默认wifi工具中转界面 --&gt;</div><div class=\"line\">&lt;activity</div><div class=\"line\">  android:name=&quot;com.wifibanlv.wifipartner.activity.DefaultSettingTransfer&quot;</div><div class=\"line\">  android:icon=&quot;@drawable/ic_launcher&quot;</div><div class=\"line\">  android:label=&quot;@string/app_name&quot;</div><div class=\"line\">  android:screenOrientation=&quot;portrait&quot;</div><div class=\"line\">  android:theme=&quot;@style/AppTheme&quot;&gt;</div><div class=\"line\">  &lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=&quot;android.settings.WIFI_SETTINGS&quot; /&gt;</div><div class=\"line\">    &lt;action android:name=&quot;android.net.wifi.PICK_WIFI_NETWORK&quot; /&gt;</div><div class=\"line\">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\">  &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/activity&gt;</div></pre></td></tr></table></figure></p>\n<p>3.在Java代码中调用启动App选择器的方法,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">PackageManager packageManager = context.getPackageManager();</div><div class=\"line\">//设置activity的enable=true,会出现多个匹配项系统就会弹出选择器</div><div class=\"line\">ComponentName componentName = new ComponentName(App.getInstance().getPackageName(), &quot;com.wifibanlv.wifipartner.usu.activity.DefaultSetting&quot;);</div><div class=\"line\">packageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_ENABLED, PackageManager.DONT_KILL_APP);</div><div class=\"line\">Intent intent = new Intent();</div><div class=\"line\">intent.setAction(&quot;android.settings.WIFI_SETTINGS&quot;);</div><div class=\"line\">intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class=\"line\">startActivity(intent);</div><div class=\"line\">//设置activity的enable=false;系统会选择enable=true的activity作为目标activity</div><div class=\"line\">packageManager.setComponentEnabledSetting(componentName, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, PackageManager.DONT_KILL_APP);</div></pre></td></tr></table></figure></p>\n<p>这个设置之后,即使用户已经设置其他app为默认app,我们也同样能重新设置.</p>\n<p>二.判断是否已经设置了默认app<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\">* 是否已经设置了默认App</div><div class=\"line\">*</div><div class=\"line\">* @param context</div><div class=\"line\">* @return</div><div class=\"line\">*/</div><div class=\"line\">public static boolean isSetDefaultApp(Context context) &#123;</div><div class=\"line\">  Intent intent = new Intent();</div><div class=\"line\">  intent.setAction(&quot;android.settings.WIFI_SETTINGS&quot;);</div><div class=\"line\">  intent.addCategory(&quot;android.intent.category.DEFAULT&quot;);</div><div class=\"line\">  return hasPreferredApplication(context, intent);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\">* 若info.activityInfo.packageName返回&quot;android&quot;表示未设置默认应用</div><div class=\"line\">* 返回哪个应用的包名表示设置哪个应用为默认应用</div><div class=\"line\">* @param context</div><div class=\"line\">* @param intent</div><div class=\"line\">* @return</div><div class=\"line\">*/</div><div class=\"line\">private static boolean hasPreferredApplication(final Context context, final Intent intent) &#123;</div><div class=\"line\">  PackageManager pm = context.getPackageManager();</div><div class=\"line\">  ResolveInfo info = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class=\"line\">  return App.getInstance().getPackageName().equals(info.activityInfo.packageName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Android SQLite的使用","date":"2016-07-13T12:34:42.000Z","_content":"Android自带的数据库SQLite，是一个轻量级便捷的数据库。\n\n1.创建\nAndroid SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，\n所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。\n<!--more-->\n示例：\n```\npublic class PskDBHelper extends SQLiteOpenHelper {\n    /**\n     * 构造方法，通常用这个就可以了\n     *\n     * @param context\n     * @param name    数据库名称 如： psk.db\n     * @param factory 数据库游标工厂 通常传入 null\n     * @param version 版本号 如：1\n     */\n    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        //创建表SQL语句\n        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。\n        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。\n        String pskTable = \"create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)\";\n        db.execSQL(pskTable);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n```\n\n2.使用\n通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。\n其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，\n如果调用getWritableDatabase()的数据库不存在则会报错。\n\n3、增删改查\n这里只简单示例用SQL语句操作的方法。\n\n(1)插入数据\n```\npublic void insert(SQLiteDatabase db) {\n    //插入数据SQL语句\n    String insertSQL = \"insert into psktable(ssid,bssid,psk) values('wong','20:6a:8a:68:81:ce','12345678')\";\n    //执行SQL语句\n    db.execSQL(insertSQL);\n}\n```\n\n(2)删除数据\n```\npublic void del(SQLiteDatabase db) {\n    //删除SQL语句\n    String sql = \"delete from psktable where _id = 1\";\n    //执行SQL语句\n    db.execSQL(sql);\n}\n```\n(3)更新数据\n```\npublic void update(SQLiteDatabase db) {\n    //修改SQL语句\n    String sql = \"update psktable set ssid = 'wong' where _id = 1\";\n    //执行SQL\n    db.execSQL(sql);\n}\n```\n//在Android中查询数据是通过Cursor类来实现的，\n// 当我们使用SQLiteDatabase.query()方法时，\n// 会得到一个Cursor对象，Cursor指向的就是每一条数据\n(4)查询数据\n```\npublic void search(SQLiteDatabase db) {\n    //查询获得游标\n    Cursor cursor = db.query(\"psktable\", null, null, null, null, null, null);\n    //判断游标是否为空\n    if (cursor.moveToFirst()) {\n        //遍历游标\n        for (int i = 0; i < cursor.getCount(); i++) {\n            cursor.move(i);\n            //获得ID\n            int id = cursor.getInt(0);\n            //获得ssid\n            String ssid = cursor.getString(1);\n            //获得bssid\n            String bssid = cursor.getString(2);\n            //获取psk\n            String psk = cursor.getString(3);\n        }\n    }\n}\n```\n","source":"_posts/Android-SQLite的使用.md","raw":"---\ntitle: Android SQLite的使用\ndate: 2016-07-13 20:34:42\ntags: Android\n---\nAndroid自带的数据库SQLite，是一个轻量级便捷的数据库。\n\n1.创建\nAndroid SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，\n所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。\n<!--more-->\n示例：\n```\npublic class PskDBHelper extends SQLiteOpenHelper {\n    /**\n     * 构造方法，通常用这个就可以了\n     *\n     * @param context\n     * @param name    数据库名称 如： psk.db\n     * @param factory 数据库游标工厂 通常传入 null\n     * @param version 版本号 如：1\n     */\n    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        //创建表SQL语句\n        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。\n        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。\n        String pskTable = \"create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)\";\n        db.execSQL(pskTable);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n```\n\n2.使用\n通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。\n其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，\n如果调用getWritableDatabase()的数据库不存在则会报错。\n\n3、增删改查\n这里只简单示例用SQL语句操作的方法。\n\n(1)插入数据\n```\npublic void insert(SQLiteDatabase db) {\n    //插入数据SQL语句\n    String insertSQL = \"insert into psktable(ssid,bssid,psk) values('wong','20:6a:8a:68:81:ce','12345678')\";\n    //执行SQL语句\n    db.execSQL(insertSQL);\n}\n```\n\n(2)删除数据\n```\npublic void del(SQLiteDatabase db) {\n    //删除SQL语句\n    String sql = \"delete from psktable where _id = 1\";\n    //执行SQL语句\n    db.execSQL(sql);\n}\n```\n(3)更新数据\n```\npublic void update(SQLiteDatabase db) {\n    //修改SQL语句\n    String sql = \"update psktable set ssid = 'wong' where _id = 1\";\n    //执行SQL\n    db.execSQL(sql);\n}\n```\n//在Android中查询数据是通过Cursor类来实现的，\n// 当我们使用SQLiteDatabase.query()方法时，\n// 会得到一个Cursor对象，Cursor指向的就是每一条数据\n(4)查询数据\n```\npublic void search(SQLiteDatabase db) {\n    //查询获得游标\n    Cursor cursor = db.query(\"psktable\", null, null, null, null, null, null);\n    //判断游标是否为空\n    if (cursor.moveToFirst()) {\n        //遍历游标\n        for (int i = 0; i < cursor.getCount(); i++) {\n            cursor.move(i);\n            //获得ID\n            int id = cursor.getInt(0);\n            //获得ssid\n            String ssid = cursor.getString(1);\n            //获得bssid\n            String bssid = cursor.getString(2);\n            //获取psk\n            String psk = cursor.getString(3);\n        }\n    }\n}\n```\n","slug":"Android-SQLite的使用","published":1,"updated":"2017-03-11T02:46:49.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860djt0001vj2zot0qpxq2","content":"<p>Android自带的数据库SQLite，是一个轻量级便捷的数据库。</p>\n<p>1.创建<br>Android SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，<br>所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。<br><a id=\"more\"></a><br>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskDBHelper extends SQLiteOpenHelper &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构造方法，通常用这个就可以了</div><div class=\"line\">     *</div><div class=\"line\">     * @param context</div><div class=\"line\">     * @param name    数据库名称 如： psk.db</div><div class=\"line\">     * @param factory 数据库游标工厂 通常传入 null</div><div class=\"line\">     * @param version 版本号 如：1</div><div class=\"line\">     */</div><div class=\"line\">    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123;</div><div class=\"line\">        super(context, name, factory, version);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onCreate(SQLiteDatabase db) &#123;</div><div class=\"line\">        //创建表SQL语句</div><div class=\"line\">        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。</div><div class=\"line\">        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。</div><div class=\"line\">        String pskTable = &quot;create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)&quot;;</div><div class=\"line\">        db.execSQL(pskTable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.使用<br>通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。<br>其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，<br>如果调用getWritableDatabase()的数据库不存在则会报错。</p>\n<p>3、增删改查<br>这里只简单示例用SQL语句操作的方法。</p>\n<p>(1)插入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void insert(SQLiteDatabase db) &#123;</div><div class=\"line\">    //插入数据SQL语句</div><div class=\"line\">    String insertSQL = &quot;insert into psktable(ssid,bssid,psk) values(&apos;wong&apos;,&apos;20:6a:8a:68:81:ce&apos;,&apos;12345678&apos;)&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(insertSQL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2)删除数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void del(SQLiteDatabase db) &#123;</div><div class=\"line\">    //删除SQL语句</div><div class=\"line\">    String sql = &quot;delete from psktable where _id = 1&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)更新数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void update(SQLiteDatabase db) &#123;</div><div class=\"line\">    //修改SQL语句</div><div class=\"line\">    String sql = &quot;update psktable set ssid = &apos;wong&apos; where _id = 1&quot;;</div><div class=\"line\">    //执行SQL</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//在Android中查询数据是通过Cursor类来实现的，<br>// 当我们使用SQLiteDatabase.query()方法时，<br>// 会得到一个Cursor对象，Cursor指向的就是每一条数据<br>(4)查询数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void search(SQLiteDatabase db) &#123;</div><div class=\"line\">    //查询获得游标</div><div class=\"line\">    Cursor cursor = db.query(&quot;psktable&quot;, null, null, null, null, null, null);</div><div class=\"line\">    //判断游标是否为空</div><div class=\"line\">    if (cursor.moveToFirst()) &#123;</div><div class=\"line\">        //遍历游标</div><div class=\"line\">        for (int i = 0; i &lt; cursor.getCount(); i++) &#123;</div><div class=\"line\">            cursor.move(i);</div><div class=\"line\">            //获得ID</div><div class=\"line\">            int id = cursor.getInt(0);</div><div class=\"line\">            //获得ssid</div><div class=\"line\">            String ssid = cursor.getString(1);</div><div class=\"line\">            //获得bssid</div><div class=\"line\">            String bssid = cursor.getString(2);</div><div class=\"line\">            //获取psk</div><div class=\"line\">            String psk = cursor.getString(3);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Android自带的数据库SQLite，是一个轻量级便捷的数据库。</p>\n<p>1.创建<br>Android SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，<br>所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。<br>","more":"<br>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskDBHelper extends SQLiteOpenHelper &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构造方法，通常用这个就可以了</div><div class=\"line\">     *</div><div class=\"line\">     * @param context</div><div class=\"line\">     * @param name    数据库名称 如： psk.db</div><div class=\"line\">     * @param factory 数据库游标工厂 通常传入 null</div><div class=\"line\">     * @param version 版本号 如：1</div><div class=\"line\">     */</div><div class=\"line\">    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123;</div><div class=\"line\">        super(context, name, factory, version);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onCreate(SQLiteDatabase db) &#123;</div><div class=\"line\">        //创建表SQL语句</div><div class=\"line\">        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。</div><div class=\"line\">        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。</div><div class=\"line\">        String pskTable = &quot;create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)&quot;;</div><div class=\"line\">        db.execSQL(pskTable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.使用<br>通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。<br>其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，<br>如果调用getWritableDatabase()的数据库不存在则会报错。</p>\n<p>3、增删改查<br>这里只简单示例用SQL语句操作的方法。</p>\n<p>(1)插入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void insert(SQLiteDatabase db) &#123;</div><div class=\"line\">    //插入数据SQL语句</div><div class=\"line\">    String insertSQL = &quot;insert into psktable(ssid,bssid,psk) values(&apos;wong&apos;,&apos;20:6a:8a:68:81:ce&apos;,&apos;12345678&apos;)&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(insertSQL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2)删除数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void del(SQLiteDatabase db) &#123;</div><div class=\"line\">    //删除SQL语句</div><div class=\"line\">    String sql = &quot;delete from psktable where _id = 1&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)更新数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void update(SQLiteDatabase db) &#123;</div><div class=\"line\">    //修改SQL语句</div><div class=\"line\">    String sql = &quot;update psktable set ssid = &apos;wong&apos; where _id = 1&quot;;</div><div class=\"line\">    //执行SQL</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//在Android中查询数据是通过Cursor类来实现的，<br>// 当我们使用SQLiteDatabase.query()方法时，<br>// 会得到一个Cursor对象，Cursor指向的就是每一条数据<br>(4)查询数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void search(SQLiteDatabase db) &#123;</div><div class=\"line\">    //查询获得游标</div><div class=\"line\">    Cursor cursor = db.query(&quot;psktable&quot;, null, null, null, null, null, null);</div><div class=\"line\">    //判断游标是否为空</div><div class=\"line\">    if (cursor.moveToFirst()) &#123;</div><div class=\"line\">        //遍历游标</div><div class=\"line\">        for (int i = 0; i &lt; cursor.getCount(); i++) &#123;</div><div class=\"line\">            cursor.move(i);</div><div class=\"line\">            //获得ID</div><div class=\"line\">            int id = cursor.getInt(0);</div><div class=\"line\">            //获得ssid</div><div class=\"line\">            String ssid = cursor.getString(1);</div><div class=\"line\">            //获得bssid</div><div class=\"line\">            String bssid = cursor.getString(2);</div><div class=\"line\">            //获取psk</div><div class=\"line\">            String psk = cursor.getString(3);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Android中Handler的简单终结","date":"2016-05-12T13:37:59.000Z","_content":"1.Handler何用？\n在实际开发中Handler是为了解决在子线程更新UI的问题。\n\n2.Handler，Looper，MessageQueue的创建？\n一个Handler通常和一个Looper和一个MessageQueue绑定在一起。\n在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,\n并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），\n而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，\n可以通过getMainLooper()来获取主线程的Looper。\n<!--more-->\n3.Looper,Handler,MessageQueue的引用关系?\nLooper：好比一个泵，循环不断的在MessageQueue中查询消息\nMessageQueue：消息池，用于存放消息\n\n一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。\n\n子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，\n主线程对应的Looper循环不断的在MessageQueue中查询MSG，\n查询到则主线程通过Hanler处理消息。\n\n4.Handler导致内存泄露问题?\n一般我们写Handler:\n```\nHandler mHandler = new Handler() {\n@Override\npublic void handleMessage(Message msg) {\n  }\n}\n```\n当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。\n\n解决方法：\n在Handler中增加一个对Activity的弱引用（WeakReference）：\n```\nstatic class MyHandler extends Handler {\nWeakReference mActivityReference;\n\nMyHandler(Activity activity) {\nmActivityReference= new WeakReference(activity);\n}\n\n@Override\npublic void handleMessage(Message msg) {\nfinal Activity activity = mActivityReference.get();\nif (activity != null) {\n    }\n  }\n}\n```\n对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。\n","source":"_posts/Android中Handler的简单终结.md","raw":"---\ntitle: Android中Handler的简单终结\ndate: 2016-05-12 21:37:59\ntags: Android\n---\n1.Handler何用？\n在实际开发中Handler是为了解决在子线程更新UI的问题。\n\n2.Handler，Looper，MessageQueue的创建？\n一个Handler通常和一个Looper和一个MessageQueue绑定在一起。\n在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,\n并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），\n而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，\n可以通过getMainLooper()来获取主线程的Looper。\n<!--more-->\n3.Looper,Handler,MessageQueue的引用关系?\nLooper：好比一个泵，循环不断的在MessageQueue中查询消息\nMessageQueue：消息池，用于存放消息\n\n一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。\n\n子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，\n主线程对应的Looper循环不断的在MessageQueue中查询MSG，\n查询到则主线程通过Hanler处理消息。\n\n4.Handler导致内存泄露问题?\n一般我们写Handler:\n```\nHandler mHandler = new Handler() {\n@Override\npublic void handleMessage(Message msg) {\n  }\n}\n```\n当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。\n\n解决方法：\n在Handler中增加一个对Activity的弱引用（WeakReference）：\n```\nstatic class MyHandler extends Handler {\nWeakReference mActivityReference;\n\nMyHandler(Activity activity) {\nmActivityReference= new WeakReference(activity);\n}\n\n@Override\npublic void handleMessage(Message msg) {\nfinal Activity activity = mActivityReference.get();\nif (activity != null) {\n    }\n  }\n}\n```\n对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。\n","slug":"Android中Handler的简单终结","published":1,"updated":"2017-03-11T02:47:12.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dkd0003vj2zy94xesvt","content":"<p>1.Handler何用？<br>在实际开发中Handler是为了解决在子线程更新UI的问题。</p>\n<p>2.Handler，Looper，MessageQueue的创建？<br>一个Handler通常和一个Looper和一个MessageQueue绑定在一起。<br>在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,<br>并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），<br>而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，<br>可以通过getMainLooper()来获取主线程的Looper。<br><a id=\"more\"></a><br>3.Looper,Handler,MessageQueue的引用关系?<br>Looper：好比一个泵，循环不断的在MessageQueue中查询消息<br>MessageQueue：消息池，用于存放消息</p>\n<p>一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。</p>\n<p>子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，<br>主线程对应的Looper循环不断的在MessageQueue中查询MSG，<br>查询到则主线程通过Hanler处理消息。</p>\n<p>4.Handler导致内存泄露问题?<br>一般我们写Handler:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler mHandler = new Handler() &#123;</div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。</p>\n<p>解决方法：<br>在Handler中增加一个对Activity的弱引用（WeakReference）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class MyHandler extends Handler &#123;</div><div class=\"line\">WeakReference mActivityReference;</div><div class=\"line\"></div><div class=\"line\">MyHandler(Activity activity) &#123;</div><div class=\"line\">mActivityReference= new WeakReference(activity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">final Activity activity = mActivityReference.get();</div><div class=\"line\">if (activity != null) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。</p>\n","excerpt":"<p>1.Handler何用？<br>在实际开发中Handler是为了解决在子线程更新UI的问题。</p>\n<p>2.Handler，Looper，MessageQueue的创建？<br>一个Handler通常和一个Looper和一个MessageQueue绑定在一起。<br>在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,<br>并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），<br>而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，<br>可以通过getMainLooper()来获取主线程的Looper。<br>","more":"<br>3.Looper,Handler,MessageQueue的引用关系?<br>Looper：好比一个泵，循环不断的在MessageQueue中查询消息<br>MessageQueue：消息池，用于存放消息</p>\n<p>一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。</p>\n<p>子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，<br>主线程对应的Looper循环不断的在MessageQueue中查询MSG，<br>查询到则主线程通过Hanler处理消息。</p>\n<p>4.Handler导致内存泄露问题?<br>一般我们写Handler:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler mHandler = new Handler() &#123;</div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。</p>\n<p>解决方法：<br>在Handler中增加一个对Activity的弱引用（WeakReference）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class MyHandler extends Handler &#123;</div><div class=\"line\">WeakReference mActivityReference;</div><div class=\"line\"></div><div class=\"line\">MyHandler(Activity activity) &#123;</div><div class=\"line\">mActivityReference= new WeakReference(activity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">final Activity activity = mActivityReference.get();</div><div class=\"line\">if (activity != null) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。</p>"},{"title":"Android事件分发机制的简单解读","date":"2016-05-22T12:52:44.000Z","_content":"本篇文章只是简单的终结Android中事件的分发机制便于记忆\n\n首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法\n而View有dispatchTouchEvent和onTouchEvent方法。\n\n每一个事件都是从ViewGroup开始，\n1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），\n  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，\n  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）\n  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。\n\n2.当事件传递到View控件时，先执行onTouchEvent事件，\n  其中onTouchEvent若返回true表示自身消费该事件，\n  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。\n","source":"_posts/Android事件分发机制的简单解读.md","raw":"---\ntitle: Android事件分发机制的简单解读\ndate: 2016-05-22 20:52:44\ntags: Android\n---\n本篇文章只是简单的终结Android中事件的分发机制便于记忆\n\n首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法\n而View有dispatchTouchEvent和onTouchEvent方法。\n\n每一个事件都是从ViewGroup开始，\n1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），\n  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，\n  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）\n  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。\n\n2.当事件传递到View控件时，先执行onTouchEvent事件，\n  其中onTouchEvent若返回true表示自身消费该事件，\n  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。\n","slug":"Android事件分发机制的简单解读","published":1,"updated":"2017-02-17T12:18:34.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dkh0004vj2zjbgg46re","content":"<p>本篇文章只是简单的终结Android中事件的分发机制便于记忆</p>\n<p>首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法<br>而View有dispatchTouchEvent和onTouchEvent方法。</p>\n<p>每一个事件都是从ViewGroup开始，<br>1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），<br>  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，<br>  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）<br>  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。</p>\n<p>2.当事件传递到View控件时，先执行onTouchEvent事件，<br>  其中onTouchEvent若返回true表示自身消费该事件，<br>  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。</p>\n","excerpt":"","more":"<p>本篇文章只是简单的终结Android中事件的分发机制便于记忆</p>\n<p>首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法<br>而View有dispatchTouchEvent和onTouchEvent方法。</p>\n<p>每一个事件都是从ViewGroup开始，<br>1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），<br>  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，<br>  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）<br>  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。</p>\n<p>2.当事件传递到View控件时，先执行onTouchEvent事件，<br>  其中onTouchEvent若返回true表示自身消费该事件，<br>  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。</p>\n"},{"title":"Android动态修改某个控件大小","date":"2016-06-10T12:05:15.000Z","_content":"\n1. 动态修改Margin 和 大小\n```\nViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();\nlayoutParams.topMargin= top; //像素px\nparlayoutParamsams.width = width;\nlayoutParams.height = height;\nview.setLayoutParams(layoutParams);\n```\n2. 动态修改Padding\n```\nview.setPadding(left,top,right,bottom);\n```\n3. 动态修改TextView的drawable\n```\nDrawable icon = getResources().getDrawable(R.mipmap.img);\nicon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());\ntv.setCompoundDrawables(icon, null, null, null);\n```\n","source":"_posts/Android动态修改某个控件大小.md","raw":"---\ntitle: Android动态修改某个控件大小\ndate: 2016-06-10 20:05:15\ntags: Android\n---\n\n1. 动态修改Margin 和 大小\n```\nViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();\nlayoutParams.topMargin= top; //像素px\nparlayoutParamsams.width = width;\nlayoutParams.height = height;\nview.setLayoutParams(layoutParams);\n```\n2. 动态修改Padding\n```\nview.setPadding(left,top,right,bottom);\n```\n3. 动态修改TextView的drawable\n```\nDrawable icon = getResources().getDrawable(R.mipmap.img);\nicon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());\ntv.setCompoundDrawables(icon, null, null, null);\n```\n","slug":"Android动态修改某个控件大小","published":1,"updated":"2017-02-17T12:16:28.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dko0005vj2zcu88bfh4","content":"<ol>\n<li><p>动态修改Margin 和 大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();</div><div class=\"line\">layoutParams.topMargin= top; //像素px</div><div class=\"line\">parlayoutParamsams.width = width;</div><div class=\"line\">layoutParams.height = height;</div><div class=\"line\">view.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改Padding</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.setPadding(left,top,right,bottom);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改TextView的drawable</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Drawable icon = getResources().getDrawable(R.mipmap.img);</div><div class=\"line\">icon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());</div><div class=\"line\">tv.setCompoundDrawables(icon, null, null, null);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>动态修改Margin 和 大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();</div><div class=\"line\">layoutParams.topMargin= top; //像素px</div><div class=\"line\">parlayoutParamsams.width = width;</div><div class=\"line\">layoutParams.height = height;</div><div class=\"line\">view.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改Padding</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.setPadding(left,top,right,bottom);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改TextView的drawable</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Drawable icon = getResources().getDrawable(R.mipmap.img);</div><div class=\"line\">icon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());</div><div class=\"line\">tv.setCompoundDrawables(icon, null, null, null);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Android设置全屏的几种方式","date":"2016-06-10T11:39:20.000Z","_content":"\n1. 将状态栏导航栏透明化，API19以上有效\n```\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    //透明状态栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    //透明导航栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n}\n```\n2. 设置全屏参数\n```\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n```\n3. 沉浸式\n```\nView decorView = getWindow().getDecorView();\nint option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\ndecorView.setSystemUiVisibility(option);\n```\n具体参照 ： http://blog.csdn.net/sinyu890807/article/details/51763825\n","source":"_posts/Android设置全屏的几种方式.md","raw":"---\ntitle: Android设置全屏的几种方式\ndate: 2016-06-10 19:39:20\ntags: Android\n---\n\n1. 将状态栏导航栏透明化，API19以上有效\n```\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    //透明状态栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    //透明导航栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n}\n```\n2. 设置全屏参数\n```\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n```\n3. 沉浸式\n```\nView decorView = getWindow().getDecorView();\nint option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\ndecorView.setSystemUiVisibility(option);\n```\n具体参照 ： http://blog.csdn.net/sinyu890807/article/details/51763825\n","slug":"Android设置全屏的几种方式","published":1,"updated":"2017-02-17T12:16:21.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dky0008vj2zcnytliq5","content":"<ol>\n<li><p>将状态栏导航栏透明化，API19以上有效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">    //透明状态栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">    //透明导航栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置全屏参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</div></pre></td></tr></table></figure>\n</li>\n<li><p>沉浸式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">View decorView = getWindow().getDecorView();</div><div class=\"line\">int option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;</div><div class=\"line\">decorView.setSystemUiVisibility(option);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体参照 ： <a href=\"http://blog.csdn.net/sinyu890807/article/details/51763825\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sinyu890807/article/details/51763825</a></p>\n","excerpt":"","more":"<ol>\n<li><p>将状态栏导航栏透明化，API19以上有效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">    //透明状态栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">    //透明导航栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置全屏参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</div></pre></td></tr></table></figure>\n</li>\n<li><p>沉浸式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">View decorView = getWindow().getDecorView();</div><div class=\"line\">int option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;</div><div class=\"line\">decorView.setSystemUiVisibility(option);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体参照 ： <a href=\"http://blog.csdn.net/sinyu890807/article/details/51763825\">http://blog.csdn.net/sinyu890807/article/details/51763825</a></p>\n"},{"title":"EditText相关","date":"2016-03-21T12:07:11.000Z","_content":"1.光标\n```\ntx_count.setCursorVisible(true); //设置光标\ntx_count.setSelection(tx_count.length()); //设置光标位置\n```\n2.自动弹窗软键盘\n```\ntx_count.requestFocus();\nInputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);\n```\n<!--more-->\n3.输入监听\n```\ntx_count.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n4.xml:\n```\nandroid:inputType=\"phone\" //输入类型\nandroid:digits=\"0123456789.\" //只能输入数字和点\nandroid:background=\"@null\" //背景为空\nandroid:cursorVisible=\"false\" //不显示光标\nandroid:maxLength=\"5\" //5个字符\n```\n5.AndroidManifest.xml\n```\nandroid:windowSoftInputMode=\"stateHidden|stateAlwaysHidden\"  //不弹出软键盘\nandroid:windowSoftInputMode=\"stateVisible|stateAlwaysVisible\"  //自动弹出软键盘\n```\n","source":"_posts/EditText相关.md","raw":"---\ntitle: EditText相关\ndate: 2016-03-21 20:07:11\ntags: Android\n---\n1.光标\n```\ntx_count.setCursorVisible(true); //设置光标\ntx_count.setSelection(tx_count.length()); //设置光标位置\n```\n2.自动弹窗软键盘\n```\ntx_count.requestFocus();\nInputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);\n```\n<!--more-->\n3.输入监听\n```\ntx_count.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n4.xml:\n```\nandroid:inputType=\"phone\" //输入类型\nandroid:digits=\"0123456789.\" //只能输入数字和点\nandroid:background=\"@null\" //背景为空\nandroid:cursorVisible=\"false\" //不显示光标\nandroid:maxLength=\"5\" //5个字符\n```\n5.AndroidManifest.xml\n```\nandroid:windowSoftInputMode=\"stateHidden|stateAlwaysHidden\"  //不弹出软键盘\nandroid:windowSoftInputMode=\"stateVisible|stateAlwaysVisible\"  //自动弹出软键盘\n```\n","slug":"EditText相关","published":1,"updated":"2017-03-11T02:47:23.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dlb000avj2zm5td5zt2","content":"<p>1.光标<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.setCursorVisible(true); //设置光标</div><div class=\"line\">tx_count.setSelection(tx_count.length()); //设置光标位置</div></pre></td></tr></table></figure></p>\n<p>2.自动弹窗软键盘<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.requestFocus();</div><div class=\"line\">InputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class=\"line\">imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>3.输入监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.addTextChangedListener(new TextWatcher() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void afterTextChanged(Editable s) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.xml:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inputType=&quot;phone&quot; //输入类型</div><div class=\"line\">android:digits=&quot;0123456789.&quot; //只能输入数字和点</div><div class=\"line\">android:background=&quot;@null&quot; //背景为空</div><div class=\"line\">android:cursorVisible=&quot;false&quot; //不显示光标</div><div class=\"line\">android:maxLength=&quot;5&quot; //5个字符</div></pre></td></tr></table></figure></p>\n<p>5.AndroidManifest.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:windowSoftInputMode=&quot;stateHidden|stateAlwaysHidden&quot;  //不弹出软键盘</div><div class=\"line\">android:windowSoftInputMode=&quot;stateVisible|stateAlwaysVisible&quot;  //自动弹出软键盘</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>1.光标<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.setCursorVisible(true); //设置光标</div><div class=\"line\">tx_count.setSelection(tx_count.length()); //设置光标位置</div></pre></td></tr></table></figure></p>\n<p>2.自动弹窗软键盘<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.requestFocus();</div><div class=\"line\">InputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class=\"line\">imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</div></pre></td></tr></table></figure></p>","more":"<p>3.输入监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.addTextChangedListener(new TextWatcher() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void afterTextChanged(Editable s) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.xml:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inputType=&quot;phone&quot; //输入类型</div><div class=\"line\">android:digits=&quot;0123456789.&quot; //只能输入数字和点</div><div class=\"line\">android:background=&quot;@null&quot; //背景为空</div><div class=\"line\">android:cursorVisible=&quot;false&quot; //不显示光标</div><div class=\"line\">android:maxLength=&quot;5&quot; //5个字符</div></pre></td></tr></table></figure></p>\n<p>5.AndroidManifest.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:windowSoftInputMode=&quot;stateHidden|stateAlwaysHidden&quot;  //不弹出软键盘</div><div class=\"line\">android:windowSoftInputMode=&quot;stateVisible|stateAlwaysVisible&quot;  //自动弹出软键盘</div></pre></td></tr></table></figure></p>"},{"title":"Fragment的管理","date":"2016-06-17T13:09:27.000Z","_content":"一.生命周期\nFragment的生命周期方法主要有\nonAttach()\nonCreate()\nonCreateView()\nonActivityCreated()\nonstart()\nonResume()\nonPause()\nonStop()\nonDestroyView()\nonDestroy()\nonDetach()等11个方法。\n<!--more-->\n\n切换到该Fragment，分别执行onAttach()、onCreate()、onCreateView()、onActivityCreated()、onstart()、onResume()方法。\n锁屏，分别执行onPause()、onStop()方法。\n亮屏，分别执行onstart()、onResume()方法。\n覆盖，切换到其他Fragment，分别执行onPause()、onStop()、onDestroyView()方法。\n从其他Fragment回到之前Fragment，分别执行onCreateView()、onActivityCreated()、onstart()、onResume()方法。\n\n二.Fragment与activity如何传值和交互？\nFragment对象有一个getActivity的方法，通过该方法与activity交互.\n使用framentmentManager.findFragmentByXX可以获取fragment对象，在activity中直接操作fragment对象\n","source":"_posts/Fragment的管理.md","raw":"---\ntitle: Fragment的管理\ndate: 2016-06-17 21:09:27\ntags: Android\n---\n一.生命周期\nFragment的生命周期方法主要有\nonAttach()\nonCreate()\nonCreateView()\nonActivityCreated()\nonstart()\nonResume()\nonPause()\nonStop()\nonDestroyView()\nonDestroy()\nonDetach()等11个方法。\n<!--more-->\n\n切换到该Fragment，分别执行onAttach()、onCreate()、onCreateView()、onActivityCreated()、onstart()、onResume()方法。\n锁屏，分别执行onPause()、onStop()方法。\n亮屏，分别执行onstart()、onResume()方法。\n覆盖，切换到其他Fragment，分别执行onPause()、onStop()、onDestroyView()方法。\n从其他Fragment回到之前Fragment，分别执行onCreateView()、onActivityCreated()、onstart()、onResume()方法。\n\n二.Fragment与activity如何传值和交互？\nFragment对象有一个getActivity的方法，通过该方法与activity交互.\n使用framentmentManager.findFragmentByXX可以获取fragment对象，在activity中直接操作fragment对象\n","slug":"Fragment的管理","published":1,"updated":"2017-03-11T02:47:34.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dlk000dvj2zmif0oakx","content":"<p>一.生命周期<br>Fragment的生命周期方法主要有<br>onAttach()<br>onCreate()<br>onCreateView()<br>onActivityCreated()<br>onstart()<br>onResume()<br>onPause()<br>onStop()<br>onDestroyView()<br>onDestroy()<br>onDetach()等11个方法。<br><a id=\"more\"></a></p>\n<p>切换到该Fragment，分别执行onAttach()、onCreate()、onCreateView()、onActivityCreated()、onstart()、onResume()方法。<br>锁屏，分别执行onPause()、onStop()方法。<br>亮屏，分别执行onstart()、onResume()方法。<br>覆盖，切换到其他Fragment，分别执行onPause()、onStop()、onDestroyView()方法。<br>从其他Fragment回到之前Fragment，分别执行onCreateView()、onActivityCreated()、onstart()、onResume()方法。</p>\n<p>二.Fragment与activity如何传值和交互？<br>Fragment对象有一个getActivity的方法，通过该方法与activity交互.<br>使用framentmentManager.findFragmentByXX可以获取fragment对象，在activity中直接操作fragment对象</p>\n","excerpt":"<p>一.生命周期<br>Fragment的生命周期方法主要有<br>onAttach()<br>onCreate()<br>onCreateView()<br>onActivityCreated()<br>onstart()<br>onResume()<br>onPause()<br>onStop()<br>onDestroyView()<br>onDestroy()<br>onDetach()等11个方法。<br>","more":"</p>\n<p>切换到该Fragment，分别执行onAttach()、onCreate()、onCreateView()、onActivityCreated()、onstart()、onResume()方法。<br>锁屏，分别执行onPause()、onStop()方法。<br>亮屏，分别执行onstart()、onResume()方法。<br>覆盖，切换到其他Fragment，分别执行onPause()、onStop()、onDestroyView()方法。<br>从其他Fragment回到之前Fragment，分别执行onCreateView()、onActivityCreated()、onstart()、onResume()方法。</p>\n<p>二.Fragment与activity如何传值和交互？<br>Fragment对象有一个getActivity的方法，通过该方法与activity交互.<br>使用framentmentManager.findFragmentByXX可以获取fragment对象，在activity中直接操作fragment对象</p>"},{"title":"Java注解反射","date":"2016-06-17T13:10:16.000Z","_content":"一.3种方式获取加载指定的类\nClass cla = 类名.class\nClass cla = 对象.getClass();\nClass cla = Class.forName(\"name\");\n\nDemo demo = (Demo)cla.newInstance(); //加载指定类的对象\ndemo.a(); //调用对象的方法\n<!--more-->\n```\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tClass c = MyDemo.class;\n\t\t\tMyDemo demo = (MyDemo) c.newInstance();\n\t\t\tSystem.out.println(\"--->c: \" + demo.c); //如果是在同一个包下,则可以调用protected属性和方法,否则只能操作public\n\t\t\tdemo.f();\n\t\t\tSystem.out.println(\"成员变量个数 : \" + c.getDeclaredFields().length); //能取到所有的属性\n\t\t\tSystem.out.println(\"公开方法个数 : \" + c.getMethods().length);//能取到公开方法,包括父类的\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n输出:\n--->c: 0\n--->f\n成员变量个数 : 3\n公开方法个数 : 10\n```\npackage test2;\npublic class MyDemo {\n\tprivate int a;\n\tprotected int b;\n\tpublic int c;\n\n\tprivate void d() {\n\t\tSystem.out.println(\"--->d \");\n\t}\n\n\tprotected void e(){\n\t\tSystem.out.println(\"--->e \");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"--->f \");\n\t}\n}\n```\n二.Field 成员变量\nClass c = MyDemo.class;\nField[] fieldArray = c.getFields(); //得到Field数组\n```\nClass c = MyDemo.class;\nMyDemo demo = (MyDemo) c.newInstance();\nField[] fieldArray = c.getFields();\nfor(int i = 0; i<fieldArray.length;i++){\n\t\tField field = fieldArray[i];\n\t\tSystem.out.println(\"变量名称 : \" + field.getName());\n    System.out.println(\"变量值 : \" + field.get(demo));\n}\n```\n输出:\n变量名称 : c\n变量值 : 0\n(只打印出公开成员)\n\n修改访问限制:\n```\n//获取所有的成员,包含private\nField[] fieldArray = c.getDeclaredFields();\nfield[0].setAccessible(true);\n```\n三.Method 方法\nClass c = MyDemo.class;\nMethod[] ma = c.getMethods();\n```\nMethod[] mo = c.getMethods();\nfor(int i = 0; i<mo.length;i++){\n  Method method = mo[i];\n  System.out.println(\"方法名 : \" + method.getName());\n  System.out.println(\"方法返回类型 : \" + method.getReturnType());\n\tParameter[] parames = method.getParameters();//获取参数列表\n}\n```\ninvoke()的使用:\n```\n//getMethod,分别传入方法名,参数类型\n//invoke,分别传入对象,参数,没有则为null\nc.getMethod(\"f\", null).invoke(demo, null);\n```\n修改访问限制:\n```\n//获取所有的成员变量,包含private\nMethod[] mo = c.getDeclaredMethods();\nAccessibleObject.setAccessible(mo, true);\nmo[2].invoke(demo, null);\n```\n四.Constructor 构造器\n","source":"_posts/Java注解反射.md","raw":"---\ntitle: Java注解反射\ndate: 2016-06-17 21:10:16\ntags: Java\n---\n一.3种方式获取加载指定的类\nClass cla = 类名.class\nClass cla = 对象.getClass();\nClass cla = Class.forName(\"name\");\n\nDemo demo = (Demo)cla.newInstance(); //加载指定类的对象\ndemo.a(); //调用对象的方法\n<!--more-->\n```\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tClass c = MyDemo.class;\n\t\t\tMyDemo demo = (MyDemo) c.newInstance();\n\t\t\tSystem.out.println(\"--->c: \" + demo.c); //如果是在同一个包下,则可以调用protected属性和方法,否则只能操作public\n\t\t\tdemo.f();\n\t\t\tSystem.out.println(\"成员变量个数 : \" + c.getDeclaredFields().length); //能取到所有的属性\n\t\t\tSystem.out.println(\"公开方法个数 : \" + c.getMethods().length);//能取到公开方法,包括父类的\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n输出:\n--->c: 0\n--->f\n成员变量个数 : 3\n公开方法个数 : 10\n```\npackage test2;\npublic class MyDemo {\n\tprivate int a;\n\tprotected int b;\n\tpublic int c;\n\n\tprivate void d() {\n\t\tSystem.out.println(\"--->d \");\n\t}\n\n\tprotected void e(){\n\t\tSystem.out.println(\"--->e \");\n\t}\n\n\tpublic void f() {\n\t\tSystem.out.println(\"--->f \");\n\t}\n}\n```\n二.Field 成员变量\nClass c = MyDemo.class;\nField[] fieldArray = c.getFields(); //得到Field数组\n```\nClass c = MyDemo.class;\nMyDemo demo = (MyDemo) c.newInstance();\nField[] fieldArray = c.getFields();\nfor(int i = 0; i<fieldArray.length;i++){\n\t\tField field = fieldArray[i];\n\t\tSystem.out.println(\"变量名称 : \" + field.getName());\n    System.out.println(\"变量值 : \" + field.get(demo));\n}\n```\n输出:\n变量名称 : c\n变量值 : 0\n(只打印出公开成员)\n\n修改访问限制:\n```\n//获取所有的成员,包含private\nField[] fieldArray = c.getDeclaredFields();\nfield[0].setAccessible(true);\n```\n三.Method 方法\nClass c = MyDemo.class;\nMethod[] ma = c.getMethods();\n```\nMethod[] mo = c.getMethods();\nfor(int i = 0; i<mo.length;i++){\n  Method method = mo[i];\n  System.out.println(\"方法名 : \" + method.getName());\n  System.out.println(\"方法返回类型 : \" + method.getReturnType());\n\tParameter[] parames = method.getParameters();//获取参数列表\n}\n```\ninvoke()的使用:\n```\n//getMethod,分别传入方法名,参数类型\n//invoke,分别传入对象,参数,没有则为null\nc.getMethod(\"f\", null).invoke(demo, null);\n```\n修改访问限制:\n```\n//获取所有的成员变量,包含private\nMethod[] mo = c.getDeclaredMethods();\nAccessibleObject.setAccessible(mo, true);\nmo[2].invoke(demo, null);\n```\n四.Constructor 构造器\n","slug":"Java注解反射","published":1,"updated":"2017-03-11T02:47:46.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dlu000fvj2zlz1i02lr","content":"<p>一.3种方式获取加载指定的类<br>Class cla = 类名.class<br>Class cla = 对象.getClass();<br>Class cla = Class.forName(“name”);</p>\n<p>Demo demo = (Demo)cla.newInstance(); //加载指定类的对象<br>demo.a(); //调用对象的方法<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tClass c = MyDemo.class;</div><div class=\"line\">\t\t\tMyDemo demo = (MyDemo) c.newInstance();</div><div class=\"line\">\t\t\tSystem.out.println(&quot;---&gt;c: &quot; + demo.c); //如果是在同一个包下,则可以调用protected属性和方法,否则只能操作public</div><div class=\"line\">\t\t\tdemo.f();</div><div class=\"line\">\t\t\tSystem.out.println(&quot;成员变量个数 : &quot; + c.getDeclaredFields().length); //能取到所有的属性</div><div class=\"line\">\t\t\tSystem.out.println(&quot;公开方法个数 : &quot; + c.getMethods().length);//能取到公开方法,包括父类的</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出:<br>—&gt;c: 0<br>—&gt;f<br>成员变量个数 : 3<br>公开方法个数 : 10<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package test2;</div><div class=\"line\">public class MyDemo &#123;</div><div class=\"line\">\tprivate int a;</div><div class=\"line\">\tprotected int b;</div><div class=\"line\">\tpublic int c;</div><div class=\"line\"></div><div class=\"line\">\tprivate void d() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;---&gt;d &quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tprotected void e()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;---&gt;e &quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void f() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;---&gt;f &quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>二.Field 成员变量<br>Class c = MyDemo.class;<br>Field[] fieldArray = c.getFields(); //得到Field数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c = MyDemo.class;</div><div class=\"line\">MyDemo demo = (MyDemo) c.newInstance();</div><div class=\"line\">Field[] fieldArray = c.getFields();</div><div class=\"line\">for(int i = 0; i&lt;fieldArray.length;i++)&#123;</div><div class=\"line\">\t\tField field = fieldArray[i];</div><div class=\"line\">\t\tSystem.out.println(&quot;变量名称 : &quot; + field.getName());</div><div class=\"line\">    System.out.println(&quot;变量值 : &quot; + field.get(demo));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出:<br>变量名称 : c<br>变量值 : 0<br>(只打印出公开成员)</p>\n<p>修改访问限制:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//获取所有的成员,包含private</div><div class=\"line\">Field[] fieldArray = c.getDeclaredFields();</div><div class=\"line\">field[0].setAccessible(true);</div></pre></td></tr></table></figure></p>\n<p>三.Method 方法<br>Class c = MyDemo.class;<br>Method[] ma = c.getMethods();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] mo = c.getMethods();</div><div class=\"line\">for(int i = 0; i&lt;mo.length;i++)&#123;</div><div class=\"line\">  Method method = mo[i];</div><div class=\"line\">  System.out.println(&quot;方法名 : &quot; + method.getName());</div><div class=\"line\">  System.out.println(&quot;方法返回类型 : &quot; + method.getReturnType());</div><div class=\"line\">\tParameter[] parames = method.getParameters();//获取参数列表</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>invoke()的使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//getMethod,分别传入方法名,参数类型</div><div class=\"line\">//invoke,分别传入对象,参数,没有则为null</div><div class=\"line\">c.getMethod(&quot;f&quot;, null).invoke(demo, null);</div></pre></td></tr></table></figure></p>\n<p>修改访问限制:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//获取所有的成员变量,包含private</div><div class=\"line\">Method[] mo = c.getDeclaredMethods();</div><div class=\"line\">AccessibleObject.setAccessible(mo, true);</div><div class=\"line\">mo[2].invoke(demo, null);</div></pre></td></tr></table></figure></p>\n<p>四.Constructor 构造器</p>\n","excerpt":"<p>一.3种方式获取加载指定的类<br>Class cla = 类名.class<br>Class cla = 对象.getClass();<br>Class cla = Class.forName(“name”);</p>\n<p>Demo demo = (Demo)cla.newInstance(); //加载指定类的对象<br>demo.a(); //调用对象的方法<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\">\tpublic static void main(String[] args) &#123;</div><div class=\"line\">\t\ttry &#123;</div><div class=\"line\">\t\t\tClass c = MyDemo.class;</div><div class=\"line\">\t\t\tMyDemo demo = (MyDemo) c.newInstance();</div><div class=\"line\">\t\t\tSystem.out.println(&quot;---&gt;c: &quot; + demo.c); //如果是在同一个包下,则可以调用protected属性和方法,否则只能操作public</div><div class=\"line\">\t\t\tdemo.f();</div><div class=\"line\">\t\t\tSystem.out.println(&quot;成员变量个数 : &quot; + c.getDeclaredFields().length); //能取到所有的属性</div><div class=\"line\">\t\t\tSystem.out.println(&quot;公开方法个数 : &quot; + c.getMethods().length);//能取到公开方法,包括父类的</div><div class=\"line\">\t\t&#125; catch (Exception e) &#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出:<br>—&gt;c: 0<br>—&gt;f<br>成员变量个数 : 3<br>公开方法个数 : 10<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package test2;</div><div class=\"line\">public class MyDemo &#123;</div><div class=\"line\">\tprivate int a;</div><div class=\"line\">\tprotected int b;</div><div class=\"line\">\tpublic int c;</div><div class=\"line\"></div><div class=\"line\">\tprivate void d() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;---&gt;d &quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tprotected void e()&#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;---&gt;e &quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tpublic void f() &#123;</div><div class=\"line\">\t\tSystem.out.println(&quot;---&gt;f &quot;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>二.Field 成员变量<br>Class c = MyDemo.class;<br>Field[] fieldArray = c.getFields(); //得到Field数组<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Class c = MyDemo.class;</div><div class=\"line\">MyDemo demo = (MyDemo) c.newInstance();</div><div class=\"line\">Field[] fieldArray = c.getFields();</div><div class=\"line\">for(int i = 0; i&lt;fieldArray.length;i++)&#123;</div><div class=\"line\">\t\tField field = fieldArray[i];</div><div class=\"line\">\t\tSystem.out.println(&quot;变量名称 : &quot; + field.getName());</div><div class=\"line\">    System.out.println(&quot;变量值 : &quot; + field.get(demo));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出:<br>变量名称 : c<br>变量值 : 0<br>(只打印出公开成员)</p>\n<p>修改访问限制:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//获取所有的成员,包含private</div><div class=\"line\">Field[] fieldArray = c.getDeclaredFields();</div><div class=\"line\">field[0].setAccessible(true);</div></pre></td></tr></table></figure></p>\n<p>三.Method 方法<br>Class c = MyDemo.class;<br>Method[] ma = c.getMethods();<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method[] mo = c.getMethods();</div><div class=\"line\">for(int i = 0; i&lt;mo.length;i++)&#123;</div><div class=\"line\">  Method method = mo[i];</div><div class=\"line\">  System.out.println(&quot;方法名 : &quot; + method.getName());</div><div class=\"line\">  System.out.println(&quot;方法返回类型 : &quot; + method.getReturnType());</div><div class=\"line\">\tParameter[] parames = method.getParameters();//获取参数列表</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>invoke()的使用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">//getMethod,分别传入方法名,参数类型</div><div class=\"line\">//invoke,分别传入对象,参数,没有则为null</div><div class=\"line\">c.getMethod(&quot;f&quot;, null).invoke(demo, null);</div></pre></td></tr></table></figure></p>\n<p>修改访问限制:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//获取所有的成员变量,包含private</div><div class=\"line\">Method[] mo = c.getDeclaredMethods();</div><div class=\"line\">AccessibleObject.setAccessible(mo, true);</div><div class=\"line\">mo[2].invoke(demo, null);</div></pre></td></tr></table></figure></p>\n<p>四.Constructor 构造器</p>"},{"title":"mvp与mvvm","date":"2016-12-17T13:10:41.000Z","_content":"一.MVP\n首先来看MVP各自负责什么：\n\nModel，负责定义数据（解决什么是数据）\nPresenter, 负责在Model和View之间，从model里取出数据，格式化后在View上展示（解决如何把数据和用户界面放在一起）\nView，用于展示数据（解决如何展示数据）\n\n很显然Presenter作为中间者，它是同时拥有View和Model的引用的.\n而Model和View必须是完全隔离的，不允许两者之间互相通信。\n<!--more-->\nModel在三者中是独立性最高的，Model不应该拥有对View的引用，而且Model也不需要保存对Presenter的引用，对于Presenter而已，Model只需要提供接口，等着Presenter来调用时返回相应数据即可，这和经典MVC模式中是非常不同的，在MVC中Model在数据发送变化后，是需要发送广播来告之View去更新用户界面的，而在MVP中，Model是不应该去通知View，而是通知Presenter来间接的更新View的。\n\n而Presenter和Model的关系也应该是基于接口来通信，这样才能把Model和Presenter的耦合度也降到最低，那么在需要改变Model内部实现，甚至彻底替换Model的时候，Presenter则是无需随之改变的。这样做带来的另一个好处就是你可以通过Mock一个Model来对Presenter以及View做模拟测试了，从而提高了可测试性。\n\n那么View和Presenter的关系呢？View是需要拥有对Presenter的引用，但仅仅是为了将用户的操作和事件立即传递给Presenter，为了让View和Presenter耦合较低，View也只应该通过接口与Presenter通信，从而保证View是完全被动的，一方面它由用户的操作触发来和Presenter通信，另一方面它完全受Presenter控制，唯一需要做的事情就是如何展示数据。\n\n简要总结三者之间的关系是：View和Model之间没有联系，View通过接口向Presenter来传递用户操作，Model不主动和Presenter联系，被动的等着Presenter来调用其接口，Presenter通过接口和View/Model来联系。\n\n谷歌官方给的![MVP例子]https://github.com/googlesamples/android-architecture\n\n为了便于理解，这里提供一些伪代码加注释演示一下如何实现MVP模式：\n\nView\n```\ninterface IUserView {\n\n  void setPresenter(presenter);\n  void showUsers(users);\n  void showDeleteUserComplete();\n  void showDeleteUserError();\n\n}\n\nclass UserView implements IUserView {\n\n  UserPresenter presenter;\n\n  // 保持对Presenter的引用，用于路由用户操作\n  void setPresenter(presenter) {\n      this.presenter = presenter;\n  }\n\n  // 将Presenter传递来的数据展示出来\n  void showUsers(users) {\n      draw(users);\n  }\n\n  // Model操作数据成功后，通过Presenter来告之View需要更新用户界面\n  void showDeleteUserComplete() {\n      alert(\"Delete User Complete\");\n  }\n\n  // Model操作数据失败后，也是通过Presenter来告之View需要更新用户界面\n  void showDeleteUserError() {\n      alert(\"Delete User Fail\");\n  }\n\n  // 当用户点击某个按钮时，将用户操作路由给presenter，由presenter去处理\n  void onDeleteButtonClicked(event) {\n      presenter.deleteUser(event);\n  }\n\n}\n```\nModel\n```\ninterface IUserModel {\n\n  List<User> getUsers();\n  boolean deleteUserById();\n\n}\n\nclass UserModel implements IUserModel {\n\n  // 在数据库里查找数据，并将数据返回给presenter\n  List<User> getUsers() {\n       return getUsersInDatabase(id);\n  }\n\n  // 在数据库里删除数据，并将结果返回给presenter\n  User deleteUserById(id) {\n      return deleteUserByIdInDatabase(id);\n  }\n\n}\n```\nPresenter\n```\ninterface IUserUserPresenter {\n\n  void deleteUser(event);\n\n}\n\nclass UserUserPresenter implements IUserPresenter {\n\n  // 保持对View的引用\n  IUserView view;\n  // 保持对Model的引用\n  IUserModel model;\n\n  UserUserPresenter(IUserView view, IUserModel model) {\n    this.view = view;    \n    this.model = model;\n\n    this.view.setPresenter(this);   \n  }\n\n  void start() {\n    // 从Model中取出数据\n    List<User> users = model.getUsers();\n    // 将数据发送给View，让其展示到用户界面\n    view.showUsers(users);\n  }\n\n  void deleteUser(event) {\n    // View将用户操作路由过来，由Presenter来处理\n    long uid = whichUserNeedToDeleteBy(event);\n    // 将用户操作翻译成命令或消息传递给model，以改变数据\n    boolean success = model.deleteUserById(uid);\n    // 将Model操作数据后的结果通知View来改变用户界面\n    if (success) {\n          view.onDeleteUserSuccess();\n    } else {\n        view.onDeleteUserFail();  \n    }\n  }\n}\n```\n\n二.MVVP\nMVVM是由三个核心部分，每个都有它自己的不同而独立的作用：\n\nModel - 包含业务和验证逻辑的数据模型\nView -- 定义结构,布局和View 在屏幕上的显示\nViewModel - 充当 View 和 ViewModel 之间的连接, 处理所有视图逻辑.\n","source":"_posts/MVP与MVVM.md","raw":"---\ntitle: mvp与mvvm\ndate: 2016-12-17 21:10:41\ntags: 架构\n---\n一.MVP\n首先来看MVP各自负责什么：\n\nModel，负责定义数据（解决什么是数据）\nPresenter, 负责在Model和View之间，从model里取出数据，格式化后在View上展示（解决如何把数据和用户界面放在一起）\nView，用于展示数据（解决如何展示数据）\n\n很显然Presenter作为中间者，它是同时拥有View和Model的引用的.\n而Model和View必须是完全隔离的，不允许两者之间互相通信。\n<!--more-->\nModel在三者中是独立性最高的，Model不应该拥有对View的引用，而且Model也不需要保存对Presenter的引用，对于Presenter而已，Model只需要提供接口，等着Presenter来调用时返回相应数据即可，这和经典MVC模式中是非常不同的，在MVC中Model在数据发送变化后，是需要发送广播来告之View去更新用户界面的，而在MVP中，Model是不应该去通知View，而是通知Presenter来间接的更新View的。\n\n而Presenter和Model的关系也应该是基于接口来通信，这样才能把Model和Presenter的耦合度也降到最低，那么在需要改变Model内部实现，甚至彻底替换Model的时候，Presenter则是无需随之改变的。这样做带来的另一个好处就是你可以通过Mock一个Model来对Presenter以及View做模拟测试了，从而提高了可测试性。\n\n那么View和Presenter的关系呢？View是需要拥有对Presenter的引用，但仅仅是为了将用户的操作和事件立即传递给Presenter，为了让View和Presenter耦合较低，View也只应该通过接口与Presenter通信，从而保证View是完全被动的，一方面它由用户的操作触发来和Presenter通信，另一方面它完全受Presenter控制，唯一需要做的事情就是如何展示数据。\n\n简要总结三者之间的关系是：View和Model之间没有联系，View通过接口向Presenter来传递用户操作，Model不主动和Presenter联系，被动的等着Presenter来调用其接口，Presenter通过接口和View/Model来联系。\n\n谷歌官方给的![MVP例子]https://github.com/googlesamples/android-architecture\n\n为了便于理解，这里提供一些伪代码加注释演示一下如何实现MVP模式：\n\nView\n```\ninterface IUserView {\n\n  void setPresenter(presenter);\n  void showUsers(users);\n  void showDeleteUserComplete();\n  void showDeleteUserError();\n\n}\n\nclass UserView implements IUserView {\n\n  UserPresenter presenter;\n\n  // 保持对Presenter的引用，用于路由用户操作\n  void setPresenter(presenter) {\n      this.presenter = presenter;\n  }\n\n  // 将Presenter传递来的数据展示出来\n  void showUsers(users) {\n      draw(users);\n  }\n\n  // Model操作数据成功后，通过Presenter来告之View需要更新用户界面\n  void showDeleteUserComplete() {\n      alert(\"Delete User Complete\");\n  }\n\n  // Model操作数据失败后，也是通过Presenter来告之View需要更新用户界面\n  void showDeleteUserError() {\n      alert(\"Delete User Fail\");\n  }\n\n  // 当用户点击某个按钮时，将用户操作路由给presenter，由presenter去处理\n  void onDeleteButtonClicked(event) {\n      presenter.deleteUser(event);\n  }\n\n}\n```\nModel\n```\ninterface IUserModel {\n\n  List<User> getUsers();\n  boolean deleteUserById();\n\n}\n\nclass UserModel implements IUserModel {\n\n  // 在数据库里查找数据，并将数据返回给presenter\n  List<User> getUsers() {\n       return getUsersInDatabase(id);\n  }\n\n  // 在数据库里删除数据，并将结果返回给presenter\n  User deleteUserById(id) {\n      return deleteUserByIdInDatabase(id);\n  }\n\n}\n```\nPresenter\n```\ninterface IUserUserPresenter {\n\n  void deleteUser(event);\n\n}\n\nclass UserUserPresenter implements IUserPresenter {\n\n  // 保持对View的引用\n  IUserView view;\n  // 保持对Model的引用\n  IUserModel model;\n\n  UserUserPresenter(IUserView view, IUserModel model) {\n    this.view = view;    \n    this.model = model;\n\n    this.view.setPresenter(this);   \n  }\n\n  void start() {\n    // 从Model中取出数据\n    List<User> users = model.getUsers();\n    // 将数据发送给View，让其展示到用户界面\n    view.showUsers(users);\n  }\n\n  void deleteUser(event) {\n    // View将用户操作路由过来，由Presenter来处理\n    long uid = whichUserNeedToDeleteBy(event);\n    // 将用户操作翻译成命令或消息传递给model，以改变数据\n    boolean success = model.deleteUserById(uid);\n    // 将Model操作数据后的结果通知View来改变用户界面\n    if (success) {\n          view.onDeleteUserSuccess();\n    } else {\n        view.onDeleteUserFail();  \n    }\n  }\n}\n```\n\n二.MVVP\nMVVM是由三个核心部分，每个都有它自己的不同而独立的作用：\n\nModel - 包含业务和验证逻辑的数据模型\nView -- 定义结构,布局和View 在屏幕上的显示\nViewModel - 充当 View 和 ViewModel 之间的连接, 处理所有视图逻辑.\n","slug":"MVP与MVVM","published":1,"updated":"2017-03-11T02:47:54.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dlz000hvj2z8psxmhl3","content":"<p>一.MVP<br>首先来看MVP各自负责什么：</p>\n<p>Model，负责定义数据（解决什么是数据）<br>Presenter, 负责在Model和View之间，从model里取出数据，格式化后在View上展示（解决如何把数据和用户界面放在一起）<br>View，用于展示数据（解决如何展示数据）</p>\n<p>很显然Presenter作为中间者，它是同时拥有View和Model的引用的.<br>而Model和View必须是完全隔离的，不允许两者之间互相通信。<br><a id=\"more\"></a><br>Model在三者中是独立性最高的，Model不应该拥有对View的引用，而且Model也不需要保存对Presenter的引用，对于Presenter而已，Model只需要提供接口，等着Presenter来调用时返回相应数据即可，这和经典MVC模式中是非常不同的，在MVC中Model在数据发送变化后，是需要发送广播来告之View去更新用户界面的，而在MVP中，Model是不应该去通知View，而是通知Presenter来间接的更新View的。</p>\n<p>而Presenter和Model的关系也应该是基于接口来通信，这样才能把Model和Presenter的耦合度也降到最低，那么在需要改变Model内部实现，甚至彻底替换Model的时候，Presenter则是无需随之改变的。这样做带来的另一个好处就是你可以通过Mock一个Model来对Presenter以及View做模拟测试了，从而提高了可测试性。</p>\n<p>那么View和Presenter的关系呢？View是需要拥有对Presenter的引用，但仅仅是为了将用户的操作和事件立即传递给Presenter，为了让View和Presenter耦合较低，View也只应该通过接口与Presenter通信，从而保证View是完全被动的，一方面它由用户的操作触发来和Presenter通信，另一方面它完全受Presenter控制，唯一需要做的事情就是如何展示数据。</p>\n<p>简要总结三者之间的关系是：View和Model之间没有联系，View通过接口向Presenter来传递用户操作，Model不主动和Presenter联系，被动的等着Presenter来调用其接口，Presenter通过接口和View/Model来联系。</p>\n<p>谷歌官方给的![MVP例子]<a href=\"https://github.com/googlesamples/android-architecture\" target=\"_blank\" rel=\"external\">https://github.com/googlesamples/android-architecture</a></p>\n<p>为了便于理解，这里提供一些伪代码加注释演示一下如何实现MVP模式：</p>\n<p>View<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface IUserView &#123;</div><div class=\"line\"></div><div class=\"line\">  void setPresenter(presenter);</div><div class=\"line\">  void showUsers(users);</div><div class=\"line\">  void showDeleteUserComplete();</div><div class=\"line\">  void showDeleteUserError();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class UserView implements IUserView &#123;</div><div class=\"line\"></div><div class=\"line\">  UserPresenter presenter;</div><div class=\"line\"></div><div class=\"line\">  // 保持对Presenter的引用，用于路由用户操作</div><div class=\"line\">  void setPresenter(presenter) &#123;</div><div class=\"line\">      this.presenter = presenter;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 将Presenter传递来的数据展示出来</div><div class=\"line\">  void showUsers(users) &#123;</div><div class=\"line\">      draw(users);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Model操作数据成功后，通过Presenter来告之View需要更新用户界面</div><div class=\"line\">  void showDeleteUserComplete() &#123;</div><div class=\"line\">      alert(&quot;Delete User Complete&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Model操作数据失败后，也是通过Presenter来告之View需要更新用户界面</div><div class=\"line\">  void showDeleteUserError() &#123;</div><div class=\"line\">      alert(&quot;Delete User Fail&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 当用户点击某个按钮时，将用户操作路由给presenter，由presenter去处理</div><div class=\"line\">  void onDeleteButtonClicked(event) &#123;</div><div class=\"line\">      presenter.deleteUser(event);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Model<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface IUserModel &#123;</div><div class=\"line\"></div><div class=\"line\">  List&lt;User&gt; getUsers();</div><div class=\"line\">  boolean deleteUserById();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class UserModel implements IUserModel &#123;</div><div class=\"line\"></div><div class=\"line\">  // 在数据库里查找数据，并将数据返回给presenter</div><div class=\"line\">  List&lt;User&gt; getUsers() &#123;</div><div class=\"line\">       return getUsersInDatabase(id);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 在数据库里删除数据，并将结果返回给presenter</div><div class=\"line\">  User deleteUserById(id) &#123;</div><div class=\"line\">      return deleteUserByIdInDatabase(id);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Presenter<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface IUserUserPresenter &#123;</div><div class=\"line\"></div><div class=\"line\">  void deleteUser(event);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class UserUserPresenter implements IUserPresenter &#123;</div><div class=\"line\"></div><div class=\"line\">  // 保持对View的引用</div><div class=\"line\">  IUserView view;</div><div class=\"line\">  // 保持对Model的引用</div><div class=\"line\">  IUserModel model;</div><div class=\"line\"></div><div class=\"line\">  UserUserPresenter(IUserView view, IUserModel model) &#123;</div><div class=\"line\">    this.view = view;    </div><div class=\"line\">    this.model = model;</div><div class=\"line\"></div><div class=\"line\">    this.view.setPresenter(this);   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  void start() &#123;</div><div class=\"line\">    // 从Model中取出数据</div><div class=\"line\">    List&lt;User&gt; users = model.getUsers();</div><div class=\"line\">    // 将数据发送给View，让其展示到用户界面</div><div class=\"line\">    view.showUsers(users);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  void deleteUser(event) &#123;</div><div class=\"line\">    // View将用户操作路由过来，由Presenter来处理</div><div class=\"line\">    long uid = whichUserNeedToDeleteBy(event);</div><div class=\"line\">    // 将用户操作翻译成命令或消息传递给model，以改变数据</div><div class=\"line\">    boolean success = model.deleteUserById(uid);</div><div class=\"line\">    // 将Model操作数据后的结果通知View来改变用户界面</div><div class=\"line\">    if (success) &#123;</div><div class=\"line\">          view.onDeleteUserSuccess();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        view.onDeleteUserFail();  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>二.MVVP<br>MVVM是由三个核心部分，每个都有它自己的不同而独立的作用：</p>\n<p>Model - 包含业务和验证逻辑的数据模型<br>View – 定义结构,布局和View 在屏幕上的显示<br>ViewModel - 充当 View 和 ViewModel 之间的连接, 处理所有视图逻辑.</p>\n","excerpt":"<p>一.MVP<br>首先来看MVP各自负责什么：</p>\n<p>Model，负责定义数据（解决什么是数据）<br>Presenter, 负责在Model和View之间，从model里取出数据，格式化后在View上展示（解决如何把数据和用户界面放在一起）<br>View，用于展示数据（解决如何展示数据）</p>\n<p>很显然Presenter作为中间者，它是同时拥有View和Model的引用的.<br>而Model和View必须是完全隔离的，不允许两者之间互相通信。<br>","more":"<br>Model在三者中是独立性最高的，Model不应该拥有对View的引用，而且Model也不需要保存对Presenter的引用，对于Presenter而已，Model只需要提供接口，等着Presenter来调用时返回相应数据即可，这和经典MVC模式中是非常不同的，在MVC中Model在数据发送变化后，是需要发送广播来告之View去更新用户界面的，而在MVP中，Model是不应该去通知View，而是通知Presenter来间接的更新View的。</p>\n<p>而Presenter和Model的关系也应该是基于接口来通信，这样才能把Model和Presenter的耦合度也降到最低，那么在需要改变Model内部实现，甚至彻底替换Model的时候，Presenter则是无需随之改变的。这样做带来的另一个好处就是你可以通过Mock一个Model来对Presenter以及View做模拟测试了，从而提高了可测试性。</p>\n<p>那么View和Presenter的关系呢？View是需要拥有对Presenter的引用，但仅仅是为了将用户的操作和事件立即传递给Presenter，为了让View和Presenter耦合较低，View也只应该通过接口与Presenter通信，从而保证View是完全被动的，一方面它由用户的操作触发来和Presenter通信，另一方面它完全受Presenter控制，唯一需要做的事情就是如何展示数据。</p>\n<p>简要总结三者之间的关系是：View和Model之间没有联系，View通过接口向Presenter来传递用户操作，Model不主动和Presenter联系，被动的等着Presenter来调用其接口，Presenter通过接口和View/Model来联系。</p>\n<p>谷歌官方给的![MVP例子]<a href=\"https://github.com/googlesamples/android-architecture\">https://github.com/googlesamples/android-architecture</a></p>\n<p>为了便于理解，这里提供一些伪代码加注释演示一下如何实现MVP模式：</p>\n<p>View<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface IUserView &#123;</div><div class=\"line\"></div><div class=\"line\">  void setPresenter(presenter);</div><div class=\"line\">  void showUsers(users);</div><div class=\"line\">  void showDeleteUserComplete();</div><div class=\"line\">  void showDeleteUserError();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class UserView implements IUserView &#123;</div><div class=\"line\"></div><div class=\"line\">  UserPresenter presenter;</div><div class=\"line\"></div><div class=\"line\">  // 保持对Presenter的引用，用于路由用户操作</div><div class=\"line\">  void setPresenter(presenter) &#123;</div><div class=\"line\">      this.presenter = presenter;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 将Presenter传递来的数据展示出来</div><div class=\"line\">  void showUsers(users) &#123;</div><div class=\"line\">      draw(users);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Model操作数据成功后，通过Presenter来告之View需要更新用户界面</div><div class=\"line\">  void showDeleteUserComplete() &#123;</div><div class=\"line\">      alert(&quot;Delete User Complete&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Model操作数据失败后，也是通过Presenter来告之View需要更新用户界面</div><div class=\"line\">  void showDeleteUserError() &#123;</div><div class=\"line\">      alert(&quot;Delete User Fail&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 当用户点击某个按钮时，将用户操作路由给presenter，由presenter去处理</div><div class=\"line\">  void onDeleteButtonClicked(event) &#123;</div><div class=\"line\">      presenter.deleteUser(event);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Model<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface IUserModel &#123;</div><div class=\"line\"></div><div class=\"line\">  List&lt;User&gt; getUsers();</div><div class=\"line\">  boolean deleteUserById();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class UserModel implements IUserModel &#123;</div><div class=\"line\"></div><div class=\"line\">  // 在数据库里查找数据，并将数据返回给presenter</div><div class=\"line\">  List&lt;User&gt; getUsers() &#123;</div><div class=\"line\">       return getUsersInDatabase(id);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // 在数据库里删除数据，并将结果返回给presenter</div><div class=\"line\">  User deleteUserById(id) &#123;</div><div class=\"line\">      return deleteUserByIdInDatabase(id);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Presenter<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface IUserUserPresenter &#123;</div><div class=\"line\"></div><div class=\"line\">  void deleteUser(event);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">class UserUserPresenter implements IUserPresenter &#123;</div><div class=\"line\"></div><div class=\"line\">  // 保持对View的引用</div><div class=\"line\">  IUserView view;</div><div class=\"line\">  // 保持对Model的引用</div><div class=\"line\">  IUserModel model;</div><div class=\"line\"></div><div class=\"line\">  UserUserPresenter(IUserView view, IUserModel model) &#123;</div><div class=\"line\">    this.view = view;    </div><div class=\"line\">    this.model = model;</div><div class=\"line\"></div><div class=\"line\">    this.view.setPresenter(this);   </div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  void start() &#123;</div><div class=\"line\">    // 从Model中取出数据</div><div class=\"line\">    List&lt;User&gt; users = model.getUsers();</div><div class=\"line\">    // 将数据发送给View，让其展示到用户界面</div><div class=\"line\">    view.showUsers(users);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  void deleteUser(event) &#123;</div><div class=\"line\">    // View将用户操作路由过来，由Presenter来处理</div><div class=\"line\">    long uid = whichUserNeedToDeleteBy(event);</div><div class=\"line\">    // 将用户操作翻译成命令或消息传递给model，以改变数据</div><div class=\"line\">    boolean success = model.deleteUserById(uid);</div><div class=\"line\">    // 将Model操作数据后的结果通知View来改变用户界面</div><div class=\"line\">    if (success) &#123;</div><div class=\"line\">          view.onDeleteUserSuccess();</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        view.onDeleteUserFail();  </div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>二.MVVP<br>MVVM是由三个核心部分，每个都有它自己的不同而独立的作用：</p>\n<p>Model - 包含业务和验证逻辑的数据模型<br>View – 定义结构,布局和View 在屏幕上的显示<br>ViewModel - 充当 View 和 ViewModel 之间的连接, 处理所有视图逻辑.</p>"},{"title":"Markdown的初级使用","date":"2016-02-16T12:03:33.000Z","_content":"Markdown的初级使用\n```\n1.添加代码段\n  ` : 单行代码(分别放在首尾)\n  ``` : 多行代码，置于这段代码的首行和末行。\n\n2.添加链接\n  使用 [显示文本](链接地址)\n  如 : [Blog](https://andwong.github.io)\n\n4.添加图片\n  使用 ![](图片链接地址)\n  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)\n\n5.引用某段话\n  使用 : >\n  ```\n\n原文链接：http://www.jianshu.com/p/q81RER\n","source":"_posts/Markdown的初级使用.md","raw":"---\ntitle: Markdown的初级使用\ndate: 2016-02-16 20:03:33\ntags: tools\n---\nMarkdown的初级使用\n```\n1.添加代码段\n  ` : 单行代码(分别放在首尾)\n  ``` : 多行代码，置于这段代码的首行和末行。\n\n2.添加链接\n  使用 [显示文本](链接地址)\n  如 : [Blog](https://andwong.github.io)\n\n4.添加图片\n  使用 ![](图片链接地址)\n  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)\n\n5.引用某段话\n  使用 : >\n  ```\n\n原文链接：http://www.jianshu.com/p/q81RER\n","slug":"Markdown的初级使用","published":1,"updated":"2017-02-17T12:15:29.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dm5000kvj2zxnjeues8","content":"<p>Markdown的初级使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.添加代码段</div><div class=\"line\">  ` : 单行代码(分别放在首尾)</div><div class=\"line\">  ``` : 多行代码，置于这段代码的首行和末行。</div><div class=\"line\"></div><div class=\"line\">2.添加链接</div><div class=\"line\">  使用 [显示文本](链接地址)</div><div class=\"line\">  如 : [Blog](https://andwong.github.io)</div><div class=\"line\"></div><div class=\"line\">4.添加图片</div><div class=\"line\">  使用 ![](图片链接地址)</div><div class=\"line\">  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)</div><div class=\"line\"></div><div class=\"line\">5.引用某段话</div><div class=\"line\">  使用 : &gt;</div></pre></td></tr></table></figure></p>\n<p>原文链接：<a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/q81RER</a></p>\n","excerpt":"","more":"<p>Markdown的初级使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.添加代码段</div><div class=\"line\">  ` : 单行代码(分别放在首尾)</div><div class=\"line\">  ``` : 多行代码，置于这段代码的首行和末行。</div><div class=\"line\"></div><div class=\"line\">2.添加链接</div><div class=\"line\">  使用 [显示文本](链接地址)</div><div class=\"line\">  如 : [Blog](https://andwong.github.io)</div><div class=\"line\"></div><div class=\"line\">4.添加图片</div><div class=\"line\">  使用 ![](图片链接地址)</div><div class=\"line\">  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)</div><div class=\"line\"></div><div class=\"line\">5.引用某段话</div><div class=\"line\">  使用 : &gt;</div></pre></td></tr></table></figure></p>\n<p>原文链接：<a href=\"http://www.jianshu.com/p/q81RER\">http://www.jianshu.com/p/q81RER</a></p>\n"},{"title":"WebView 获取网页源码","date":"2016-02-10T11:59:27.000Z","_content":"Android在WebView中获取网页源码  \n\n在Api-19以上获取源码的方式有修改，如下：\n```\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    mWebView.evaluateJavascript(\n            \"(function() {return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');})();\",\n              new ValueCallback<String>() {\n                @Override\n                public void onReceiveValue(String html) {\n                    Log.d(\"HTML\", \"whd >>html:\" + html);\n                }\n            });\n  }\n```\n<!--more-->\n在Api-19以下获取源码的方式，如下：          \n1. 使能javascript：\n```\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n2. 编写本地接口\n```\nfinal class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(\"HTML\", html);\n    }\n}\n```\n3. 向网页暴露本地接口\n```\nwebView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n```\n4. 编写自己的WebViewClient，并在onPageFinished中提取网页源码。\n```\nfinal class MyWebViewClient extends WebViewClient{   \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n        view.loadUrl(url);    \n        return true;    \n    }   \n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        Log.d(\"WebView\",\"onPageStarted\"); window.imagelistner.getImage(this.src)\n        super.onPageStarted(view, url, favicon);\n    }     \n    public void onPageFinished(WebView view, String url) {\n        Log.d(\"WebView\",\"onPageFinished \");\n        view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n        super.onPageFinished(view, url);\n    }\n}\n```\n关键之处在于：\n```\nview.loadUrl(\"javascript:window.local_obj.showSource('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n```\n运行，可以看到在showSource(String html)中打印了网页源码。\n","source":"_posts/WebView-获取网页源码.md","raw":"---\ntitle: WebView 获取网页源码\ndate: 2016-02-10 19:59:27\ntags: Android\n---\nAndroid在WebView中获取网页源码  \n\n在Api-19以上获取源码的方式有修改，如下：\n```\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    mWebView.evaluateJavascript(\n            \"(function() {return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');})();\",\n              new ValueCallback<String>() {\n                @Override\n                public void onReceiveValue(String html) {\n                    Log.d(\"HTML\", \"whd >>html:\" + html);\n                }\n            });\n  }\n```\n<!--more-->\n在Api-19以下获取源码的方式，如下：          \n1. 使能javascript：\n```\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n2. 编写本地接口\n```\nfinal class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(\"HTML\", html);\n    }\n}\n```\n3. 向网页暴露本地接口\n```\nwebView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n```\n4. 编写自己的WebViewClient，并在onPageFinished中提取网页源码。\n```\nfinal class MyWebViewClient extends WebViewClient{   \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n        view.loadUrl(url);    \n        return true;    \n    }   \n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        Log.d(\"WebView\",\"onPageStarted\"); window.imagelistner.getImage(this.src)\n        super.onPageStarted(view, url, favicon);\n    }     \n    public void onPageFinished(WebView view, String url) {\n        Log.d(\"WebView\",\"onPageFinished \");\n        view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n        super.onPageFinished(view, url);\n    }\n}\n```\n关键之处在于：\n```\nview.loadUrl(\"javascript:window.local_obj.showSource('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n```\n运行，可以看到在showSource(String html)中打印了网页源码。\n","slug":"WebView-获取网页源码","published":1,"updated":"2017-03-11T02:48:00.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dma000mvj2zgywyy11p","content":"<p>Android在WebView中获取网页源码  </p>\n<p>在Api-19以上获取源码的方式有修改，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">  mWebView.evaluateJavascript(</div><div class=\"line\">          &quot;(function() &#123;return (&apos;&lt;html&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/html&gt;&apos;);&#125;)();&quot;,</div><div class=\"line\">            new ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">              @Override</div><div class=\"line\">              public void onReceiveValue(String html) &#123;</div><div class=\"line\">                  Log.d(&quot;HTML&quot;, &quot;whd &gt;&gt;html:&quot; + html);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>在Api-19以下获取源码的方式，如下：          </p>\n<ol>\n<li><p>使能javascript：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(true);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class InJavaScriptLocalObj &#123;</div><div class=\"line\">    public void showSource(String html) &#123;</div><div class=\"line\">        Log.d(&quot;HTML&quot;, html);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>向网页暴露本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(new InJavaScriptLocalObj(), &quot;local_obj&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写自己的WebViewClient，并在onPageFinished中提取网页源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class MyWebViewClient extends WebViewClient&#123;   </div><div class=\"line\">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;    </div><div class=\"line\">        view.loadUrl(url);    </div><div class=\"line\">        return true;    </div><div class=\"line\">    &#125;   </div><div class=\"line\">    public void onPageStarted(WebView view, String url, Bitmap favicon) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;); window.imagelistner.getImage(this.src)</div><div class=\"line\">        super.onPageStarted(view, url, favicon);</div><div class=\"line\">    &#125;     </div><div class=\"line\">    public void onPageFinished(WebView view, String url) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);</div><div class=\"line\">        view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +</div><div class=\"line\">                &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div><div class=\"line\">        super.onPageFinished(view, url);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>关键之处在于：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div></pre></td></tr></table></figure></p>\n<p>运行，可以看到在showSource(String html)中打印了网页源码。</p>\n","excerpt":"<p>Android在WebView中获取网页源码  </p>\n<p>在Api-19以上获取源码的方式有修改，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">  mWebView.evaluateJavascript(</div><div class=\"line\">          &quot;(function() &#123;return (&apos;&lt;html&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/html&gt;&apos;);&#125;)();&quot;,</div><div class=\"line\">            new ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">              @Override</div><div class=\"line\">              public void onReceiveValue(String html) &#123;</div><div class=\"line\">                  Log.d(&quot;HTML&quot;, &quot;whd &gt;&gt;html:&quot; + html);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>在Api-19以下获取源码的方式，如下：          </p>\n<ol>\n<li><p>使能javascript：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(true);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class InJavaScriptLocalObj &#123;</div><div class=\"line\">    public void showSource(String html) &#123;</div><div class=\"line\">        Log.d(&quot;HTML&quot;, html);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>向网页暴露本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(new InJavaScriptLocalObj(), &quot;local_obj&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写自己的WebViewClient，并在onPageFinished中提取网页源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class MyWebViewClient extends WebViewClient&#123;   </div><div class=\"line\">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;    </div><div class=\"line\">        view.loadUrl(url);    </div><div class=\"line\">        return true;    </div><div class=\"line\">    &#125;   </div><div class=\"line\">    public void onPageStarted(WebView view, String url, Bitmap favicon) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;); window.imagelistner.getImage(this.src)</div><div class=\"line\">        super.onPageStarted(view, url, favicon);</div><div class=\"line\">    &#125;     </div><div class=\"line\">    public void onPageFinished(WebView view, String url) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);</div><div class=\"line\">        view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +</div><div class=\"line\">                &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div><div class=\"line\">        super.onPageFinished(view, url);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>关键之处在于：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div></pre></td></tr></table></figure></p>\n<p>运行，可以看到在showSource(String html)中打印了网页源码。</p>"},{"title":"WiFi Portal检测","date":"2016-04-11T13:35:53.000Z","_content":"WiFi连接上一个开放热点，如何判断是否需要登录认证？\n\n首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。\n这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。\n\n对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。\n<!--more-->\n代码如下：\n```\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport android.os.AsyncTask;\n/**\n * 检测wifi是否需要登陆\n * 使用方式：\n * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() {\n *  @Override\n *  public void needLogin(boolean needLogin) {\n *     if (needLogin) {\n *          wifi 需要登陆\n *     }\n *  }\n * });\n **/\n public class NetNeedLoginCheckUtil extends AsyncTask<Integer, Integer, Boolean>{\n    NeedLoginCallBack callBack;\n    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) {\n        super();\n        this.callBack = callBack;\n    }    \n    @Override\n    protected Boolean doInBackground(Integer... params) {\n        return isWifiSetPortal();\n    }    \n    @Override\n    protected void onPostExecute(Boolean result) {\n        if (callBack != null) {\n            callBack.needLogin(result);\n        }\n    }\n    private boolean isWifiSetPortal() {  \n        final String mWalledGardenUrl = \"http://connect.rom.miui.com/generate_204\";  \n        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  \n        HttpURLConnection urlConnection = null;  \n        try {  \n            URL url = new URL(mWalledGardenUrl);  \n            urlConnection = (HttpURLConnection) url.openConnection();  \n            urlConnection.setInstanceFollowRedirects(false);  \n            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setUseCaches(false);  \n            urlConnection.getInputStream();  \n            return urlConnection.getResponseCode() != 204;  \n        } catch (IOException e) {  \n            return false;  \n        } finally {  \n            if (urlConnection != null) {  \n                urlConnection.disconnect();  \n            }  \n        }  \n    }  \n\n    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) {\n        new NetNeedLoginCheckUtil(callBack).execute();\n    }    \n\n    public interface NeedLoginCallBack{\n       void needLogin(boolean needLogin);\n    }\n}\n```\n\n文／李科吐温（简书作者）\n原文链接：http://www.jianshu.com/p/3187c677bca3\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n","source":"_posts/WiFi-Portal检测.md","raw":"---\ntitle: WiFi Portal检测\ndate: 2016-04-11 21:35:53\ntags: Android\n---\nWiFi连接上一个开放热点，如何判断是否需要登录认证？\n\n首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。\n这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。\n\n对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。\n<!--more-->\n代码如下：\n```\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport android.os.AsyncTask;\n/**\n * 检测wifi是否需要登陆\n * 使用方式：\n * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() {\n *  @Override\n *  public void needLogin(boolean needLogin) {\n *     if (needLogin) {\n *          wifi 需要登陆\n *     }\n *  }\n * });\n **/\n public class NetNeedLoginCheckUtil extends AsyncTask<Integer, Integer, Boolean>{\n    NeedLoginCallBack callBack;\n    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) {\n        super();\n        this.callBack = callBack;\n    }    \n    @Override\n    protected Boolean doInBackground(Integer... params) {\n        return isWifiSetPortal();\n    }    \n    @Override\n    protected void onPostExecute(Boolean result) {\n        if (callBack != null) {\n            callBack.needLogin(result);\n        }\n    }\n    private boolean isWifiSetPortal() {  \n        final String mWalledGardenUrl = \"http://connect.rom.miui.com/generate_204\";  \n        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  \n        HttpURLConnection urlConnection = null;  \n        try {  \n            URL url = new URL(mWalledGardenUrl);  \n            urlConnection = (HttpURLConnection) url.openConnection();  \n            urlConnection.setInstanceFollowRedirects(false);  \n            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setUseCaches(false);  \n            urlConnection.getInputStream();  \n            return urlConnection.getResponseCode() != 204;  \n        } catch (IOException e) {  \n            return false;  \n        } finally {  \n            if (urlConnection != null) {  \n                urlConnection.disconnect();  \n            }  \n        }  \n    }  \n\n    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) {\n        new NetNeedLoginCheckUtil(callBack).execute();\n    }    \n\n    public interface NeedLoginCallBack{\n       void needLogin(boolean needLogin);\n    }\n}\n```\n\n文／李科吐温（简书作者）\n原文链接：http://www.jianshu.com/p/3187c677bca3\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n","slug":"WiFi-Portal检测","published":1,"updated":"2017-03-11T02:48:04.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dmd000ovj2z6tobsoof","content":"<p>WiFi连接上一个开放热点，如何判断是否需要登录认证？</p>\n<p>首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。<br>这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。</p>\n<p>对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。<br><a id=\"more\"></a><br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.HttpURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import android.os.AsyncTask;</div><div class=\"line\">/**</div><div class=\"line\"> * 检测wifi是否需要登陆</div><div class=\"line\"> * 使用方式：</div><div class=\"line\"> * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() &#123;</div><div class=\"line\"> *  @Override</div><div class=\"line\"> *  public void needLogin(boolean needLogin) &#123;</div><div class=\"line\"> *     if (needLogin) &#123;</div><div class=\"line\"> *          wifi 需要登陆</div><div class=\"line\"> *     &#125;</div><div class=\"line\"> *  &#125;</div><div class=\"line\"> * &#125;);</div><div class=\"line\"> **/</div><div class=\"line\"> public class NetNeedLoginCheckUtil extends AsyncTask&lt;Integer, Integer, Boolean&gt;&#123;</div><div class=\"line\">    NeedLoginCallBack callBack;</div><div class=\"line\">    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.callBack = callBack;</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected Boolean doInBackground(Integer... params) &#123;</div><div class=\"line\">        return isWifiSetPortal();</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onPostExecute(Boolean result) &#123;</div><div class=\"line\">        if (callBack != null) &#123;</div><div class=\"line\">            callBack.needLogin(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean isWifiSetPortal() &#123;  </div><div class=\"line\">        final String mWalledGardenUrl = &quot;http://connect.rom.miui.com/generate_204&quot;;  </div><div class=\"line\">        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  </div><div class=\"line\">        HttpURLConnection urlConnection = null;  </div><div class=\"line\">        try &#123;  </div><div class=\"line\">            URL url = new URL(mWalledGardenUrl);  </div><div class=\"line\">            urlConnection = (HttpURLConnection) url.openConnection();  </div><div class=\"line\">            urlConnection.setInstanceFollowRedirects(false);  </div><div class=\"line\">            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setUseCaches(false);  </div><div class=\"line\">            urlConnection.getInputStream();  </div><div class=\"line\">            return urlConnection.getResponseCode() != 204;  </div><div class=\"line\">        &#125; catch (IOException e) &#123;  </div><div class=\"line\">            return false;  </div><div class=\"line\">        &#125; finally &#123;  </div><div class=\"line\">            if (urlConnection != null) &#123;  </div><div class=\"line\">                urlConnection.disconnect();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        new NetNeedLoginCheckUtil(callBack).execute();</div><div class=\"line\">    &#125;    </div><div class=\"line\"></div><div class=\"line\">    public interface NeedLoginCallBack&#123;</div><div class=\"line\">       void needLogin(boolean needLogin);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>文／李科吐温（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/3187c677bca3\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/3187c677bca3</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","excerpt":"<p>WiFi连接上一个开放热点，如何判断是否需要登录认证？</p>\n<p>首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。<br>这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。</p>\n<p>对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。<br>","more":"<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.HttpURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import android.os.AsyncTask;</div><div class=\"line\">/**</div><div class=\"line\"> * 检测wifi是否需要登陆</div><div class=\"line\"> * 使用方式：</div><div class=\"line\"> * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() &#123;</div><div class=\"line\"> *  @Override</div><div class=\"line\"> *  public void needLogin(boolean needLogin) &#123;</div><div class=\"line\"> *     if (needLogin) &#123;</div><div class=\"line\"> *          wifi 需要登陆</div><div class=\"line\"> *     &#125;</div><div class=\"line\"> *  &#125;</div><div class=\"line\"> * &#125;);</div><div class=\"line\"> **/</div><div class=\"line\"> public class NetNeedLoginCheckUtil extends AsyncTask&lt;Integer, Integer, Boolean&gt;&#123;</div><div class=\"line\">    NeedLoginCallBack callBack;</div><div class=\"line\">    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.callBack = callBack;</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected Boolean doInBackground(Integer... params) &#123;</div><div class=\"line\">        return isWifiSetPortal();</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onPostExecute(Boolean result) &#123;</div><div class=\"line\">        if (callBack != null) &#123;</div><div class=\"line\">            callBack.needLogin(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean isWifiSetPortal() &#123;  </div><div class=\"line\">        final String mWalledGardenUrl = &quot;http://connect.rom.miui.com/generate_204&quot;;  </div><div class=\"line\">        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  </div><div class=\"line\">        HttpURLConnection urlConnection = null;  </div><div class=\"line\">        try &#123;  </div><div class=\"line\">            URL url = new URL(mWalledGardenUrl);  </div><div class=\"line\">            urlConnection = (HttpURLConnection) url.openConnection();  </div><div class=\"line\">            urlConnection.setInstanceFollowRedirects(false);  </div><div class=\"line\">            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setUseCaches(false);  </div><div class=\"line\">            urlConnection.getInputStream();  </div><div class=\"line\">            return urlConnection.getResponseCode() != 204;  </div><div class=\"line\">        &#125; catch (IOException e) &#123;  </div><div class=\"line\">            return false;  </div><div class=\"line\">        &#125; finally &#123;  </div><div class=\"line\">            if (urlConnection != null) &#123;  </div><div class=\"line\">                urlConnection.disconnect();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        new NetNeedLoginCheckUtil(callBack).execute();</div><div class=\"line\">    &#125;    </div><div class=\"line\"></div><div class=\"line\">    public interface NeedLoginCallBack&#123;</div><div class=\"line\">       void needLogin(boolean needLogin);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>文／李科吐温（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/3187c677bca3\">http://www.jianshu.com/p/3187c677bca3</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>"},{"title":"Ubuntu下使用Hexo创建Gitbub博客","date":"2016-01-05T06:06:55.000Z","_content":"1.环境配置\n```\n安装 node.js : $sudo apt install nodejs-legacy\n安装 npm ： $sudo apt install npm\n安装 git : $sudo apt-get install git\n安装 hexo ： $sudo npm install hexo -g\n```\n<!--more-->\n2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）\n\n3.初始化博客，命令行输入下列命令：\n```\n$git init\n$git remote add origin \"git url\"\n$git pull origin master\n\n$hexo init\n$hexo s -g #预览\n```\n\n编辑根目录下的_config.yml 末尾添加下列代码:\n```\n  deploy:\n  type: git\n  repository: https://github.com/AndWong/AndWong.github.io.git\n  branch: master\n  ```\n```\n$npm install hexo-deployer-git --save\n$hexo clean\n$hexo d -g #发布\n```\n\n4.访问 https://andwong.github.io/ #查看\n\n「疑问 : 换台电脑后如何发布博客?」\n上述步骤执行完后master主支就有相应的内容,\n此时新建一个分支blog用于存放博客内容,\n新设备只需pull blog分支修改博客并push就行.\n如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g\n\n————–分割线————\n在_config.yml中修改:\ntitle: Wong Blog #修改页面标题\nauthor: Wong #修改作者\ntheme: hexo-theme-aiki #修改主题样式\n","source":"_posts/gitbub-blog.md","raw":"---\ntitle: Ubuntu下使用Hexo创建Gitbub博客\ndate: 2016-01-05 14:06:55\ntags: github\n---\n1.环境配置\n```\n安装 node.js : $sudo apt install nodejs-legacy\n安装 npm ： $sudo apt install npm\n安装 git : $sudo apt-get install git\n安装 hexo ： $sudo npm install hexo -g\n```\n<!--more-->\n2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）\n\n3.初始化博客，命令行输入下列命令：\n```\n$git init\n$git remote add origin \"git url\"\n$git pull origin master\n\n$hexo init\n$hexo s -g #预览\n```\n\n编辑根目录下的_config.yml 末尾添加下列代码:\n```\n  deploy:\n  type: git\n  repository: https://github.com/AndWong/AndWong.github.io.git\n  branch: master\n  ```\n```\n$npm install hexo-deployer-git --save\n$hexo clean\n$hexo d -g #发布\n```\n\n4.访问 https://andwong.github.io/ #查看\n\n「疑问 : 换台电脑后如何发布博客?」\n上述步骤执行完后master主支就有相应的内容,\n此时新建一个分支blog用于存放博客内容,\n新设备只需pull blog分支修改博客并push就行.\n如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g\n\n————–分割线————\n在_config.yml中修改:\ntitle: Wong Blog #修改页面标题\nauthor: Wong #修改作者\ntheme: hexo-theme-aiki #修改主题样式\n","slug":"gitbub-blog","published":1,"updated":"2017-03-11T02:47:41.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dmk000rvj2zckmswm15","content":"<p>1.环境配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 node.js : $sudo apt install nodejs-legacy</div><div class=\"line\">安装 npm ： $sudo apt install npm</div><div class=\"line\">安装 git : $sudo apt-get install git</div><div class=\"line\">安装 hexo ： $sudo npm install hexo -g</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）</p>\n<p>3.初始化博客，命令行输入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git init</div><div class=\"line\">$git remote add origin &quot;git url&quot;</div><div class=\"line\">$git pull origin master</div><div class=\"line\"></div><div class=\"line\">$hexo init</div><div class=\"line\">$hexo s -g #预览</div></pre></td></tr></table></figure></p>\n<p>编辑根目录下的_config.yml 末尾添加下列代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">type: git</div><div class=\"line\">repository: https://github.com/AndWong/AndWong.github.io.git</div><div class=\"line\">branch: master</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm install hexo-deployer-git --save</div><div class=\"line\">$hexo clean</div><div class=\"line\">$hexo d -g #发布</div></pre></td></tr></table></figure>\n<p>4.访问 <a href=\"https://andwong.github.io/\" target=\"_blank\" rel=\"external\">https://andwong.github.io/</a> #查看</p>\n<p>「疑问 : 换台电脑后如何发布博客?」<br>上述步骤执行完后master主支就有相应的内容,<br>此时新建一个分支blog用于存放博客内容,<br>新设备只需pull blog分支修改博客并push就行.<br>如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g</p>\n<p>————–分割线————<br>在_config.yml中修改:<br>title: Wong Blog #修改页面标题<br>author: Wong #修改作者<br>theme: hexo-theme-aiki #修改主题样式</p>\n","excerpt":"<p>1.环境配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 node.js : $sudo apt install nodejs-legacy</div><div class=\"line\">安装 npm ： $sudo apt install npm</div><div class=\"line\">安装 git : $sudo apt-get install git</div><div class=\"line\">安装 hexo ： $sudo npm install hexo -g</div></pre></td></tr></table></figure></p>","more":"<p>2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）</p>\n<p>3.初始化博客，命令行输入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git init</div><div class=\"line\">$git remote add origin &quot;git url&quot;</div><div class=\"line\">$git pull origin master</div><div class=\"line\"></div><div class=\"line\">$hexo init</div><div class=\"line\">$hexo s -g #预览</div></pre></td></tr></table></figure></p>\n<p>编辑根目录下的_config.yml 末尾添加下列代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">type: git</div><div class=\"line\">repository: https://github.com/AndWong/AndWong.github.io.git</div><div class=\"line\">branch: master</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm install hexo-deployer-git --save</div><div class=\"line\">$hexo clean</div><div class=\"line\">$hexo d -g #发布</div></pre></td></tr></table></figure>\n<p>4.访问 <a href=\"https://andwong.github.io/\">https://andwong.github.io/</a> #查看</p>\n<p>「疑问 : 换台电脑后如何发布博客?」<br>上述步骤执行完后master主支就有相应的内容,<br>此时新建一个分支blog用于存放博客内容,<br>新设备只需pull blog分支修改博客并push就行.<br>如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g</p>\n<p>————–分割线————<br>在_config.yml中修改:<br>title: Wong Blog #修改页面标题<br>author: Wong #修改作者<br>theme: hexo-theme-aiki #修改主题样式</p>"},{"title":"rx+retrofit+okhttp网络框架","date":"2017-03-06T14:30:35.000Z","_content":"首先导入相关的包\ncompile 'com.google.code.gson:gson:2.5'\ncompile 'com.squareup.okhttp3:okhttp:3.3.1'\ncompile 'io.reactivex:rxjava:1.1.9'\ncompile 'io.reactivex:rxandroid:1.2.1'\ncompile 'com.squareup.retrofit2:retrofit:2.1.0'\ncompile 'com.squareup.retrofit2:converter-gson:2.1.0'\ncompile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'\ncompile 'com.squareup.retrofit2:retrofit-converters:2.1.0'\ncompile 'com.squareup.okhttp3:logging-interceptor:3.4.1'\n<!--more-->\n1.对应的数据模型,采用范型\n```\npublic class BaseModel<T> implements Serializable {\n    public int status;\n    public String message;\n    public T data;\n\n    public BaseModel() {\n    }\n\n    public BaseModel(int status, String message, T data) {\n        this.status = status;\n        this.message = message;\n        this.data = data;\n    }\n}\n```\n2.相关接口,和服务端的接口对应\n```\npublic interface DataApi {\n    @GET(URL)\n    Observable<BaseModel<T>> fetchData(@QueryMap Map<String, Object> params);\n}\n```\n3.网络配置,请求等基础类\n```\npublic class BaseService {\n    private static final String TAG = \"BaseService\";\n    protected static final String BASE_URL = \"baseurl\";\n    protected Retrofit retrofit;\n    protected OkHttpClient client;\n    private HttpLoggingInterceptor logging; //日志类\n\n    public BaseService() {\n        initHttpLoggingInterceptor();\n    }\n    /**\n     * 构建Retrofit\n     **/\n    protected Retrofit getRetrofit() {\n        if (retrofit == null) {\n            retrofit = new Retrofit.Builder()\n                    .baseUrl(BASE_URL)\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                    .client(getOkHttpClient())\n                    .build();\n        }\n        return retrofit;\n    }\n    /**\n     * 构建Okhttp\n     **/\n    protected OkHttpClient getOkHttpClient() {\n        if (client == null) {\n            client = getOkHttpBuilder().build();\n        }\n        return client;\n    }\n\n    private OkHttpClient.Builder getOkHttpBuilder() {\n        OkHttpClient.Builder builder = new OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .addInterceptor(logging);\n        return builder;\n    }\n\n    /**\n     * 初始化 HTTP日志打印拦截\n     */\n    private void initHttpLoggingInterceptor() {\n        logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.d(TAG, \"whd >> MSG : \" + message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n    }\n\n    /**\n     * 支持使用HTTPS请求\n     *\n     * @return\n     */\n    public Retrofit getHTTPSRetrofit() {\n        OkHttpClient.Builder builder = getOkHttpClient().newBuilder();\n        setClientSSL(builder);\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                .client(builder.build())\n                .build();\n        return retrofit;\n    }\n\n    /**\n     * 支持HTTPS的 SSL\n     *\n     * @param builder\n     */\n    private void setClientSSL(OkHttpClient.Builder builder) {\n        TrustManager[] trustManagers = new TrustManager[]{(TrustManager) new HTTPSTrustManager()};\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n            sslContext.init(null, trustManagers, new java.security.SecureRandom());\n            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n            builder.sslSocketFactory(sslSocketFactory);\n        } catch (Exception e) {\n            LogUtil.d(TAG, \"setClientSSL() :\" + e.getMessage());\n        }\n    }\n}\n```\n```\n/**\n * 使用它跳过HTTPS的SSL认证\n */\npublic class HTTPSTrustManager {\n    private static TrustManager[] trustManagers;\n    private static final X509Certificate[] _AcceptedIssuers = new X509Certificate[0];\n\n    public HTTPSTrustManager() {\n    }\n\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n    }\n\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n    }\n\n    public boolean isClientTrusted(X509Certificate[] chain) {\n        return true;\n    }\n\n    public boolean isServerTrusted(X509Certificate[] chain) {\n        return true;\n    }\n\n    public X509Certificate[] getAcceptedIssuers() {\n        return _AcceptedIssuers;\n    }\n}\n```\n对应接口的一个请求Service类,继承BaseService\n```\npublic class DataService extends BaseService {\n\n    public Observable<BaseModel<T>> fetchData() {\n        Map<String, Object> params = new ArrayMap<>(1);\n        params.put(key, value);\n        return getRetrofit().create(DataApi.class).fetchData(params);\n    }\n\n   /**\n    * 添加拦截器,\n    * 可以获取请求的数据和返回的数据.\n    * 不进行数据处理的话可以不用重写该方法\n    **/\n    @Override\n    protected OkHttpClient getOkHttpClient() {\n        OkHttpClient client = super.getOkHttpClient();\n        return client.newBuilder().addInterceptor(new DataInterceptor()).build();\n    }\n}\n```\n4.自定义拦截器\n```\npublic class DataInterceptor implements Interceptor {\n    private static final String TAG = \"DataInterceptor\";\n    private static final Charset UTF8 = Charset.forName(\"UTF-8\");\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request request = chain.request();\n        Request.Builder builder = request.newBuilder();\n        Request newRequest = builder\n                .addHeader(\"Accept\", \"application/json\")\n                .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .addHeader(\"x-sdk-version\", VersionUtils.SDK_VERSION)\n                .addHeader(\"x-app-version\", VersionUtils.getAppVersionName(App.sContext))\n                .build();\n        Response response = chain.proceed(newRequest);\n        return buildResponse(response);\n    }\n\n    /**\n     * 重新构造Response\n     *\n     * @param response\n     * @return\n     * @throws IOException\n     */\n    private Response buildResponse(final Response response) throws IOException {\n        String result = decryptionResponse(response);\n        return response.newBuilder().body(ResponseBody.create(response.body().contentType(), result)).build();\n    }\n\n    /**\n     * 解密BODY\n     *\n     * @param response\n     * @return\n     */\n    private String decryptionResponse(Response response) throws IOException {\n        String data = null;\n        ResponseBody responseBody = response.body();\n        long contentLength = responseBody.contentLength();\n        BufferedSource source = responseBody.source();\n        source.request(Long.MAX_VALUE); // Buffer the entire body.\n        Buffer buffer = source.buffer();\n\n        Charset charset = UTF8;\n        MediaType contentType = responseBody.contentType();\n        if (contentType != null) {\n            charset = contentType.charset(UTF8);\n        }\n        if (contentLength != 0) {\n            String encrypStr = buffer.clone().readString(charset);\n            BaseModel baseModel = JsonUtil.getInstance().fromJson(encrypStr, BaseModel.class);\n            LogUtil.d(TAG, \"加密内容 : \" + wiFiBaseModel.data.toString());\n            baseModel.data = JsonUtil.getInstance().fromJson(AesUtils.decrypt(baseModel.data.toString()), Object.class);\n            data = JsonUtil.getInstance().toJson(baseModel);\n            LogUtil.d(TAG, \"解密内容 : \" + data);\n        }\n        return data;\n    }\n}\n```\n5.json解析\n```\n/**\n * Json工具类\n * Created by wong on 17-3-6.\n */\npublic class JsonUtil {\n    private static final String TAG = \"JsonUtil\";\n    private static Gson gson = null;\n    private static JsonUtil jsonUtil = null;\n\n    private JsonUtil() {\n        gson = new GsonBuilder().serializeNulls().create();\n    }\n\n    public static JsonUtil getInstance() {\n        if (jsonUtil == null) {\n            jsonUtil = new JsonUtil();\n        }\n        return jsonUtil;\n    }\n\n    /**\n     * 将对象转换为JSON字符串\n     *\n     * @param obj\n     * @return\n     */\n    public String toJson(Object obj) {\n        return gson.toJson(obj);\n    }\n\n    /**\n     * 将JSON字符串转化为对象\n     *\n     * @param s\n     * @param cls\n     * @return\n     */\n    public <T> T fromJson(String s, Type cls) {\n        return gson.fromJson(s.trim(), cls);\n    }\n\n}\n```\n6.获取Service来进行相关操作\n```\npublic class HttpManager {\n    public static volatile HttpManager instance;\n    public DataService dataService;\n\n    private HttpManager() {\n\n    }\n\n    public static HttpManager getInstance() {\n        if (null == instance) {\n            synchronized (HttpManager.class) {\n                if (null == instance) {\n                    instance = new HttpManager();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public DataService getDataService() {\n        if (null == dataService) {\n            dataService = new DataService();\n        }\n        return dataService;\n    }\n\n}\n```\n7.使用示例,创建一个IntentService进行网络请求\n```\npublic class DataRequestService extends IntentService {\n\n    public DataRequestService() {\n        super(\"DataRequestService\");\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        HttpManager.getInstance().getDataService().fetchData()\n                .subscribeOn(Schedulers.io())\n                .subscribe(new Subscriber<BaseModel<T>>() {\n                    @Override\n                    public void onCompleted() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(BaseModel<T> baseModel) {\n\n                    }\n                });\n    }\n}\n```\n","source":"_posts/rx-retrofit-okhttp网络框架.md","raw":"---\ntitle: rx+retrofit+okhttp网络框架\ndate: 2017-03-06 22:30:35\ntags: Android\n---\n首先导入相关的包\ncompile 'com.google.code.gson:gson:2.5'\ncompile 'com.squareup.okhttp3:okhttp:3.3.1'\ncompile 'io.reactivex:rxjava:1.1.9'\ncompile 'io.reactivex:rxandroid:1.2.1'\ncompile 'com.squareup.retrofit2:retrofit:2.1.0'\ncompile 'com.squareup.retrofit2:converter-gson:2.1.0'\ncompile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'\ncompile 'com.squareup.retrofit2:retrofit-converters:2.1.0'\ncompile 'com.squareup.okhttp3:logging-interceptor:3.4.1'\n<!--more-->\n1.对应的数据模型,采用范型\n```\npublic class BaseModel<T> implements Serializable {\n    public int status;\n    public String message;\n    public T data;\n\n    public BaseModel() {\n    }\n\n    public BaseModel(int status, String message, T data) {\n        this.status = status;\n        this.message = message;\n        this.data = data;\n    }\n}\n```\n2.相关接口,和服务端的接口对应\n```\npublic interface DataApi {\n    @GET(URL)\n    Observable<BaseModel<T>> fetchData(@QueryMap Map<String, Object> params);\n}\n```\n3.网络配置,请求等基础类\n```\npublic class BaseService {\n    private static final String TAG = \"BaseService\";\n    protected static final String BASE_URL = \"baseurl\";\n    protected Retrofit retrofit;\n    protected OkHttpClient client;\n    private HttpLoggingInterceptor logging; //日志类\n\n    public BaseService() {\n        initHttpLoggingInterceptor();\n    }\n    /**\n     * 构建Retrofit\n     **/\n    protected Retrofit getRetrofit() {\n        if (retrofit == null) {\n            retrofit = new Retrofit.Builder()\n                    .baseUrl(BASE_URL)\n                    .addConverterFactory(GsonConverterFactory.create())\n                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                    .client(getOkHttpClient())\n                    .build();\n        }\n        return retrofit;\n    }\n    /**\n     * 构建Okhttp\n     **/\n    protected OkHttpClient getOkHttpClient() {\n        if (client == null) {\n            client = getOkHttpBuilder().build();\n        }\n        return client;\n    }\n\n    private OkHttpClient.Builder getOkHttpBuilder() {\n        OkHttpClient.Builder builder = new OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .addInterceptor(logging);\n        return builder;\n    }\n\n    /**\n     * 初始化 HTTP日志打印拦截\n     */\n    private void initHttpLoggingInterceptor() {\n        logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() {\n            @Override\n            public void log(String message) {\n                LogUtil.d(TAG, \"whd >> MSG : \" + message);\n            }\n        });\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\n    }\n\n    /**\n     * 支持使用HTTPS请求\n     *\n     * @return\n     */\n    public Retrofit getHTTPSRetrofit() {\n        OkHttpClient.Builder builder = getOkHttpClient().newBuilder();\n        setClientSSL(builder);\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BASE_URL)\n                .addConverterFactory(GsonConverterFactory.create())\n                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\n                .client(builder.build())\n                .build();\n        return retrofit;\n    }\n\n    /**\n     * 支持HTTPS的 SSL\n     *\n     * @param builder\n     */\n    private void setClientSSL(OkHttpClient.Builder builder) {\n        TrustManager[] trustManagers = new TrustManager[]{(TrustManager) new HTTPSTrustManager()};\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n            sslContext.init(null, trustManagers, new java.security.SecureRandom());\n            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n            builder.sslSocketFactory(sslSocketFactory);\n        } catch (Exception e) {\n            LogUtil.d(TAG, \"setClientSSL() :\" + e.getMessage());\n        }\n    }\n}\n```\n```\n/**\n * 使用它跳过HTTPS的SSL认证\n */\npublic class HTTPSTrustManager {\n    private static TrustManager[] trustManagers;\n    private static final X509Certificate[] _AcceptedIssuers = new X509Certificate[0];\n\n    public HTTPSTrustManager() {\n    }\n\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n    }\n\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n    }\n\n    public boolean isClientTrusted(X509Certificate[] chain) {\n        return true;\n    }\n\n    public boolean isServerTrusted(X509Certificate[] chain) {\n        return true;\n    }\n\n    public X509Certificate[] getAcceptedIssuers() {\n        return _AcceptedIssuers;\n    }\n}\n```\n对应接口的一个请求Service类,继承BaseService\n```\npublic class DataService extends BaseService {\n\n    public Observable<BaseModel<T>> fetchData() {\n        Map<String, Object> params = new ArrayMap<>(1);\n        params.put(key, value);\n        return getRetrofit().create(DataApi.class).fetchData(params);\n    }\n\n   /**\n    * 添加拦截器,\n    * 可以获取请求的数据和返回的数据.\n    * 不进行数据处理的话可以不用重写该方法\n    **/\n    @Override\n    protected OkHttpClient getOkHttpClient() {\n        OkHttpClient client = super.getOkHttpClient();\n        return client.newBuilder().addInterceptor(new DataInterceptor()).build();\n    }\n}\n```\n4.自定义拦截器\n```\npublic class DataInterceptor implements Interceptor {\n    private static final String TAG = \"DataInterceptor\";\n    private static final Charset UTF8 = Charset.forName(\"UTF-8\");\n\n    @Override\n    public Response intercept(Chain chain) throws IOException {\n        Request request = chain.request();\n        Request.Builder builder = request.newBuilder();\n        Request newRequest = builder\n                .addHeader(\"Accept\", \"application/json\")\n                .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                .addHeader(\"x-sdk-version\", VersionUtils.SDK_VERSION)\n                .addHeader(\"x-app-version\", VersionUtils.getAppVersionName(App.sContext))\n                .build();\n        Response response = chain.proceed(newRequest);\n        return buildResponse(response);\n    }\n\n    /**\n     * 重新构造Response\n     *\n     * @param response\n     * @return\n     * @throws IOException\n     */\n    private Response buildResponse(final Response response) throws IOException {\n        String result = decryptionResponse(response);\n        return response.newBuilder().body(ResponseBody.create(response.body().contentType(), result)).build();\n    }\n\n    /**\n     * 解密BODY\n     *\n     * @param response\n     * @return\n     */\n    private String decryptionResponse(Response response) throws IOException {\n        String data = null;\n        ResponseBody responseBody = response.body();\n        long contentLength = responseBody.contentLength();\n        BufferedSource source = responseBody.source();\n        source.request(Long.MAX_VALUE); // Buffer the entire body.\n        Buffer buffer = source.buffer();\n\n        Charset charset = UTF8;\n        MediaType contentType = responseBody.contentType();\n        if (contentType != null) {\n            charset = contentType.charset(UTF8);\n        }\n        if (contentLength != 0) {\n            String encrypStr = buffer.clone().readString(charset);\n            BaseModel baseModel = JsonUtil.getInstance().fromJson(encrypStr, BaseModel.class);\n            LogUtil.d(TAG, \"加密内容 : \" + wiFiBaseModel.data.toString());\n            baseModel.data = JsonUtil.getInstance().fromJson(AesUtils.decrypt(baseModel.data.toString()), Object.class);\n            data = JsonUtil.getInstance().toJson(baseModel);\n            LogUtil.d(TAG, \"解密内容 : \" + data);\n        }\n        return data;\n    }\n}\n```\n5.json解析\n```\n/**\n * Json工具类\n * Created by wong on 17-3-6.\n */\npublic class JsonUtil {\n    private static final String TAG = \"JsonUtil\";\n    private static Gson gson = null;\n    private static JsonUtil jsonUtil = null;\n\n    private JsonUtil() {\n        gson = new GsonBuilder().serializeNulls().create();\n    }\n\n    public static JsonUtil getInstance() {\n        if (jsonUtil == null) {\n            jsonUtil = new JsonUtil();\n        }\n        return jsonUtil;\n    }\n\n    /**\n     * 将对象转换为JSON字符串\n     *\n     * @param obj\n     * @return\n     */\n    public String toJson(Object obj) {\n        return gson.toJson(obj);\n    }\n\n    /**\n     * 将JSON字符串转化为对象\n     *\n     * @param s\n     * @param cls\n     * @return\n     */\n    public <T> T fromJson(String s, Type cls) {\n        return gson.fromJson(s.trim(), cls);\n    }\n\n}\n```\n6.获取Service来进行相关操作\n```\npublic class HttpManager {\n    public static volatile HttpManager instance;\n    public DataService dataService;\n\n    private HttpManager() {\n\n    }\n\n    public static HttpManager getInstance() {\n        if (null == instance) {\n            synchronized (HttpManager.class) {\n                if (null == instance) {\n                    instance = new HttpManager();\n                }\n            }\n        }\n        return instance;\n    }\n\n    public DataService getDataService() {\n        if (null == dataService) {\n            dataService = new DataService();\n        }\n        return dataService;\n    }\n\n}\n```\n7.使用示例,创建一个IntentService进行网络请求\n```\npublic class DataRequestService extends IntentService {\n\n    public DataRequestService() {\n        super(\"DataRequestService\");\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        HttpManager.getInstance().getDataService().fetchData()\n                .subscribeOn(Schedulers.io())\n                .subscribe(new Subscriber<BaseModel<T>>() {\n                    @Override\n                    public void onCompleted() {\n\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n\n                    }\n\n                    @Override\n                    public void onNext(BaseModel<T> baseModel) {\n\n                    }\n                });\n    }\n}\n```\n","slug":"rx-retrofit-okhttp网络框架","published":1,"updated":"2017-03-11T02:44:32.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dmt000tvj2za47x1c9p","content":"<p>首先导入相关的包<br>compile ‘com.google.code.gson:gson:2.5’<br>compile ‘com.squareup.okhttp3:okhttp:3.3.1’<br>compile ‘io.reactivex:rxjava:1.1.9’<br>compile ‘io.reactivex:rxandroid:1.2.1’<br>compile ‘com.squareup.retrofit2:retrofit:2.1.0’<br>compile ‘com.squareup.retrofit2:converter-gson:2.1.0’<br>compile ‘com.squareup.retrofit2:adapter-rxjava:2.1.0’<br>compile ‘com.squareup.retrofit2:retrofit-converters:2.1.0’<br>compile ‘com.squareup.okhttp3:logging-interceptor:3.4.1’<br><a id=\"more\"></a><br>1.对应的数据模型,采用范型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BaseModel&lt;T&gt; implements Serializable &#123;</div><div class=\"line\">    public int status;</div><div class=\"line\">    public String message;</div><div class=\"line\">    public T data;</div><div class=\"line\"></div><div class=\"line\">    public BaseModel() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public BaseModel(int status, String message, T data) &#123;</div><div class=\"line\">        this.status = status;</div><div class=\"line\">        this.message = message;</div><div class=\"line\">        this.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.相关接口,和服务端的接口对应<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface DataApi &#123;</div><div class=\"line\">    @GET(URL)</div><div class=\"line\">    Observable&lt;BaseModel&lt;T&gt;&gt; fetchData(@QueryMap Map&lt;String, Object&gt; params);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.网络配置,请求等基础类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BaseService &#123;</div><div class=\"line\">    private static final String TAG = &quot;BaseService&quot;;</div><div class=\"line\">    protected static final String BASE_URL = &quot;baseurl&quot;;</div><div class=\"line\">    protected Retrofit retrofit;</div><div class=\"line\">    protected OkHttpClient client;</div><div class=\"line\">    private HttpLoggingInterceptor logging; //日志类</div><div class=\"line\"></div><div class=\"line\">    public BaseService() &#123;</div><div class=\"line\">        initHttpLoggingInterceptor();</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构建Retrofit</div><div class=\"line\">     **/</div><div class=\"line\">    protected Retrofit getRetrofit() &#123;</div><div class=\"line\">        if (retrofit == null) &#123;</div><div class=\"line\">            retrofit = new Retrofit.Builder()</div><div class=\"line\">                    .baseUrl(BASE_URL)</div><div class=\"line\">                    .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">                    .client(getOkHttpClient())</div><div class=\"line\">                    .build();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构建Okhttp</div><div class=\"line\">     **/</div><div class=\"line\">    protected OkHttpClient getOkHttpClient() &#123;</div><div class=\"line\">        if (client == null) &#123;</div><div class=\"line\">            client = getOkHttpBuilder().build();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return client;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private OkHttpClient.Builder getOkHttpBuilder() &#123;</div><div class=\"line\">        OkHttpClient.Builder builder = new OkHttpClient.Builder()</div><div class=\"line\">                .connectTimeout(30, TimeUnit.SECONDS)</div><div class=\"line\">                .addInterceptor(logging);</div><div class=\"line\">        return builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 初始化 HTTP日志打印拦截</div><div class=\"line\">     */</div><div class=\"line\">    private void initHttpLoggingInterceptor() &#123;</div><div class=\"line\">        logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void log(String message) &#123;</div><div class=\"line\">                LogUtil.d(TAG, &quot;whd &gt;&gt; MSG : &quot; + message);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 支持使用HTTPS请求</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public Retrofit getHTTPSRetrofit() &#123;</div><div class=\"line\">        OkHttpClient.Builder builder = getOkHttpClient().newBuilder();</div><div class=\"line\">        setClientSSL(builder);</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder()</div><div class=\"line\">                .baseUrl(BASE_URL)</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">                .client(builder.build())</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 支持HTTPS的 SSL</div><div class=\"line\">     *</div><div class=\"line\">     * @param builder</div><div class=\"line\">     */</div><div class=\"line\">    private void setClientSSL(OkHttpClient.Builder builder) &#123;</div><div class=\"line\">        TrustManager[] trustManagers = new TrustManager[]&#123;(TrustManager) new HTTPSTrustManager()&#125;;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;);</div><div class=\"line\">            sslContext.init(null, trustManagers, new java.security.SecureRandom());</div><div class=\"line\">            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();</div><div class=\"line\">            builder.sslSocketFactory(sslSocketFactory);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            LogUtil.d(TAG, &quot;setClientSSL() :&quot; + e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 使用它跳过HTTPS的SSL认证</div><div class=\"line\"> */</div><div class=\"line\">public class HTTPSTrustManager &#123;</div><div class=\"line\">    private static TrustManager[] trustManagers;</div><div class=\"line\">    private static final X509Certificate[] _AcceptedIssuers = new X509Certificate[0];</div><div class=\"line\"></div><div class=\"line\">    public HTTPSTrustManager() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean isClientTrusted(X509Certificate[] chain) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean isServerTrusted(X509Certificate[] chain) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">        return _AcceptedIssuers;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应接口的一个请求Service类,继承BaseService<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DataService extends BaseService &#123;</div><div class=\"line\"></div><div class=\"line\">    public Observable&lt;BaseModel&lt;T&gt;&gt; fetchData() &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; params = new ArrayMap&lt;&gt;(1);</div><div class=\"line\">        params.put(key, value);</div><div class=\"line\">        return getRetrofit().create(DataApi.class).fetchData(params);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * 添加拦截器,</div><div class=\"line\">    * 可以获取请求的数据和返回的数据.</div><div class=\"line\">    * 不进行数据处理的话可以不用重写该方法</div><div class=\"line\">    **/</div><div class=\"line\">    @Override</div><div class=\"line\">    protected OkHttpClient getOkHttpClient() &#123;</div><div class=\"line\">        OkHttpClient client = super.getOkHttpClient();</div><div class=\"line\">        return client.newBuilder().addInterceptor(new DataInterceptor()).build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.自定义拦截器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DataInterceptor implements Interceptor &#123;</div><div class=\"line\">    private static final String TAG = &quot;DataInterceptor&quot;;</div><div class=\"line\">    private static final Charset UTF8 = Charset.forName(&quot;UTF-8&quot;);</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Response intercept(Chain chain) throws IOException &#123;</div><div class=\"line\">        Request request = chain.request();</div><div class=\"line\">        Request.Builder builder = request.newBuilder();</div><div class=\"line\">        Request newRequest = builder</div><div class=\"line\">                .addHeader(&quot;Accept&quot;, &quot;application/json&quot;)</div><div class=\"line\">                .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</div><div class=\"line\">                .addHeader(&quot;x-sdk-version&quot;, VersionUtils.SDK_VERSION)</div><div class=\"line\">                .addHeader(&quot;x-app-version&quot;, VersionUtils.getAppVersionName(App.sContext))</div><div class=\"line\">                .build();</div><div class=\"line\">        Response response = chain.proceed(newRequest);</div><div class=\"line\">        return buildResponse(response);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 重新构造Response</div><div class=\"line\">     *</div><div class=\"line\">     * @param response</div><div class=\"line\">     * @return</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private Response buildResponse(final Response response) throws IOException &#123;</div><div class=\"line\">        String result = decryptionResponse(response);</div><div class=\"line\">        return response.newBuilder().body(ResponseBody.create(response.body().contentType(), result)).build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 解密BODY</div><div class=\"line\">     *</div><div class=\"line\">     * @param response</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    private String decryptionResponse(Response response) throws IOException &#123;</div><div class=\"line\">        String data = null;</div><div class=\"line\">        ResponseBody responseBody = response.body();</div><div class=\"line\">        long contentLength = responseBody.contentLength();</div><div class=\"line\">        BufferedSource source = responseBody.source();</div><div class=\"line\">        source.request(Long.MAX_VALUE); // Buffer the entire body.</div><div class=\"line\">        Buffer buffer = source.buffer();</div><div class=\"line\"></div><div class=\"line\">        Charset charset = UTF8;</div><div class=\"line\">        MediaType contentType = responseBody.contentType();</div><div class=\"line\">        if (contentType != null) &#123;</div><div class=\"line\">            charset = contentType.charset(UTF8);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (contentLength != 0) &#123;</div><div class=\"line\">            String encrypStr = buffer.clone().readString(charset);</div><div class=\"line\">            BaseModel baseModel = JsonUtil.getInstance().fromJson(encrypStr, BaseModel.class);</div><div class=\"line\">            LogUtil.d(TAG, &quot;加密内容 : &quot; + wiFiBaseModel.data.toString());</div><div class=\"line\">            baseModel.data = JsonUtil.getInstance().fromJson(AesUtils.decrypt(baseModel.data.toString()), Object.class);</div><div class=\"line\">            data = JsonUtil.getInstance().toJson(baseModel);</div><div class=\"line\">            LogUtil.d(TAG, &quot;解密内容 : &quot; + data);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.json解析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Json工具类</div><div class=\"line\"> * Created by wong on 17-3-6.</div><div class=\"line\"> */</div><div class=\"line\">public class JsonUtil &#123;</div><div class=\"line\">    private static final String TAG = &quot;JsonUtil&quot;;</div><div class=\"line\">    private static Gson gson = null;</div><div class=\"line\">    private static JsonUtil jsonUtil = null;</div><div class=\"line\"></div><div class=\"line\">    private JsonUtil() &#123;</div><div class=\"line\">        gson = new GsonBuilder().serializeNulls().create();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static JsonUtil getInstance() &#123;</div><div class=\"line\">        if (jsonUtil == null) &#123;</div><div class=\"line\">            jsonUtil = new JsonUtil();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return jsonUtil;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 将对象转换为JSON字符串</div><div class=\"line\">     *</div><div class=\"line\">     * @param obj</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String toJson(Object obj) &#123;</div><div class=\"line\">        return gson.toJson(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 将JSON字符串转化为对象</div><div class=\"line\">     *</div><div class=\"line\">     * @param s</div><div class=\"line\">     * @param cls</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public &lt;T&gt; T fromJson(String s, Type cls) &#123;</div><div class=\"line\">        return gson.fromJson(s.trim(), cls);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.获取Service来进行相关操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HttpManager &#123;</div><div class=\"line\">    public static volatile HttpManager instance;</div><div class=\"line\">    public DataService dataService;</div><div class=\"line\"></div><div class=\"line\">    private HttpManager() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static HttpManager getInstance() &#123;</div><div class=\"line\">        if (null == instance) &#123;</div><div class=\"line\">            synchronized (HttpManager.class) &#123;</div><div class=\"line\">                if (null == instance) &#123;</div><div class=\"line\">                    instance = new HttpManager();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public DataService getDataService() &#123;</div><div class=\"line\">        if (null == dataService) &#123;</div><div class=\"line\">            dataService = new DataService();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return dataService;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>7.使用示例,创建一个IntentService进行网络请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DataRequestService extends IntentService &#123;</div><div class=\"line\"></div><div class=\"line\">    public DataRequestService() &#123;</div><div class=\"line\">        super(&quot;DataRequestService&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onHandleIntent(Intent intent) &#123;</div><div class=\"line\">        HttpManager.getInstance().getDataService().fetchData()</div><div class=\"line\">                .subscribeOn(Schedulers.io())</div><div class=\"line\">                .subscribe(new Subscriber&lt;BaseModel&lt;T&gt;&gt;() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void onCompleted() &#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void onError(Throwable e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void onNext(BaseModel&lt;T&gt; baseModel) &#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>首先导入相关的包<br>compile ‘com.google.code.gson:gson:2.5’<br>compile ‘com.squareup.okhttp3:okhttp:3.3.1’<br>compile ‘io.reactivex:rxjava:1.1.9’<br>compile ‘io.reactivex:rxandroid:1.2.1’<br>compile ‘com.squareup.retrofit2:retrofit:2.1.0’<br>compile ‘com.squareup.retrofit2:converter-gson:2.1.0’<br>compile ‘com.squareup.retrofit2:adapter-rxjava:2.1.0’<br>compile ‘com.squareup.retrofit2:retrofit-converters:2.1.0’<br>compile ‘com.squareup.okhttp3:logging-interceptor:3.4.1’<br>","more":"<br>1.对应的数据模型,采用范型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BaseModel&lt;T&gt; implements Serializable &#123;</div><div class=\"line\">    public int status;</div><div class=\"line\">    public String message;</div><div class=\"line\">    public T data;</div><div class=\"line\"></div><div class=\"line\">    public BaseModel() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public BaseModel(int status, String message, T data) &#123;</div><div class=\"line\">        this.status = status;</div><div class=\"line\">        this.message = message;</div><div class=\"line\">        this.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.相关接口,和服务端的接口对应<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface DataApi &#123;</div><div class=\"line\">    @GET(URL)</div><div class=\"line\">    Observable&lt;BaseModel&lt;T&gt;&gt; fetchData(@QueryMap Map&lt;String, Object&gt; params);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.网络配置,请求等基础类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BaseService &#123;</div><div class=\"line\">    private static final String TAG = &quot;BaseService&quot;;</div><div class=\"line\">    protected static final String BASE_URL = &quot;baseurl&quot;;</div><div class=\"line\">    protected Retrofit retrofit;</div><div class=\"line\">    protected OkHttpClient client;</div><div class=\"line\">    private HttpLoggingInterceptor logging; //日志类</div><div class=\"line\"></div><div class=\"line\">    public BaseService() &#123;</div><div class=\"line\">        initHttpLoggingInterceptor();</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构建Retrofit</div><div class=\"line\">     **/</div><div class=\"line\">    protected Retrofit getRetrofit() &#123;</div><div class=\"line\">        if (retrofit == null) &#123;</div><div class=\"line\">            retrofit = new Retrofit.Builder()</div><div class=\"line\">                    .baseUrl(BASE_URL)</div><div class=\"line\">                    .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                    .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">                    .client(getOkHttpClient())</div><div class=\"line\">                    .build();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构建Okhttp</div><div class=\"line\">     **/</div><div class=\"line\">    protected OkHttpClient getOkHttpClient() &#123;</div><div class=\"line\">        if (client == null) &#123;</div><div class=\"line\">            client = getOkHttpBuilder().build();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return client;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private OkHttpClient.Builder getOkHttpBuilder() &#123;</div><div class=\"line\">        OkHttpClient.Builder builder = new OkHttpClient.Builder()</div><div class=\"line\">                .connectTimeout(30, TimeUnit.SECONDS)</div><div class=\"line\">                .addInterceptor(logging);</div><div class=\"line\">        return builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 初始化 HTTP日志打印拦截</div><div class=\"line\">     */</div><div class=\"line\">    private void initHttpLoggingInterceptor() &#123;</div><div class=\"line\">        logging = new HttpLoggingInterceptor(new HttpLoggingInterceptor.Logger() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void log(String message) &#123;</div><div class=\"line\">                LogUtil.d(TAG, &quot;whd &gt;&gt; MSG : &quot; + message);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 支持使用HTTPS请求</div><div class=\"line\">     *</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public Retrofit getHTTPSRetrofit() &#123;</div><div class=\"line\">        OkHttpClient.Builder builder = getOkHttpClient().newBuilder();</div><div class=\"line\">        setClientSSL(builder);</div><div class=\"line\">        Retrofit retrofit = new Retrofit.Builder()</div><div class=\"line\">                .baseUrl(BASE_URL)</div><div class=\"line\">                .addConverterFactory(GsonConverterFactory.create())</div><div class=\"line\">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</div><div class=\"line\">                .client(builder.build())</div><div class=\"line\">                .build();</div><div class=\"line\">        return retrofit;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 支持HTTPS的 SSL</div><div class=\"line\">     *</div><div class=\"line\">     * @param builder</div><div class=\"line\">     */</div><div class=\"line\">    private void setClientSSL(OkHttpClient.Builder builder) &#123;</div><div class=\"line\">        TrustManager[] trustManagers = new TrustManager[]&#123;(TrustManager) new HTTPSTrustManager()&#125;;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            SSLContext sslContext = SSLContext.getInstance(&quot;SSL&quot;);</div><div class=\"line\">            sslContext.init(null, trustManagers, new java.security.SecureRandom());</div><div class=\"line\">            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();</div><div class=\"line\">            builder.sslSocketFactory(sslSocketFactory);</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            LogUtil.d(TAG, &quot;setClientSSL() :&quot; + e.getMessage());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 使用它跳过HTTPS的SSL认证</div><div class=\"line\"> */</div><div class=\"line\">public class HTTPSTrustManager &#123;</div><div class=\"line\">    private static TrustManager[] trustManagers;</div><div class=\"line\">    private static final X509Certificate[] _AcceptedIssuers = new X509Certificate[0];</div><div class=\"line\"></div><div class=\"line\">    public HTTPSTrustManager() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean isClientTrusted(X509Certificate[] chain) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean isServerTrusted(X509Certificate[] chain) &#123;</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public X509Certificate[] getAcceptedIssuers() &#123;</div><div class=\"line\">        return _AcceptedIssuers;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应接口的一个请求Service类,继承BaseService<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DataService extends BaseService &#123;</div><div class=\"line\"></div><div class=\"line\">    public Observable&lt;BaseModel&lt;T&gt;&gt; fetchData() &#123;</div><div class=\"line\">        Map&lt;String, Object&gt; params = new ArrayMap&lt;&gt;(1);</div><div class=\"line\">        params.put(key, value);</div><div class=\"line\">        return getRetrofit().create(DataApi.class).fetchData(params);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * 添加拦截器,</div><div class=\"line\">    * 可以获取请求的数据和返回的数据.</div><div class=\"line\">    * 不进行数据处理的话可以不用重写该方法</div><div class=\"line\">    **/</div><div class=\"line\">    @Override</div><div class=\"line\">    protected OkHttpClient getOkHttpClient() &#123;</div><div class=\"line\">        OkHttpClient client = super.getOkHttpClient();</div><div class=\"line\">        return client.newBuilder().addInterceptor(new DataInterceptor()).build();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.自定义拦截器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DataInterceptor implements Interceptor &#123;</div><div class=\"line\">    private static final String TAG = &quot;DataInterceptor&quot;;</div><div class=\"line\">    private static final Charset UTF8 = Charset.forName(&quot;UTF-8&quot;);</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Response intercept(Chain chain) throws IOException &#123;</div><div class=\"line\">        Request request = chain.request();</div><div class=\"line\">        Request.Builder builder = request.newBuilder();</div><div class=\"line\">        Request newRequest = builder</div><div class=\"line\">                .addHeader(&quot;Accept&quot;, &quot;application/json&quot;)</div><div class=\"line\">                .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)</div><div class=\"line\">                .addHeader(&quot;x-sdk-version&quot;, VersionUtils.SDK_VERSION)</div><div class=\"line\">                .addHeader(&quot;x-app-version&quot;, VersionUtils.getAppVersionName(App.sContext))</div><div class=\"line\">                .build();</div><div class=\"line\">        Response response = chain.proceed(newRequest);</div><div class=\"line\">        return buildResponse(response);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 重新构造Response</div><div class=\"line\">     *</div><div class=\"line\">     * @param response</div><div class=\"line\">     * @return</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private Response buildResponse(final Response response) throws IOException &#123;</div><div class=\"line\">        String result = decryptionResponse(response);</div><div class=\"line\">        return response.newBuilder().body(ResponseBody.create(response.body().contentType(), result)).build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 解密BODY</div><div class=\"line\">     *</div><div class=\"line\">     * @param response</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    private String decryptionResponse(Response response) throws IOException &#123;</div><div class=\"line\">        String data = null;</div><div class=\"line\">        ResponseBody responseBody = response.body();</div><div class=\"line\">        long contentLength = responseBody.contentLength();</div><div class=\"line\">        BufferedSource source = responseBody.source();</div><div class=\"line\">        source.request(Long.MAX_VALUE); // Buffer the entire body.</div><div class=\"line\">        Buffer buffer = source.buffer();</div><div class=\"line\"></div><div class=\"line\">        Charset charset = UTF8;</div><div class=\"line\">        MediaType contentType = responseBody.contentType();</div><div class=\"line\">        if (contentType != null) &#123;</div><div class=\"line\">            charset = contentType.charset(UTF8);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (contentLength != 0) &#123;</div><div class=\"line\">            String encrypStr = buffer.clone().readString(charset);</div><div class=\"line\">            BaseModel baseModel = JsonUtil.getInstance().fromJson(encrypStr, BaseModel.class);</div><div class=\"line\">            LogUtil.d(TAG, &quot;加密内容 : &quot; + wiFiBaseModel.data.toString());</div><div class=\"line\">            baseModel.data = JsonUtil.getInstance().fromJson(AesUtils.decrypt(baseModel.data.toString()), Object.class);</div><div class=\"line\">            data = JsonUtil.getInstance().toJson(baseModel);</div><div class=\"line\">            LogUtil.d(TAG, &quot;解密内容 : &quot; + data);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.json解析<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Json工具类</div><div class=\"line\"> * Created by wong on 17-3-6.</div><div class=\"line\"> */</div><div class=\"line\">public class JsonUtil &#123;</div><div class=\"line\">    private static final String TAG = &quot;JsonUtil&quot;;</div><div class=\"line\">    private static Gson gson = null;</div><div class=\"line\">    private static JsonUtil jsonUtil = null;</div><div class=\"line\"></div><div class=\"line\">    private JsonUtil() &#123;</div><div class=\"line\">        gson = new GsonBuilder().serializeNulls().create();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static JsonUtil getInstance() &#123;</div><div class=\"line\">        if (jsonUtil == null) &#123;</div><div class=\"line\">            jsonUtil = new JsonUtil();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return jsonUtil;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 将对象转换为JSON字符串</div><div class=\"line\">     *</div><div class=\"line\">     * @param obj</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public String toJson(Object obj) &#123;</div><div class=\"line\">        return gson.toJson(obj);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 将JSON字符串转化为对象</div><div class=\"line\">     *</div><div class=\"line\">     * @param s</div><div class=\"line\">     * @param cls</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public &lt;T&gt; T fromJson(String s, Type cls) &#123;</div><div class=\"line\">        return gson.fromJson(s.trim(), cls);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.获取Service来进行相关操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class HttpManager &#123;</div><div class=\"line\">    public static volatile HttpManager instance;</div><div class=\"line\">    public DataService dataService;</div><div class=\"line\"></div><div class=\"line\">    private HttpManager() &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static HttpManager getInstance() &#123;</div><div class=\"line\">        if (null == instance) &#123;</div><div class=\"line\">            synchronized (HttpManager.class) &#123;</div><div class=\"line\">                if (null == instance) &#123;</div><div class=\"line\">                    instance = new HttpManager();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public DataService getDataService() &#123;</div><div class=\"line\">        if (null == dataService) &#123;</div><div class=\"line\">            dataService = new DataService();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return dataService;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>7.使用示例,创建一个IntentService进行网络请求<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class DataRequestService extends IntentService &#123;</div><div class=\"line\"></div><div class=\"line\">    public DataRequestService() &#123;</div><div class=\"line\">        super(&quot;DataRequestService&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onHandleIntent(Intent intent) &#123;</div><div class=\"line\">        HttpManager.getInstance().getDataService().fetchData()</div><div class=\"line\">                .subscribeOn(Schedulers.io())</div><div class=\"line\">                .subscribe(new Subscriber&lt;BaseModel&lt;T&gt;&gt;() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void onCompleted() &#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void onError(Throwable e) &#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    @Override</div><div class=\"line\">                    public void onNext(BaseModel&lt;T&gt; baseModel) &#123;</div><div class=\"line\"></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"一套临时使用的图片压缩缓存上传方案","date":"2017-02-17T13:09:00.000Z","_content":"最近项目在做一个类似于微信发送朋友圈的功能.\n\n其中涉及图片的压缩缓存,接口上传图片资源,所有这里记录一下自己使用的方案.\n\n1.图片的压缩缓存,见代码\n<!--more-->\n```\n/**\n * 图片压缩大小并缓存工具类\n * Created by wong on 16-8-25.\n */\npublic class ResizePicCacheHelper {\n    private static final int MAXMEMONRY = (int) (Runtime.getRuntime().maxMemory() / 1024);\n    private static volatile ResizePicCacheHelper instance = null;\n    //采用内存缓存\n    private LruCache<Uri, Bitmap> mMemoryCache;\n\n    private ResizePicCacheHelper() {\n        init();\n    }\n\n    public static ResizePicCacheHelper getInstance() {\n        if (null == instance) {\n            synchronized (ResizePicCacheHelper.class) {\n                if (null == instance) {\n                    instance = new ResizePicCacheHelper();\n                }\n            }\n        }\n        return instance;\n    }\n\n    private void init() {\n        if (mMemoryCache == null) {\n            mMemoryCache = new LruCache<Uri, Bitmap>(MAXMEMONRY / 8) {\n                @Override\n                protected int sizeOf(Uri key, Bitmap bitmap) {\n                    // 重写此方法来衡量每张图片的大小，默认返回图片数量。\n                    return bitmap.getRowBytes() * bitmap.getHeight() / 1024;\n                }\n            };\n        }\n    }\n\n    /**\n     * 添加图片缓存\n     *\n     * @param key\n     * @param bitmap\n     */\n    public void putBitmapToMemoryCache(Uri key, Bitmap bitmap) {\n        if (mMemoryCache.get(key) == null) {\n            if (key != null && bitmap != null) {\n                Bitmap resizeBmp = bitmap;\n                int height = bitmap.getHeight();\n                int width = bitmap.getWidth();\n                //按规格压缩图片\n                if (width > 640) {\n                    float scale = width / 640.0f;\n                    int resizeHeight = (int) (height / scale);\n                    resizeBmp = ThumbnailUtils.extractThumbnail(bitmap, 640, resizeHeight);\n                }\n                mMemoryCache.put(key, resizeBmp);\n            }\n        }\n    }\n\n    /**\n     * 压缩后的图像字节\n     *\n     * @param key\n     * @return\n     */\n    public byte[] getResizeBmpFromMemoryCache(Uri key) {\n        Bitmap bmp = mMemoryCache.get(key);\n        if (null == bmp) {\n            return null;\n        }\n        ByteArrayOutputStream output = new ByteArrayOutputStream();//初始化一个流对象\n        bmp.compress(Bitmap.CompressFormat.PNG, 100, output);//把bitmap100%高质量压缩 到 output对象里\n        byte[] result = output.toByteArray();//转换成功了\n        try {\n            output.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * 清空缓存\n     */\n    public void clearCache() {\n        if (mMemoryCache != null) {\n            if (mMemoryCache.size() > 0) {\n                mMemoryCache.evictAll();\n            }\n        }\n    }\n}\n```\n\n2.调用接口,上传图片.\n(注意Request的写法)\n```\npublic Map<String, RequestBody> getParams(File file, byte[] fileBytes){\n  Map<String, RequestBody> params = new HashMap<>();\n  RequestBody uid_body = RequestBody.create(MediaType.parse(\"text/plain\"), CommUtil.getUid());\n  RequestBody token_body = RequestBody.create(MediaType.parse(\"text/plain\"), CommUtil.getToken());\n  RequestBody file_body = (null == fileBytes) ? RequestBody.create(MediaType.parse(\"image/*\"), file)\n   :RequestBody.create(MediaType.parse(\"image/*\"), fileBytes);\n  params.put(\"uid\", uid_body);\n  params.put(\"token\", token_body);\n  params.put(\"file\\\";filename=\\\"\" + file.getName() + \"\", file_body);\n}\n```\n","source":"_posts/一套临时使用的图片压缩缓存上传方案.md","raw":"---\ntitle: 一套临时使用的图片压缩缓存上传方案\ndate: 2017-02-17 21:09:00\ntags: Android\n---\n最近项目在做一个类似于微信发送朋友圈的功能.\n\n其中涉及图片的压缩缓存,接口上传图片资源,所有这里记录一下自己使用的方案.\n\n1.图片的压缩缓存,见代码\n<!--more-->\n```\n/**\n * 图片压缩大小并缓存工具类\n * Created by wong on 16-8-25.\n */\npublic class ResizePicCacheHelper {\n    private static final int MAXMEMONRY = (int) (Runtime.getRuntime().maxMemory() / 1024);\n    private static volatile ResizePicCacheHelper instance = null;\n    //采用内存缓存\n    private LruCache<Uri, Bitmap> mMemoryCache;\n\n    private ResizePicCacheHelper() {\n        init();\n    }\n\n    public static ResizePicCacheHelper getInstance() {\n        if (null == instance) {\n            synchronized (ResizePicCacheHelper.class) {\n                if (null == instance) {\n                    instance = new ResizePicCacheHelper();\n                }\n            }\n        }\n        return instance;\n    }\n\n    private void init() {\n        if (mMemoryCache == null) {\n            mMemoryCache = new LruCache<Uri, Bitmap>(MAXMEMONRY / 8) {\n                @Override\n                protected int sizeOf(Uri key, Bitmap bitmap) {\n                    // 重写此方法来衡量每张图片的大小，默认返回图片数量。\n                    return bitmap.getRowBytes() * bitmap.getHeight() / 1024;\n                }\n            };\n        }\n    }\n\n    /**\n     * 添加图片缓存\n     *\n     * @param key\n     * @param bitmap\n     */\n    public void putBitmapToMemoryCache(Uri key, Bitmap bitmap) {\n        if (mMemoryCache.get(key) == null) {\n            if (key != null && bitmap != null) {\n                Bitmap resizeBmp = bitmap;\n                int height = bitmap.getHeight();\n                int width = bitmap.getWidth();\n                //按规格压缩图片\n                if (width > 640) {\n                    float scale = width / 640.0f;\n                    int resizeHeight = (int) (height / scale);\n                    resizeBmp = ThumbnailUtils.extractThumbnail(bitmap, 640, resizeHeight);\n                }\n                mMemoryCache.put(key, resizeBmp);\n            }\n        }\n    }\n\n    /**\n     * 压缩后的图像字节\n     *\n     * @param key\n     * @return\n     */\n    public byte[] getResizeBmpFromMemoryCache(Uri key) {\n        Bitmap bmp = mMemoryCache.get(key);\n        if (null == bmp) {\n            return null;\n        }\n        ByteArrayOutputStream output = new ByteArrayOutputStream();//初始化一个流对象\n        bmp.compress(Bitmap.CompressFormat.PNG, 100, output);//把bitmap100%高质量压缩 到 output对象里\n        byte[] result = output.toByteArray();//转换成功了\n        try {\n            output.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    /**\n     * 清空缓存\n     */\n    public void clearCache() {\n        if (mMemoryCache != null) {\n            if (mMemoryCache.size() > 0) {\n                mMemoryCache.evictAll();\n            }\n        }\n    }\n}\n```\n\n2.调用接口,上传图片.\n(注意Request的写法)\n```\npublic Map<String, RequestBody> getParams(File file, byte[] fileBytes){\n  Map<String, RequestBody> params = new HashMap<>();\n  RequestBody uid_body = RequestBody.create(MediaType.parse(\"text/plain\"), CommUtil.getUid());\n  RequestBody token_body = RequestBody.create(MediaType.parse(\"text/plain\"), CommUtil.getToken());\n  RequestBody file_body = (null == fileBytes) ? RequestBody.create(MediaType.parse(\"image/*\"), file)\n   :RequestBody.create(MediaType.parse(\"image/*\"), fileBytes);\n  params.put(\"uid\", uid_body);\n  params.put(\"token\", token_body);\n  params.put(\"file\\\";filename=\\\"\" + file.getName() + \"\", file_body);\n}\n```\n","slug":"一套临时使用的图片压缩缓存上传方案","published":1,"updated":"2017-03-11T02:46:27.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dmy000wvj2zpo4jiy6a","content":"<p>最近项目在做一个类似于微信发送朋友圈的功能.</p>\n<p>其中涉及图片的压缩缓存,接口上传图片资源,所有这里记录一下自己使用的方案.</p>\n<p>1.图片的压缩缓存,见代码<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 图片压缩大小并缓存工具类</div><div class=\"line\"> * Created by wong on 16-8-25.</div><div class=\"line\"> */</div><div class=\"line\">public class ResizePicCacheHelper &#123;</div><div class=\"line\">    private static final int MAXMEMONRY = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class=\"line\">    private static volatile ResizePicCacheHelper instance = null;</div><div class=\"line\">    //采用内存缓存</div><div class=\"line\">    private LruCache&lt;Uri, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\">    private ResizePicCacheHelper() &#123;</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static ResizePicCacheHelper getInstance() &#123;</div><div class=\"line\">        if (null == instance) &#123;</div><div class=\"line\">            synchronized (ResizePicCacheHelper.class) &#123;</div><div class=\"line\">                if (null == instance) &#123;</div><div class=\"line\">                    instance = new ResizePicCacheHelper();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void init() &#123;</div><div class=\"line\">        if (mMemoryCache == null) &#123;</div><div class=\"line\">            mMemoryCache = new LruCache&lt;Uri, Bitmap&gt;(MAXMEMONRY / 8) &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                protected int sizeOf(Uri key, Bitmap bitmap) &#123;</div><div class=\"line\">                    // 重写此方法来衡量每张图片的大小，默认返回图片数量。</div><div class=\"line\">                    return bitmap.getRowBytes() * bitmap.getHeight() / 1024;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 添加图片缓存</div><div class=\"line\">     *</div><div class=\"line\">     * @param key</div><div class=\"line\">     * @param bitmap</div><div class=\"line\">     */</div><div class=\"line\">    public void putBitmapToMemoryCache(Uri key, Bitmap bitmap) &#123;</div><div class=\"line\">        if (mMemoryCache.get(key) == null) &#123;</div><div class=\"line\">            if (key != null &amp;&amp; bitmap != null) &#123;</div><div class=\"line\">                Bitmap resizeBmp = bitmap;</div><div class=\"line\">                int height = bitmap.getHeight();</div><div class=\"line\">                int width = bitmap.getWidth();</div><div class=\"line\">                //按规格压缩图片</div><div class=\"line\">                if (width &gt; 640) &#123;</div><div class=\"line\">                    float scale = width / 640.0f;</div><div class=\"line\">                    int resizeHeight = (int) (height / scale);</div><div class=\"line\">                    resizeBmp = ThumbnailUtils.extractThumbnail(bitmap, 640, resizeHeight);</div><div class=\"line\">                &#125;</div><div class=\"line\">                mMemoryCache.put(key, resizeBmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 压缩后的图像字节</div><div class=\"line\">     *</div><div class=\"line\">     * @param key</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public byte[] getResizeBmpFromMemoryCache(Uri key) &#123;</div><div class=\"line\">        Bitmap bmp = mMemoryCache.get(key);</div><div class=\"line\">        if (null == bmp) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ByteArrayOutputStream output = new ByteArrayOutputStream();//初始化一个流对象</div><div class=\"line\">        bmp.compress(Bitmap.CompressFormat.PNG, 100, output);//把bitmap100%高质量压缩 到 output对象里</div><div class=\"line\">        byte[] result = output.toByteArray();//转换成功了</div><div class=\"line\">        try &#123;</div><div class=\"line\">            output.close();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 清空缓存</div><div class=\"line\">     */</div><div class=\"line\">    public void clearCache() &#123;</div><div class=\"line\">        if (mMemoryCache != null) &#123;</div><div class=\"line\">            if (mMemoryCache.size() &gt; 0) &#123;</div><div class=\"line\">                mMemoryCache.evictAll();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.调用接口,上传图片.<br>(注意Request的写法)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Map&lt;String, RequestBody&gt; getParams(File file, byte[] fileBytes)&#123;</div><div class=\"line\">  Map&lt;String, RequestBody&gt; params = new HashMap&lt;&gt;();</div><div class=\"line\">  RequestBody uid_body = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), CommUtil.getUid());</div><div class=\"line\">  RequestBody token_body = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), CommUtil.getToken());</div><div class=\"line\">  RequestBody file_body = (null == fileBytes) ? RequestBody.create(MediaType.parse(&quot;image/*&quot;), file)</div><div class=\"line\">   :RequestBody.create(MediaType.parse(&quot;image/*&quot;), fileBytes);</div><div class=\"line\">  params.put(&quot;uid&quot;, uid_body);</div><div class=\"line\">  params.put(&quot;token&quot;, token_body);</div><div class=\"line\">  params.put(&quot;file\\&quot;;filename=\\&quot;&quot; + file.getName() + &quot;&quot;, file_body);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>最近项目在做一个类似于微信发送朋友圈的功能.</p>\n<p>其中涉及图片的压缩缓存,接口上传图片资源,所有这里记录一下自己使用的方案.</p>\n<p>1.图片的压缩缓存,见代码<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 图片压缩大小并缓存工具类</div><div class=\"line\"> * Created by wong on 16-8-25.</div><div class=\"line\"> */</div><div class=\"line\">public class ResizePicCacheHelper &#123;</div><div class=\"line\">    private static final int MAXMEMONRY = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class=\"line\">    private static volatile ResizePicCacheHelper instance = null;</div><div class=\"line\">    //采用内存缓存</div><div class=\"line\">    private LruCache&lt;Uri, Bitmap&gt; mMemoryCache;</div><div class=\"line\"></div><div class=\"line\">    private ResizePicCacheHelper() &#123;</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static ResizePicCacheHelper getInstance() &#123;</div><div class=\"line\">        if (null == instance) &#123;</div><div class=\"line\">            synchronized (ResizePicCacheHelper.class) &#123;</div><div class=\"line\">                if (null == instance) &#123;</div><div class=\"line\">                    instance = new ResizePicCacheHelper();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void init() &#123;</div><div class=\"line\">        if (mMemoryCache == null) &#123;</div><div class=\"line\">            mMemoryCache = new LruCache&lt;Uri, Bitmap&gt;(MAXMEMONRY / 8) &#123;</div><div class=\"line\">                @Override</div><div class=\"line\">                protected int sizeOf(Uri key, Bitmap bitmap) &#123;</div><div class=\"line\">                    // 重写此方法来衡量每张图片的大小，默认返回图片数量。</div><div class=\"line\">                    return bitmap.getRowBytes() * bitmap.getHeight() / 1024;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 添加图片缓存</div><div class=\"line\">     *</div><div class=\"line\">     * @param key</div><div class=\"line\">     * @param bitmap</div><div class=\"line\">     */</div><div class=\"line\">    public void putBitmapToMemoryCache(Uri key, Bitmap bitmap) &#123;</div><div class=\"line\">        if (mMemoryCache.get(key) == null) &#123;</div><div class=\"line\">            if (key != null &amp;&amp; bitmap != null) &#123;</div><div class=\"line\">                Bitmap resizeBmp = bitmap;</div><div class=\"line\">                int height = bitmap.getHeight();</div><div class=\"line\">                int width = bitmap.getWidth();</div><div class=\"line\">                //按规格压缩图片</div><div class=\"line\">                if (width &gt; 640) &#123;</div><div class=\"line\">                    float scale = width / 640.0f;</div><div class=\"line\">                    int resizeHeight = (int) (height / scale);</div><div class=\"line\">                    resizeBmp = ThumbnailUtils.extractThumbnail(bitmap, 640, resizeHeight);</div><div class=\"line\">                &#125;</div><div class=\"line\">                mMemoryCache.put(key, resizeBmp);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 压缩后的图像字节</div><div class=\"line\">     *</div><div class=\"line\">     * @param key</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    public byte[] getResizeBmpFromMemoryCache(Uri key) &#123;</div><div class=\"line\">        Bitmap bmp = mMemoryCache.get(key);</div><div class=\"line\">        if (null == bmp) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ByteArrayOutputStream output = new ByteArrayOutputStream();//初始化一个流对象</div><div class=\"line\">        bmp.compress(Bitmap.CompressFormat.PNG, 100, output);//把bitmap100%高质量压缩 到 output对象里</div><div class=\"line\">        byte[] result = output.toByteArray();//转换成功了</div><div class=\"line\">        try &#123;</div><div class=\"line\">            output.close();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 清空缓存</div><div class=\"line\">     */</div><div class=\"line\">    public void clearCache() &#123;</div><div class=\"line\">        if (mMemoryCache != null) &#123;</div><div class=\"line\">            if (mMemoryCache.size() &gt; 0) &#123;</div><div class=\"line\">                mMemoryCache.evictAll();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.调用接口,上传图片.<br>(注意Request的写法)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Map&lt;String, RequestBody&gt; getParams(File file, byte[] fileBytes)&#123;</div><div class=\"line\">  Map&lt;String, RequestBody&gt; params = new HashMap&lt;&gt;();</div><div class=\"line\">  RequestBody uid_body = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), CommUtil.getUid());</div><div class=\"line\">  RequestBody token_body = RequestBody.create(MediaType.parse(&quot;text/plain&quot;), CommUtil.getToken());</div><div class=\"line\">  RequestBody file_body = (null == fileBytes) ? RequestBody.create(MediaType.parse(&quot;image/*&quot;), file)</div><div class=\"line\">   :RequestBody.create(MediaType.parse(&quot;image/*&quot;), fileBytes);</div><div class=\"line\">  params.put(&quot;uid&quot;, uid_body);</div><div class=\"line\">  params.put(&quot;token&quot;, token_body);</div><div class=\"line\">  params.put(&quot;file\\&quot;;filename=\\&quot;&quot; + file.getName() + &quot;&quot;, file_body);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"关于通知栏使用权的介绍","date":"2017-02-20T12:16:32.000Z","_content":"通知栏使用权时API 18,之后引入的一个功能.\n\n通过设置允许App使用通知栏使用权,开发者可以监听到通知栏的消息状态,以及操作消息等.\n最重要的是,也是自己在项目中用到的一点,可以使得进程常驻,保证app的存活.\n\n那么我们该如何使用这个通知栏使用权呢?\n<!--more-->\n1.创建一个Service继承NotificationListenerService\n```\n@SuppressLint(\"NewApi\")\npublic class NotifyMonitorService extends NotificationListenerService {\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        //TODO , 可以在此处启动一个本地服务\n        startService(new Intent(App.sContext, LocalPushService.class));\n        return super.onBind(intent);\n    }\n\n    @Override\n    public void onInterruptionFilterChanged(int interruptionFilter) {\n        super.onInterruptionFilterChanged(interruptionFilter);\n    }\n\n    @Override\n    public void onListenerConnected() {\n        super.onListenerConnected();\n    }\n\n    @Override\n    public void onNotificationRemoved(StatusBarNotification sbn) {\n        Bundle extras = sbn.getNotification().extras;\n        String appName = sbn.getPackageName();\n        String title = extras.getString(Notification.EXTRA_TITLE);\n        String content = extras.getString(Notification.EXTRA_TEXT);\n    }\n}\n```\n2.在AndroidManifest.xml中添加配置\n```\n<!-- 通知栏监听器-->\n<service\n    android:name=\".services.NotifyMonitorService\"\n    android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\"\n    android:process=\":notify\">\n    <intent-filter>\n        <action android:name=\"android.service.notification.NotificationListenerService\" />\n    </intent-filter>\n</service>\n```\n3.跳转通知栏使用权打开界面\n```\nIntent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\nstartActivity(intent);\n```\n\n4.判断是否已经开启通知栏使用权\n```\nprivate boolean isNotifiMonitorOpen() {\n  String pkgName = getPackageName();\n  final String flat = Settings.Secure.getString(getContentResolver(), \"enabled_notification_listeners\");\n  if (!TextUtils.isEmpty(flat)) {\n    final String[] names = flat.split(\":\");\n    for (int i = 0; i < names.length; i++) {\n      final ComponentName cn = ComponentName.unflattenFromString(names[i]);\n      if (cn != null) {\n        if (TextUtils.equals(pkgName, cn.getPackageName())) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n```\n","source":"_posts/关于通知栏使用权的介绍.md","raw":"---\ntitle: 关于通知栏使用权的介绍\ndate: 2017-02-20 20:16:32\ntags: Android\n---\n通知栏使用权时API 18,之后引入的一个功能.\n\n通过设置允许App使用通知栏使用权,开发者可以监听到通知栏的消息状态,以及操作消息等.\n最重要的是,也是自己在项目中用到的一点,可以使得进程常驻,保证app的存活.\n\n那么我们该如何使用这个通知栏使用权呢?\n<!--more-->\n1.创建一个Service继承NotificationListenerService\n```\n@SuppressLint(\"NewApi\")\npublic class NotifyMonitorService extends NotificationListenerService {\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        //TODO , 可以在此处启动一个本地服务\n        startService(new Intent(App.sContext, LocalPushService.class));\n        return super.onBind(intent);\n    }\n\n    @Override\n    public void onInterruptionFilterChanged(int interruptionFilter) {\n        super.onInterruptionFilterChanged(interruptionFilter);\n    }\n\n    @Override\n    public void onListenerConnected() {\n        super.onListenerConnected();\n    }\n\n    @Override\n    public void onNotificationRemoved(StatusBarNotification sbn) {\n        Bundle extras = sbn.getNotification().extras;\n        String appName = sbn.getPackageName();\n        String title = extras.getString(Notification.EXTRA_TITLE);\n        String content = extras.getString(Notification.EXTRA_TEXT);\n    }\n}\n```\n2.在AndroidManifest.xml中添加配置\n```\n<!-- 通知栏监听器-->\n<service\n    android:name=\".services.NotifyMonitorService\"\n    android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\"\n    android:process=\":notify\">\n    <intent-filter>\n        <action android:name=\"android.service.notification.NotificationListenerService\" />\n    </intent-filter>\n</service>\n```\n3.跳转通知栏使用权打开界面\n```\nIntent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\nstartActivity(intent);\n```\n\n4.判断是否已经开启通知栏使用权\n```\nprivate boolean isNotifiMonitorOpen() {\n  String pkgName = getPackageName();\n  final String flat = Settings.Secure.getString(getContentResolver(), \"enabled_notification_listeners\");\n  if (!TextUtils.isEmpty(flat)) {\n    final String[] names = flat.split(\":\");\n    for (int i = 0; i < names.length; i++) {\n      final ComponentName cn = ComponentName.unflattenFromString(names[i]);\n      if (cn != null) {\n        if (TextUtils.equals(pkgName, cn.getPackageName())) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n```\n","slug":"关于通知栏使用权的介绍","published":1,"updated":"2017-03-11T02:44:30.171Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dn3000yvj2z40wz2klv","content":"<p>通知栏使用权时API 18,之后引入的一个功能.</p>\n<p>通过设置允许App使用通知栏使用权,开发者可以监听到通知栏的消息状态,以及操作消息等.<br>最重要的是,也是自己在项目中用到的一点,可以使得进程常驻,保证app的存活.</p>\n<p>那么我们该如何使用这个通知栏使用权呢?<br><a id=\"more\"></a><br>1.创建一个Service继承NotificationListenerService<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SuppressLint(&quot;NewApi&quot;)</div><div class=\"line\">public class NotifyMonitorService extends NotificationListenerService &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public IBinder onBind(Intent intent) &#123;</div><div class=\"line\">        //TODO , 可以在此处启动一个本地服务</div><div class=\"line\">        startService(new Intent(App.sContext, LocalPushService.class));</div><div class=\"line\">        return super.onBind(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onInterruptionFilterChanged(int interruptionFilter) &#123;</div><div class=\"line\">        super.onInterruptionFilterChanged(interruptionFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onListenerConnected() &#123;</div><div class=\"line\">        super.onListenerConnected();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onNotificationRemoved(StatusBarNotification sbn) &#123;</div><div class=\"line\">        Bundle extras = sbn.getNotification().extras;</div><div class=\"line\">        String appName = sbn.getPackageName();</div><div class=\"line\">        String title = extras.getString(Notification.EXTRA_TITLE);</div><div class=\"line\">        String content = extras.getString(Notification.EXTRA_TEXT);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.在AndroidManifest.xml中添加配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 通知栏监听器--&gt;</div><div class=\"line\">&lt;service</div><div class=\"line\">    android:name=&quot;.services.NotifyMonitorService&quot;</div><div class=\"line\">    android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;</div><div class=\"line\">    android:process=&quot;:notify&quot;&gt;</div><div class=\"line\">    &lt;intent-filter&gt;</div><div class=\"line\">        &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt;</div><div class=\"line\">    &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/service&gt;</div></pre></td></tr></table></figure></p>\n<p>3.跳转通知栏使用权打开界面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = new Intent(&quot;android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS&quot;);</div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p>4.判断是否已经开启通知栏使用权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">private boolean isNotifiMonitorOpen() &#123;</div><div class=\"line\">  String pkgName = getPackageName();</div><div class=\"line\">  final String flat = Settings.Secure.getString(getContentResolver(), &quot;enabled_notification_listeners&quot;);</div><div class=\"line\">  if (!TextUtils.isEmpty(flat)) &#123;</div><div class=\"line\">    final String[] names = flat.split(&quot;:&quot;);</div><div class=\"line\">    for (int i = 0; i &lt; names.length; i++) &#123;</div><div class=\"line\">      final ComponentName cn = ComponentName.unflattenFromString(names[i]);</div><div class=\"line\">      if (cn != null) &#123;</div><div class=\"line\">        if (TextUtils.equals(pkgName, cn.getPackageName())) &#123;</div><div class=\"line\">          return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>通知栏使用权时API 18,之后引入的一个功能.</p>\n<p>通过设置允许App使用通知栏使用权,开发者可以监听到通知栏的消息状态,以及操作消息等.<br>最重要的是,也是自己在项目中用到的一点,可以使得进程常驻,保证app的存活.</p>\n<p>那么我们该如何使用这个通知栏使用权呢?<br>","more":"<br>1.创建一个Service继承NotificationListenerService<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@SuppressLint(&quot;NewApi&quot;)</div><div class=\"line\">public class NotifyMonitorService extends NotificationListenerService &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public IBinder onBind(Intent intent) &#123;</div><div class=\"line\">        //TODO , 可以在此处启动一个本地服务</div><div class=\"line\">        startService(new Intent(App.sContext, LocalPushService.class));</div><div class=\"line\">        return super.onBind(intent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onInterruptionFilterChanged(int interruptionFilter) &#123;</div><div class=\"line\">        super.onInterruptionFilterChanged(interruptionFilter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onListenerConnected() &#123;</div><div class=\"line\">        super.onListenerConnected();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onNotificationRemoved(StatusBarNotification sbn) &#123;</div><div class=\"line\">        Bundle extras = sbn.getNotification().extras;</div><div class=\"line\">        String appName = sbn.getPackageName();</div><div class=\"line\">        String title = extras.getString(Notification.EXTRA_TITLE);</div><div class=\"line\">        String content = extras.getString(Notification.EXTRA_TEXT);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.在AndroidManifest.xml中添加配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 通知栏监听器--&gt;</div><div class=\"line\">&lt;service</div><div class=\"line\">    android:name=&quot;.services.NotifyMonitorService&quot;</div><div class=\"line\">    android:permission=&quot;android.permission.BIND_NOTIFICATION_LISTENER_SERVICE&quot;</div><div class=\"line\">    android:process=&quot;:notify&quot;&gt;</div><div class=\"line\">    &lt;intent-filter&gt;</div><div class=\"line\">        &lt;action android:name=&quot;android.service.notification.NotificationListenerService&quot; /&gt;</div><div class=\"line\">    &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/service&gt;</div></pre></td></tr></table></figure></p>\n<p>3.跳转通知栏使用权打开界面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent intent = new Intent(&quot;android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS&quot;);</div><div class=\"line\">startActivity(intent);</div></pre></td></tr></table></figure></p>\n<p>4.判断是否已经开启通知栏使用权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">private boolean isNotifiMonitorOpen() &#123;</div><div class=\"line\">  String pkgName = getPackageName();</div><div class=\"line\">  final String flat = Settings.Secure.getString(getContentResolver(), &quot;enabled_notification_listeners&quot;);</div><div class=\"line\">  if (!TextUtils.isEmpty(flat)) &#123;</div><div class=\"line\">    final String[] names = flat.split(&quot;:&quot;);</div><div class=\"line\">    for (int i = 0; i &lt; names.length; i++) &#123;</div><div class=\"line\">      final ComponentName cn = ComponentName.unflattenFromString(names[i]);</div><div class=\"line\">      if (cn != null) &#123;</div><div class=\"line\">        if (TextUtils.equals(pkgName, cn.getPackageName())) &#123;</div><div class=\"line\">          return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"四大组件之Activity","date":"2016-10-15T11:48:09.000Z","_content":"\nActivity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。\n\n1.生命周期\n正常的一次启动到结束 ：onCreate -> onStart -> onResume -> onPause -> onStop -> onDestory\n\n切换到后台 : onPause -> onStop\n从后台回来 : onRestart ->onStart -> onResume\n\n从A切到B ： A-onPause -> B-onCreate -> B-onStart -> B-onResume -> A-onStop\n从B返回A ： B-onPause -> A-onRestart -> A-onStart -> A-onResume -> B-onStop -> B-onDestroy\n\n横竖屏切换 ： onSaveInstanceState -> onPause -> onStop -> onDestory -> onCreate -> onStart -> onRestoreInstanceState -> onResume\n<!--more-->\n2.启动模式\n（在AndroidManifest.xml中的android:launchMode=\"singleTask\"配置）\n (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中\n (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个\n (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中\n (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用\n\n3.闪屏页的快速启动\n  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，\n  让app启动时activity为展示时先显示theme中的背景图，\n  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。\n\n  1)在AndroidManifest中为闪屏页设置Theme：\n  ```\n  android:theme=\"@style/AppSplash\"\n  ```\n\n  2)AppSplash如下：\n  ```\n  <style name=\"AppSplash\">\n    <item name=\"android:windowBackground\">@drawable/layer_logo_page</item>\n  </style>\n  ```\n\n  3)layer_logo_page如下：\n  ```\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <color android:color=\"@color/C15_white\" />\n    </item>\n    <item android:bottom=\"35dp\">\n        <bitmap\n            android:gravity=\"center_horizontal|bottom\"\n            android:src=\"@drawable/icon_logo\" />\n    </item>\n  </layer-list>\n  ```\n\n4.横竖屏\n  1)如何禁止横竖屏切换时生命周期变换\n  AndroidManifest中为Activity添加配置：\n```\n  android:configChanges=\"orientation|keyboardHidden|screenSize\"\n```\n  2)如何禁止横屏：\n  AndroidManifest中为Activity添加配置：\n```\n   android:screenOrientation=\"portrait\"\n```\n  3)Java代码中设置横竖屏：\n  // 如果是竖屏则转为横屏\n```\n  if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {\n    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n  }\n```\n\n  4)横竖屏变换时通常会有回调：\n```\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n  }\n```\n\n5.Activity设置为首页\n  为Activity配置如下代码：\n```\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n```\n6.启动Actitiy的几种方式\n","source":"_posts/四大组件之Activity.md","raw":"---\ntitle: 四大组件之Activity\ndate: 2016-10-15 19:48:09\ntags: 四大组件之Activity\n---\n\nActivity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。\n\n1.生命周期\n正常的一次启动到结束 ：onCreate -> onStart -> onResume -> onPause -> onStop -> onDestory\n\n切换到后台 : onPause -> onStop\n从后台回来 : onRestart ->onStart -> onResume\n\n从A切到B ： A-onPause -> B-onCreate -> B-onStart -> B-onResume -> A-onStop\n从B返回A ： B-onPause -> A-onRestart -> A-onStart -> A-onResume -> B-onStop -> B-onDestroy\n\n横竖屏切换 ： onSaveInstanceState -> onPause -> onStop -> onDestory -> onCreate -> onStart -> onRestoreInstanceState -> onResume\n<!--more-->\n2.启动模式\n（在AndroidManifest.xml中的android:launchMode=\"singleTask\"配置）\n (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中\n (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个\n (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中\n (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用\n\n3.闪屏页的快速启动\n  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，\n  让app启动时activity为展示时先显示theme中的背景图，\n  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。\n\n  1)在AndroidManifest中为闪屏页设置Theme：\n  ```\n  android:theme=\"@style/AppSplash\"\n  ```\n\n  2)AppSplash如下：\n  ```\n  <style name=\"AppSplash\">\n    <item name=\"android:windowBackground\">@drawable/layer_logo_page</item>\n  </style>\n  ```\n\n  3)layer_logo_page如下：\n  ```\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <color android:color=\"@color/C15_white\" />\n    </item>\n    <item android:bottom=\"35dp\">\n        <bitmap\n            android:gravity=\"center_horizontal|bottom\"\n            android:src=\"@drawable/icon_logo\" />\n    </item>\n  </layer-list>\n  ```\n\n4.横竖屏\n  1)如何禁止横竖屏切换时生命周期变换\n  AndroidManifest中为Activity添加配置：\n```\n  android:configChanges=\"orientation|keyboardHidden|screenSize\"\n```\n  2)如何禁止横屏：\n  AndroidManifest中为Activity添加配置：\n```\n   android:screenOrientation=\"portrait\"\n```\n  3)Java代码中设置横竖屏：\n  // 如果是竖屏则转为横屏\n```\n  if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {\n    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n  }\n```\n\n  4)横竖屏变换时通常会有回调：\n```\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n  }\n```\n\n5.Activity设置为首页\n  为Activity配置如下代码：\n```\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n```\n6.启动Actitiy的几种方式\n","slug":"四大组件之Activity","published":1,"updated":"2017-03-11T02:46:04.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dn80011vj2z2xfzybc6","content":"<p>Activity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。</p>\n<p>1.生命周期<br>正常的一次启动到结束 ：onCreate -&gt; onStart -&gt; onResume -&gt; onPause -&gt; onStop -&gt; onDestory</p>\n<p>切换到后台 : onPause -&gt; onStop<br>从后台回来 : onRestart -&gt;onStart -&gt; onResume</p>\n<p>从A切到B ： A-onPause -&gt; B-onCreate -&gt; B-onStart -&gt; B-onResume -&gt; A-onStop<br>从B返回A ： B-onPause -&gt; A-onRestart -&gt; A-onStart -&gt; A-onResume -&gt; B-onStop -&gt; B-onDestroy</p>\n<p>横竖屏切换 ： onSaveInstanceState -&gt; onPause -&gt; onStop -&gt; onDestory -&gt; onCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume<br><a id=\"more\"></a><br>2.启动模式<br>（在AndroidManifest.xml中的android:launchMode=”singleTask”配置）<br> (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中<br> (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个<br> (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中<br> (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用</p>\n<p>3.闪屏页的快速启动<br>  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，<br>  让app启动时activity为展示时先显示theme中的背景图，<br>  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。</p>\n<p>  1)在AndroidManifest中为闪屏页设置Theme：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:theme=&quot;@style/AppSplash&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)AppSplash如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppSplash&quot;&gt;</div><div class=\"line\">  &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/layer_logo_page&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>  3)layer_logo_page如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">  &lt;item&gt;</div><div class=\"line\">      &lt;color android:color=&quot;@color/C15_white&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">  &lt;item android:bottom=&quot;35dp&quot;&gt;</div><div class=\"line\">      &lt;bitmap</div><div class=\"line\">          android:gravity=&quot;center_horizontal|bottom&quot;</div><div class=\"line\">          android:src=&quot;@drawable/icon_logo&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">&lt;/layer-list&gt;</div></pre></td></tr></table></figure></p>\n<p>4.横竖屏<br>  1)如何禁止横竖屏切换时生命周期变换<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)如何禁止横屏：<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:screenOrientation=&quot;portrait&quot;</div></pre></td></tr></table></figure></p>\n<p>  3)Java代码中设置横竖屏：<br>  // 如果是竖屏则转为横屏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) &#123;</div><div class=\"line\">  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  4)横竖屏变换时通常会有回调：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void onConfigurationChanged(Configuration newConfig) &#123;</div><div class=\"line\">  super.onConfigurationChanged(newConfig);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.Activity设置为首页<br>  为Activity配置如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class=\"line\">  &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>\n<p>6.启动Actitiy的几种方式</p>\n","excerpt":"<p>Activity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。</p>\n<p>1.生命周期<br>正常的一次启动到结束 ：onCreate -&gt; onStart -&gt; onResume -&gt; onPause -&gt; onStop -&gt; onDestory</p>\n<p>切换到后台 : onPause -&gt; onStop<br>从后台回来 : onRestart -&gt;onStart -&gt; onResume</p>\n<p>从A切到B ： A-onPause -&gt; B-onCreate -&gt; B-onStart -&gt; B-onResume -&gt; A-onStop<br>从B返回A ： B-onPause -&gt; A-onRestart -&gt; A-onStart -&gt; A-onResume -&gt; B-onStop -&gt; B-onDestroy</p>\n<p>横竖屏切换 ： onSaveInstanceState -&gt; onPause -&gt; onStop -&gt; onDestory -&gt; onCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume<br>","more":"<br>2.启动模式<br>（在AndroidManifest.xml中的android:launchMode=”singleTask”配置）<br> (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中<br> (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个<br> (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中<br> (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用</p>\n<p>3.闪屏页的快速启动<br>  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，<br>  让app启动时activity为展示时先显示theme中的背景图，<br>  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。</p>\n<p>  1)在AndroidManifest中为闪屏页设置Theme：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:theme=&quot;@style/AppSplash&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)AppSplash如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppSplash&quot;&gt;</div><div class=\"line\">  &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/layer_logo_page&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>  3)layer_logo_page如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">  &lt;item&gt;</div><div class=\"line\">      &lt;color android:color=&quot;@color/C15_white&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">  &lt;item android:bottom=&quot;35dp&quot;&gt;</div><div class=\"line\">      &lt;bitmap</div><div class=\"line\">          android:gravity=&quot;center_horizontal|bottom&quot;</div><div class=\"line\">          android:src=&quot;@drawable/icon_logo&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">&lt;/layer-list&gt;</div></pre></td></tr></table></figure></p>\n<p>4.横竖屏<br>  1)如何禁止横竖屏切换时生命周期变换<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)如何禁止横屏：<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:screenOrientation=&quot;portrait&quot;</div></pre></td></tr></table></figure></p>\n<p>  3)Java代码中设置横竖屏：<br>  // 如果是竖屏则转为横屏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) &#123;</div><div class=\"line\">  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  4)横竖屏变换时通常会有回调：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void onConfigurationChanged(Configuration newConfig) &#123;</div><div class=\"line\">  super.onConfigurationChanged(newConfig);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.Activity设置为首页<br>  为Activity配置如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class=\"line\">  &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>\n<p>6.启动Actitiy的几种方式</p>"},{"title":"四大组件之BroadcastReceiver","date":"2016-10-18T12:51:00.000Z","_content":">BroadcastReceiver的作用有些类似全局的事件监听器，当整个手机的某一个APP或者手机自身触发事件，BroadcastReceiver接受并且处理，而且这种信号程序自身也可以创建。\n\n一.启动方式\n1.静态注册\n在AndroidManifest.xml中注册,需要填写action即广播地址.\n是常驻型,即使应用退出依旧可以接收到广播.\n```\n<receiver android:name=\".MyBroadcastReceiver\">  \n    <intent-filter>  \n        <action android:name=\"android.intent.action.MyBroadcastReceiver\"></action>  \n    </intent-filter>  \n</receiver>\n```\n<!--more-->\n2.动态注册\n在代码中注册,非\"常驻型\",不用时需调用unregisterReceiver否则会报错.\n```\n注册:\nMyBroadcastReceiver receiver=new MyBroadcastReceiver();\nIntentFilter filter=new IntentFilter();  \nfilter.addAction(\"android.intent.action.MyBroadcastReceiver\");  \nregisterReceiver(receiver, filter);  \n\n解除注册:\nunregisterReceiver(receiver);\n```\n\n二.广播类型\n1.无序广播\n各个广播直接的接收是异步的,彼此无影响\nsendBroadcast() 发送广播\nabortBroadcast() 终止广播\n\n2.有序广播\n按优先级获取, priority(-1000到1000),\nsendOrderedBroadcast() 发送广播\nabortBroadcast() 终止广播\n1)setResultExtras 传递给下一个\n2)getResultExtras 获取上一个\n","source":"_posts/四大组件之BroadcastReceiver.md","raw":"---\ntitle: 四大组件之BroadcastReceiver\ndate: 2016-10-18 20:51:00\ntags: Android\n---\n>BroadcastReceiver的作用有些类似全局的事件监听器，当整个手机的某一个APP或者手机自身触发事件，BroadcastReceiver接受并且处理，而且这种信号程序自身也可以创建。\n\n一.启动方式\n1.静态注册\n在AndroidManifest.xml中注册,需要填写action即广播地址.\n是常驻型,即使应用退出依旧可以接收到广播.\n```\n<receiver android:name=\".MyBroadcastReceiver\">  \n    <intent-filter>  \n        <action android:name=\"android.intent.action.MyBroadcastReceiver\"></action>  \n    </intent-filter>  \n</receiver>\n```\n<!--more-->\n2.动态注册\n在代码中注册,非\"常驻型\",不用时需调用unregisterReceiver否则会报错.\n```\n注册:\nMyBroadcastReceiver receiver=new MyBroadcastReceiver();\nIntentFilter filter=new IntentFilter();  \nfilter.addAction(\"android.intent.action.MyBroadcastReceiver\");  \nregisterReceiver(receiver, filter);  \n\n解除注册:\nunregisterReceiver(receiver);\n```\n\n二.广播类型\n1.无序广播\n各个广播直接的接收是异步的,彼此无影响\nsendBroadcast() 发送广播\nabortBroadcast() 终止广播\n\n2.有序广播\n按优先级获取, priority(-1000到1000),\nsendOrderedBroadcast() 发送广播\nabortBroadcast() 终止广播\n1)setResultExtras 传递给下一个\n2)getResultExtras 获取上一个\n","slug":"四大组件之BroadcastReceiver","published":1,"updated":"2017-03-11T02:46:12.618Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dne0013vj2zlqci2ki0","content":"<blockquote>\n<p>BroadcastReceiver的作用有些类似全局的事件监听器，当整个手机的某一个APP或者手机自身触发事件，BroadcastReceiver接受并且处理，而且这种信号程序自身也可以创建。</p>\n</blockquote>\n<p>一.启动方式<br>1.静态注册<br>在AndroidManifest.xml中注册,需要填写action即广播地址.<br>是常驻型,即使应用退出依旧可以接收到广播.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;receiver android:name=&quot;.MyBroadcastReceiver&quot;&gt;  </div><div class=\"line\">    &lt;intent-filter&gt;  </div><div class=\"line\">        &lt;action android:name=&quot;android.intent.action.MyBroadcastReceiver&quot;&gt;&lt;/action&gt;  </div><div class=\"line\">    &lt;/intent-filter&gt;  </div><div class=\"line\">&lt;/receiver&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.动态注册<br>在代码中注册,非”常驻型”,不用时需调用unregisterReceiver否则会报错.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">注册:</div><div class=\"line\">MyBroadcastReceiver receiver=new MyBroadcastReceiver();</div><div class=\"line\">IntentFilter filter=new IntentFilter();  </div><div class=\"line\">filter.addAction(&quot;android.intent.action.MyBroadcastReceiver&quot;);  </div><div class=\"line\">registerReceiver(receiver, filter);  </div><div class=\"line\"></div><div class=\"line\">解除注册:</div><div class=\"line\">unregisterReceiver(receiver);</div></pre></td></tr></table></figure></p>\n<p>二.广播类型<br>1.无序广播<br>各个广播直接的接收是异步的,彼此无影响<br>sendBroadcast() 发送广播<br>abortBroadcast() 终止广播</p>\n<p>2.有序广播<br>按优先级获取, priority(-1000到1000),<br>sendOrderedBroadcast() 发送广播<br>abortBroadcast() 终止广播<br>1)setResultExtras 传递给下一个<br>2)getResultExtras 获取上一个</p>\n","excerpt":"<blockquote>\n<p>BroadcastReceiver的作用有些类似全局的事件监听器，当整个手机的某一个APP或者手机自身触发事件，BroadcastReceiver接受并且处理，而且这种信号程序自身也可以创建。</p>\n</blockquote>\n<p>一.启动方式<br>1.静态注册<br>在AndroidManifest.xml中注册,需要填写action即广播地址.<br>是常驻型,即使应用退出依旧可以接收到广播.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;receiver android:name=&quot;.MyBroadcastReceiver&quot;&gt;  </div><div class=\"line\">    &lt;intent-filter&gt;  </div><div class=\"line\">        &lt;action android:name=&quot;android.intent.action.MyBroadcastReceiver&quot;&gt;&lt;/action&gt;  </div><div class=\"line\">    &lt;/intent-filter&gt;  </div><div class=\"line\">&lt;/receiver&gt;</div></pre></td></tr></table></figure></p>","more":"<p>2.动态注册<br>在代码中注册,非”常驻型”,不用时需调用unregisterReceiver否则会报错.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">注册:</div><div class=\"line\">MyBroadcastReceiver receiver=new MyBroadcastReceiver();</div><div class=\"line\">IntentFilter filter=new IntentFilter();  </div><div class=\"line\">filter.addAction(&quot;android.intent.action.MyBroadcastReceiver&quot;);  </div><div class=\"line\">registerReceiver(receiver, filter);  </div><div class=\"line\"></div><div class=\"line\">解除注册:</div><div class=\"line\">unregisterReceiver(receiver);</div></pre></td></tr></table></figure></p>\n<p>二.广播类型<br>1.无序广播<br>各个广播直接的接收是异步的,彼此无影响<br>sendBroadcast() 发送广播<br>abortBroadcast() 终止广播</p>\n<p>2.有序广播<br>按优先级获取, priority(-1000到1000),<br>sendOrderedBroadcast() 发送广播<br>abortBroadcast() 终止广播<br>1)setResultExtras 传递给下一个<br>2)getResultExtras 获取上一个</p>"},{"title":"四大组件之Service","date":"2016-10-16T12:32:13.000Z","_content":"Service是运行在主线程,在后台运行的一个组件.\n这里的后台指的是它的运行是完全不依赖UI的,即即使Activity销毁了,只要进程还在Service就在.\n处理耗时操作需开子线程,否则会ANR.\n需要在AndroidManifest.xml中注册.\n```\n<service\n    android:name=\".MyService\"\n    android:exported=\"true\" //是否需要对其他App开放,有intent-filter时默认值就是true\n    android:process=\":MyProcess\" > //指明此进程名称,可以单独运行在新的进程中\n    <intent-filter>\n        <action android:name=\"com.example.androidtest.myservice\" />\n    </intent-filter>\n</service>\n```\n<!--more-->\n1.Service类型\n1)普通Service\n运行在后台,优先级比较低.\n\n2)前台Service\n有一个正在运行的图标在系统的状态栏显示,类似于通知栏.\n```\npublic class MyService extends Service {  \n    public static final String TAG = \"MyService\";  \n    private MyBinder mBinder = new MyBinder();  \n    @Override  \n    public void onCreate() {  \n        super.onCreate();  \n        Notification notification = new Notification(R.drawable.ic_launcher,  \n                \"有通知到来\", System.currentTimeMillis());  \n        Intent notificationIntent = new Intent(this, MainActivity.class);  \n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,  \n                notificationIntent, 0);  \n        notification.setLatestEventInfo(this, \"这是通知的标题\", \"这是通知的内容\",  \n                pendingIntent);  \n        startForeground(1, notification);  \n        Log.d(TAG, \"onCreate() executed\");  \n    }  \n    .........  \n}  \n```\n3)IntentService\nService的一个子类,实现onHandlerIntent()方法,用于处理长期任务,并且是在新的线程中,\n处理完后会自动关闭.\n\n2.Service的生命周期\n两种启动方式\n1)startService (stopService结束)\nonCreate -> onStartCommand -> onDestory\n\n2)bindService (unbindService结束)\nonCreate -> onBind -> onUnBind -> onDestory\n","source":"_posts/四大组件之Service.md","raw":"---\ntitle: 四大组件之Service\ndate: 2016-10-16 20:32:13\ntags: Android\n---\nService是运行在主线程,在后台运行的一个组件.\n这里的后台指的是它的运行是完全不依赖UI的,即即使Activity销毁了,只要进程还在Service就在.\n处理耗时操作需开子线程,否则会ANR.\n需要在AndroidManifest.xml中注册.\n```\n<service\n    android:name=\".MyService\"\n    android:exported=\"true\" //是否需要对其他App开放,有intent-filter时默认值就是true\n    android:process=\":MyProcess\" > //指明此进程名称,可以单独运行在新的进程中\n    <intent-filter>\n        <action android:name=\"com.example.androidtest.myservice\" />\n    </intent-filter>\n</service>\n```\n<!--more-->\n1.Service类型\n1)普通Service\n运行在后台,优先级比较低.\n\n2)前台Service\n有一个正在运行的图标在系统的状态栏显示,类似于通知栏.\n```\npublic class MyService extends Service {  \n    public static final String TAG = \"MyService\";  \n    private MyBinder mBinder = new MyBinder();  \n    @Override  \n    public void onCreate() {  \n        super.onCreate();  \n        Notification notification = new Notification(R.drawable.ic_launcher,  \n                \"有通知到来\", System.currentTimeMillis());  \n        Intent notificationIntent = new Intent(this, MainActivity.class);  \n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,  \n                notificationIntent, 0);  \n        notification.setLatestEventInfo(this, \"这是通知的标题\", \"这是通知的内容\",  \n                pendingIntent);  \n        startForeground(1, notification);  \n        Log.d(TAG, \"onCreate() executed\");  \n    }  \n    .........  \n}  \n```\n3)IntentService\nService的一个子类,实现onHandlerIntent()方法,用于处理长期任务,并且是在新的线程中,\n处理完后会自动关闭.\n\n2.Service的生命周期\n两种启动方式\n1)startService (stopService结束)\nonCreate -> onStartCommand -> onDestory\n\n2)bindService (unbindService结束)\nonCreate -> onBind -> onUnBind -> onDestory\n","slug":"四大组件之Service","published":1,"updated":"2017-03-11T02:46:17.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dni0016vj2zrbxfmouf","content":"<p>Service是运行在主线程,在后台运行的一个组件.<br>这里的后台指的是它的运行是完全不依赖UI的,即即使Activity销毁了,只要进程还在Service就在.<br>处理耗时操作需开子线程,否则会ANR.<br>需要在AndroidManifest.xml中注册.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;service</div><div class=\"line\">    android:name=&quot;.MyService&quot;</div><div class=\"line\">    android:exported=&quot;true&quot; //是否需要对其他App开放,有intent-filter时默认值就是true</div><div class=\"line\">    android:process=&quot;:MyProcess&quot; &gt; //指明此进程名称,可以单独运行在新的进程中</div><div class=\"line\">    &lt;intent-filter&gt;</div><div class=\"line\">        &lt;action android:name=&quot;com.example.androidtest.myservice&quot; /&gt;</div><div class=\"line\">    &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/service&gt;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>1.Service类型<br>1)普通Service<br>运行在后台,优先级比较低.</p>\n<p>2)前台Service<br>有一个正在运行的图标在系统的状态栏显示,类似于通知栏.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyService extends Service &#123;  </div><div class=\"line\">    public static final String TAG = &quot;MyService&quot;;  </div><div class=\"line\">    private MyBinder mBinder = new MyBinder();  </div><div class=\"line\">    @Override  </div><div class=\"line\">    public void onCreate() &#123;  </div><div class=\"line\">        super.onCreate();  </div><div class=\"line\">        Notification notification = new Notification(R.drawable.ic_launcher,  </div><div class=\"line\">                &quot;有通知到来&quot;, System.currentTimeMillis());  </div><div class=\"line\">        Intent notificationIntent = new Intent(this, MainActivity.class);  </div><div class=\"line\">        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,  </div><div class=\"line\">                notificationIntent, 0);  </div><div class=\"line\">        notification.setLatestEventInfo(this, &quot;这是通知的标题&quot;, &quot;这是通知的内容&quot;,  </div><div class=\"line\">                pendingIntent);  </div><div class=\"line\">        startForeground(1, notification);  </div><div class=\"line\">        Log.d(TAG, &quot;onCreate() executed&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    .........  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3)IntentService<br>Service的一个子类,实现onHandlerIntent()方法,用于处理长期任务,并且是在新的线程中,<br>处理完后会自动关闭.</p>\n<p>2.Service的生命周期<br>两种启动方式<br>1)startService (stopService结束)<br>onCreate -&gt; onStartCommand -&gt; onDestory</p>\n<p>2)bindService (unbindService结束)<br>onCreate -&gt; onBind -&gt; onUnBind -&gt; onDestory</p>\n","excerpt":"<p>Service是运行在主线程,在后台运行的一个组件.<br>这里的后台指的是它的运行是完全不依赖UI的,即即使Activity销毁了,只要进程还在Service就在.<br>处理耗时操作需开子线程,否则会ANR.<br>需要在AndroidManifest.xml中注册.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;service</div><div class=\"line\">    android:name=&quot;.MyService&quot;</div><div class=\"line\">    android:exported=&quot;true&quot; //是否需要对其他App开放,有intent-filter时默认值就是true</div><div class=\"line\">    android:process=&quot;:MyProcess&quot; &gt; //指明此进程名称,可以单独运行在新的进程中</div><div class=\"line\">    &lt;intent-filter&gt;</div><div class=\"line\">        &lt;action android:name=&quot;com.example.androidtest.myservice&quot; /&gt;</div><div class=\"line\">    &lt;/intent-filter&gt;</div><div class=\"line\">&lt;/service&gt;</div></pre></td></tr></table></figure></p>","more":"<p>1.Service类型<br>1)普通Service<br>运行在后台,优先级比较低.</p>\n<p>2)前台Service<br>有一个正在运行的图标在系统的状态栏显示,类似于通知栏.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyService extends Service &#123;  </div><div class=\"line\">    public static final String TAG = &quot;MyService&quot;;  </div><div class=\"line\">    private MyBinder mBinder = new MyBinder();  </div><div class=\"line\">    @Override  </div><div class=\"line\">    public void onCreate() &#123;  </div><div class=\"line\">        super.onCreate();  </div><div class=\"line\">        Notification notification = new Notification(R.drawable.ic_launcher,  </div><div class=\"line\">                &quot;有通知到来&quot;, System.currentTimeMillis());  </div><div class=\"line\">        Intent notificationIntent = new Intent(this, MainActivity.class);  </div><div class=\"line\">        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,  </div><div class=\"line\">                notificationIntent, 0);  </div><div class=\"line\">        notification.setLatestEventInfo(this, &quot;这是通知的标题&quot;, &quot;这是通知的内容&quot;,  </div><div class=\"line\">                pendingIntent);  </div><div class=\"line\">        startForeground(1, notification);  </div><div class=\"line\">        Log.d(TAG, &quot;onCreate() executed&quot;);  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    .........  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3)IntentService<br>Service的一个子类,实现onHandlerIntent()方法,用于处理长期任务,并且是在新的线程中,<br>处理完后会自动关闭.</p>\n<p>2.Service的生命周期<br>两种启动方式<br>1)startService (stopService结束)<br>onCreate -&gt; onStartCommand -&gt; onDestory</p>\n<p>2)bindService (unbindService结束)<br>onCreate -&gt; onBind -&gt; onUnBind -&gt; onDestory</p>"},{"title":"如何在moudle中引入aar","date":"2017-01-16T12:32:45.000Z","_content":"app已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?\n\n1.在moudle目录下的build.gradle\n```\nandroid{\n  repositories {\n    flatDir {\n        dirs 'libs'\n    }\n  }\n}\n\ndependencies {\n  compile(name: 'aar-B', ext: 'aar')\n}\n```\n 2.在app目录下的build.gradle\n```\nrepositories {\n    flatDir {\n        dirs('libs','../moudle/libs')\n    }\n}\n```\n","source":"_posts/如何在moudle中引入aar.md","raw":"---\ntitle: 如何在moudle中引入aar\ndate: 2017-01-16 20:32:45\ntags: Android Studio\n---\napp已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?\n\n1.在moudle目录下的build.gradle\n```\nandroid{\n  repositories {\n    flatDir {\n        dirs 'libs'\n    }\n  }\n}\n\ndependencies {\n  compile(name: 'aar-B', ext: 'aar')\n}\n```\n 2.在app目录下的build.gradle\n```\nrepositories {\n    flatDir {\n        dirs('libs','../moudle/libs')\n    }\n}\n```\n","slug":"如何在moudle中引入aar","published":1,"updated":"2017-02-17T12:16:52.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dnl0018vj2ztob7fcks","content":"<p>app已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?</p>\n<p>1.在moudle目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs &apos;libs&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile(name: &apos;aar-B&apos;, ext: &apos;aar&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 2.在app目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs(&apos;libs&apos;,&apos;../moudle/libs&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>app已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?</p>\n<p>1.在moudle目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs &apos;libs&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile(name: &apos;aar-B&apos;, ext: &apos;aar&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 2.在app目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs(&apos;libs&apos;,&apos;../moudle/libs&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"常用网络请求框架OkHttp、Volley、Retrofit,android-async-http对比","date":"2017-03-01T11:52:28.000Z","_content":"1.android-async-http\n    android-async-http 是基于HttpClient的，目前HttpClient已经被废弃.\n    貌似android-async-http已经把一整套的HttpClient加入代码中,所以目前还有人在用.\n\n2.OkHttp\n    Android 开发中是可以直接使用现成的api进行网络请求的。是Square公司开源的针对Java和Android程序，封装的一个高性能http请求库，它的职责跟HttpUrlConnection 是一样的，支持同步、异步，而且 OkHttp 又封装了线程池，封装了数据转换，封装了参数使用、错误处理等，api使用起来更加方便。可以把它理解成是一个封装之后的类似HttpUrlConnection的东西，但是在使用的时候仍然需要自己再做一层封装，这样才能像使用一个框架一样更加顺手。\n<!--more-->\n3.Volley\n   Volley是Google官方出的一套小而巧的异步请求库，该框架封装的扩展性很强，支持HttpClient、HttpUrlConnection， 甚至支持OkHttp，而且Volley里面也封装了ImageLoader，所以如果你愿意你甚至不需要使用图片加载框架，不过这块功能没有一些专门的图片加载框架强大，对于简单的需求可以使用，稍复杂点的需求还是需要用到专门的图片加载框架。Volley也有缺陷，比如不支持post大数据，所以不适合上传文件。不过Volley设计的初衷本身也就是为频繁的、数据量小的网络请求而生。\n\n4.Retrofit\n   Retrofit是Square公司出品的默认基于OkHttp封装的一套RESTful网络请求框架，RESTful是目前流行的一套api设计的风格， 并不是标准。Retrofit的封装可以说是很强大，里面涉及到一堆的设计模式,可以通过注解直接配置请求，可以使用不同的http客户端，虽然默认是用http ，可以使用不同Json Converter 来序列化数据，同时提供对RxJava的支持，使用Retrofit + OkHttp + RxJava + Dagger2 可以说是目前比较潮的一套框架，但是需要有比较高的门槛。\n\n5.Volley VS OkHttp\n  Volley的优势在于封装的更好，而使用OkHttp你需要有足够的能力再进行一次封装。而OkHttp的优势在于性能更高，因为 OkHttp基于NIO和Okio ，所以性能上要比 Volley更快。IO 和 NIO这两个都是Java中的概念，如果我从硬盘读取数据，第一种方式就是程序一直等，数据读完后才能继续操作这种是最简单的也叫阻塞式IO,还有一种是你读你的,程序接着往下执行，等数据处理完你再来通知我，然后再处理回调。而第二种就是 NIO 的方式，非阻塞式， 所以NIO当然要比IO的性能要好了,而 Okio是 Square 公司基于IO和NIO基础上做的一个更简单、高效处理数据流的一个库。理论上如果Volley和OkHttp对比的话，更倾向于使用 Volley，因为Volley内部同样支持使用OkHttp,这点OkHttp的性能优势就没了，  而且 Volley 本身封装的也更易用，扩展性更好些。\n\n6.OkHttp VS Retrofit\n   毫无疑问，Retrofit 默认是基于 OkHttp 而做的封装，这点来说没有可比性，肯定首选 Retrofit。\n\n7.Volley VS Retrofit\n  这两个库都做了不错的封装，但Retrofit解耦的更彻底,尤其Retrofit2.0出来，Jake对之前1.0设计不合理的地方做了大量重构， 职责更细分，而且Retrofit默认使用OkHttp,性能上也要比Volley占优势，再有如果你的项目如果采用了RxJava ，那更该使用  Retrofit 。所以这两个库相比，Retrofit更有优势，在能掌握两个框架的前提下该优先使用 Retrofit。但是Retrofit门槛要比Volley稍高些， 要理解他的原理，各种用法，想彻底搞明白还是需要花些功夫的，如果你对它一知半解，那还是建议在商业项目使用Volley吧。\n\n文章来源 : http://blog.csdn.net/qq_33342248/article/details/53906842\n","source":"_posts/常用网络请求框架OkHttp、Volley、Retrofit对比.md","raw":"---\ntitle: 常用网络请求框架OkHttp、Volley、Retrofit,android-async-http对比\ndate: 2017-03-01 19:52:28\ntags: Android\n---\n1.android-async-http\n    android-async-http 是基于HttpClient的，目前HttpClient已经被废弃.\n    貌似android-async-http已经把一整套的HttpClient加入代码中,所以目前还有人在用.\n\n2.OkHttp\n    Android 开发中是可以直接使用现成的api进行网络请求的。是Square公司开源的针对Java和Android程序，封装的一个高性能http请求库，它的职责跟HttpUrlConnection 是一样的，支持同步、异步，而且 OkHttp 又封装了线程池，封装了数据转换，封装了参数使用、错误处理等，api使用起来更加方便。可以把它理解成是一个封装之后的类似HttpUrlConnection的东西，但是在使用的时候仍然需要自己再做一层封装，这样才能像使用一个框架一样更加顺手。\n<!--more-->\n3.Volley\n   Volley是Google官方出的一套小而巧的异步请求库，该框架封装的扩展性很强，支持HttpClient、HttpUrlConnection， 甚至支持OkHttp，而且Volley里面也封装了ImageLoader，所以如果你愿意你甚至不需要使用图片加载框架，不过这块功能没有一些专门的图片加载框架强大，对于简单的需求可以使用，稍复杂点的需求还是需要用到专门的图片加载框架。Volley也有缺陷，比如不支持post大数据，所以不适合上传文件。不过Volley设计的初衷本身也就是为频繁的、数据量小的网络请求而生。\n\n4.Retrofit\n   Retrofit是Square公司出品的默认基于OkHttp封装的一套RESTful网络请求框架，RESTful是目前流行的一套api设计的风格， 并不是标准。Retrofit的封装可以说是很强大，里面涉及到一堆的设计模式,可以通过注解直接配置请求，可以使用不同的http客户端，虽然默认是用http ，可以使用不同Json Converter 来序列化数据，同时提供对RxJava的支持，使用Retrofit + OkHttp + RxJava + Dagger2 可以说是目前比较潮的一套框架，但是需要有比较高的门槛。\n\n5.Volley VS OkHttp\n  Volley的优势在于封装的更好，而使用OkHttp你需要有足够的能力再进行一次封装。而OkHttp的优势在于性能更高，因为 OkHttp基于NIO和Okio ，所以性能上要比 Volley更快。IO 和 NIO这两个都是Java中的概念，如果我从硬盘读取数据，第一种方式就是程序一直等，数据读完后才能继续操作这种是最简单的也叫阻塞式IO,还有一种是你读你的,程序接着往下执行，等数据处理完你再来通知我，然后再处理回调。而第二种就是 NIO 的方式，非阻塞式， 所以NIO当然要比IO的性能要好了,而 Okio是 Square 公司基于IO和NIO基础上做的一个更简单、高效处理数据流的一个库。理论上如果Volley和OkHttp对比的话，更倾向于使用 Volley，因为Volley内部同样支持使用OkHttp,这点OkHttp的性能优势就没了，  而且 Volley 本身封装的也更易用，扩展性更好些。\n\n6.OkHttp VS Retrofit\n   毫无疑问，Retrofit 默认是基于 OkHttp 而做的封装，这点来说没有可比性，肯定首选 Retrofit。\n\n7.Volley VS Retrofit\n  这两个库都做了不错的封装，但Retrofit解耦的更彻底,尤其Retrofit2.0出来，Jake对之前1.0设计不合理的地方做了大量重构， 职责更细分，而且Retrofit默认使用OkHttp,性能上也要比Volley占优势，再有如果你的项目如果采用了RxJava ，那更该使用  Retrofit 。所以这两个库相比，Retrofit更有优势，在能掌握两个框架的前提下该优先使用 Retrofit。但是Retrofit门槛要比Volley稍高些， 要理解他的原理，各种用法，想彻底搞明白还是需要花些功夫的，如果你对它一知半解，那还是建议在商业项目使用Volley吧。\n\n文章来源 : http://blog.csdn.net/qq_33342248/article/details/53906842\n","slug":"常用网络请求框架OkHttp、Volley、Retrofit对比","published":1,"updated":"2017-03-11T02:44:34.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dno001avj2zfe548s2k","content":"<p>1.android-async-http<br>    android-async-http 是基于HttpClient的，目前HttpClient已经被废弃.<br>    貌似android-async-http已经把一整套的HttpClient加入代码中,所以目前还有人在用.</p>\n<p>2.OkHttp<br>    Android 开发中是可以直接使用现成的api进行网络请求的。是Square公司开源的针对Java和Android程序，封装的一个高性能http请求库，它的职责跟HttpUrlConnection 是一样的，支持同步、异步，而且 OkHttp 又封装了线程池，封装了数据转换，封装了参数使用、错误处理等，api使用起来更加方便。可以把它理解成是一个封装之后的类似HttpUrlConnection的东西，但是在使用的时候仍然需要自己再做一层封装，这样才能像使用一个框架一样更加顺手。<br><a id=\"more\"></a><br>3.Volley<br>   Volley是Google官方出的一套小而巧的异步请求库，该框架封装的扩展性很强，支持HttpClient、HttpUrlConnection， 甚至支持OkHttp，而且Volley里面也封装了ImageLoader，所以如果你愿意你甚至不需要使用图片加载框架，不过这块功能没有一些专门的图片加载框架强大，对于简单的需求可以使用，稍复杂点的需求还是需要用到专门的图片加载框架。Volley也有缺陷，比如不支持post大数据，所以不适合上传文件。不过Volley设计的初衷本身也就是为频繁的、数据量小的网络请求而生。</p>\n<p>4.Retrofit<br>   Retrofit是Square公司出品的默认基于OkHttp封装的一套RESTful网络请求框架，RESTful是目前流行的一套api设计的风格， 并不是标准。Retrofit的封装可以说是很强大，里面涉及到一堆的设计模式,可以通过注解直接配置请求，可以使用不同的http客户端，虽然默认是用http ，可以使用不同Json Converter 来序列化数据，同时提供对RxJava的支持，使用Retrofit + OkHttp + RxJava + Dagger2 可以说是目前比较潮的一套框架，但是需要有比较高的门槛。</p>\n<p>5.Volley VS OkHttp<br>  Volley的优势在于封装的更好，而使用OkHttp你需要有足够的能力再进行一次封装。而OkHttp的优势在于性能更高，因为 OkHttp基于NIO和Okio ，所以性能上要比 Volley更快。IO 和 NIO这两个都是Java中的概念，如果我从硬盘读取数据，第一种方式就是程序一直等，数据读完后才能继续操作这种是最简单的也叫阻塞式IO,还有一种是你读你的,程序接着往下执行，等数据处理完你再来通知我，然后再处理回调。而第二种就是 NIO 的方式，非阻塞式， 所以NIO当然要比IO的性能要好了,而 Okio是 Square 公司基于IO和NIO基础上做的一个更简单、高效处理数据流的一个库。理论上如果Volley和OkHttp对比的话，更倾向于使用 Volley，因为Volley内部同样支持使用OkHttp,这点OkHttp的性能优势就没了，  而且 Volley 本身封装的也更易用，扩展性更好些。</p>\n<p>6.OkHttp VS Retrofit<br>   毫无疑问，Retrofit 默认是基于 OkHttp 而做的封装，这点来说没有可比性，肯定首选 Retrofit。</p>\n<p>7.Volley VS Retrofit<br>  这两个库都做了不错的封装，但Retrofit解耦的更彻底,尤其Retrofit2.0出来，Jake对之前1.0设计不合理的地方做了大量重构， 职责更细分，而且Retrofit默认使用OkHttp,性能上也要比Volley占优势，再有如果你的项目如果采用了RxJava ，那更该使用  Retrofit 。所以这两个库相比，Retrofit更有优势，在能掌握两个框架的前提下该优先使用 Retrofit。但是Retrofit门槛要比Volley稍高些， 要理解他的原理，各种用法，想彻底搞明白还是需要花些功夫的，如果你对它一知半解，那还是建议在商业项目使用Volley吧。</p>\n<p>文章来源 : <a href=\"http://blog.csdn.net/qq_33342248/article/details/53906842\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/qq_33342248/article/details/53906842</a></p>\n","excerpt":"<p>1.android-async-http<br>    android-async-http 是基于HttpClient的，目前HttpClient已经被废弃.<br>    貌似android-async-http已经把一整套的HttpClient加入代码中,所以目前还有人在用.</p>\n<p>2.OkHttp<br>    Android 开发中是可以直接使用现成的api进行网络请求的。是Square公司开源的针对Java和Android程序，封装的一个高性能http请求库，它的职责跟HttpUrlConnection 是一样的，支持同步、异步，而且 OkHttp 又封装了线程池，封装了数据转换，封装了参数使用、错误处理等，api使用起来更加方便。可以把它理解成是一个封装之后的类似HttpUrlConnection的东西，但是在使用的时候仍然需要自己再做一层封装，这样才能像使用一个框架一样更加顺手。<br>","more":"<br>3.Volley<br>   Volley是Google官方出的一套小而巧的异步请求库，该框架封装的扩展性很强，支持HttpClient、HttpUrlConnection， 甚至支持OkHttp，而且Volley里面也封装了ImageLoader，所以如果你愿意你甚至不需要使用图片加载框架，不过这块功能没有一些专门的图片加载框架强大，对于简单的需求可以使用，稍复杂点的需求还是需要用到专门的图片加载框架。Volley也有缺陷，比如不支持post大数据，所以不适合上传文件。不过Volley设计的初衷本身也就是为频繁的、数据量小的网络请求而生。</p>\n<p>4.Retrofit<br>   Retrofit是Square公司出品的默认基于OkHttp封装的一套RESTful网络请求框架，RESTful是目前流行的一套api设计的风格， 并不是标准。Retrofit的封装可以说是很强大，里面涉及到一堆的设计模式,可以通过注解直接配置请求，可以使用不同的http客户端，虽然默认是用http ，可以使用不同Json Converter 来序列化数据，同时提供对RxJava的支持，使用Retrofit + OkHttp + RxJava + Dagger2 可以说是目前比较潮的一套框架，但是需要有比较高的门槛。</p>\n<p>5.Volley VS OkHttp<br>  Volley的优势在于封装的更好，而使用OkHttp你需要有足够的能力再进行一次封装。而OkHttp的优势在于性能更高，因为 OkHttp基于NIO和Okio ，所以性能上要比 Volley更快。IO 和 NIO这两个都是Java中的概念，如果我从硬盘读取数据，第一种方式就是程序一直等，数据读完后才能继续操作这种是最简单的也叫阻塞式IO,还有一种是你读你的,程序接着往下执行，等数据处理完你再来通知我，然后再处理回调。而第二种就是 NIO 的方式，非阻塞式， 所以NIO当然要比IO的性能要好了,而 Okio是 Square 公司基于IO和NIO基础上做的一个更简单、高效处理数据流的一个库。理论上如果Volley和OkHttp对比的话，更倾向于使用 Volley，因为Volley内部同样支持使用OkHttp,这点OkHttp的性能优势就没了，  而且 Volley 本身封装的也更易用，扩展性更好些。</p>\n<p>6.OkHttp VS Retrofit<br>   毫无疑问，Retrofit 默认是基于 OkHttp 而做的封装，这点来说没有可比性，肯定首选 Retrofit。</p>\n<p>7.Volley VS Retrofit<br>  这两个库都做了不错的封装，但Retrofit解耦的更彻底,尤其Retrofit2.0出来，Jake对之前1.0设计不合理的地方做了大量重构， 职责更细分，而且Retrofit默认使用OkHttp,性能上也要比Volley占优势，再有如果你的项目如果采用了RxJava ，那更该使用  Retrofit 。所以这两个库相比，Retrofit更有优势，在能掌握两个框架的前提下该优先使用 Retrofit。但是Retrofit门槛要比Volley稍高些， 要理解他的原理，各种用法，想彻底搞明白还是需要花些功夫的，如果你对它一知半解，那还是建议在商业项目使用Volley吧。</p>\n<p>文章来源 : <a href=\"http://blog.csdn.net/qq_33342248/article/details/53906842\">http://blog.csdn.net/qq_33342248/article/details/53906842</a></p>"},{"title":"开发中经常用到的网站","date":"2017-03-13T13:25:58.000Z","_content":"开发中个人经常用到的网站\n做个记录\n\n1.Json解析 : http://www.sojson.com/\n2.编码/解码,时间戳等 : http://tool.chinaz.com/tools/unicode.aspx\n3.在线正则 : http://tool.oschina.net/regex/\n4.在线进制转换 : http://tool.oschina.net/hexconvert/\n<!-- more -->\n5.访问Google : http://coderschool.cn/1853.html\n6.StackOverflow : http://stackoverflow.com/\n\n7.RX中文文档 : https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html\n8.RecycleView优秀文集 : https://github.com/CymChad/CymChad.github.io\n9.Android官方文档 : https://developer.android.google.cn/index.html\n10.Android源码查询 : http://grepcode.com/ 或者 http://androidxref.com/\n11.Android Tools : http://www.androiddevtools.cn/\n12.Android官方培训课程 : http://hukai.me/android-training-course-in-chinese/index.html\n13.AndroidCat : http://www.androidcat.com/?step=4&view=CatFragment\n14.在线反编译 : http://www.javadecompilers.com/\n\n15.百度统计 : http://tongji.baidu.com/web/welcome/login\n16.多说评论 : http://andwong.duoshuo.com/admin/settings/\n17.贴图库 : http://www.tietuku.com/\n18.NEXT主题使用文档 : http://theme-next.iissnan.com/\n","source":"_posts/开发中经常用到的网站.md","raw":"---\ntitle: 开发中经常用到的网站\ndate: 2017-03-13 21:25:58\ntags: 记录\n---\n开发中个人经常用到的网站\n做个记录\n\n1.Json解析 : http://www.sojson.com/\n2.编码/解码,时间戳等 : http://tool.chinaz.com/tools/unicode.aspx\n3.在线正则 : http://tool.oschina.net/regex/\n4.在线进制转换 : http://tool.oschina.net/hexconvert/\n<!-- more -->\n5.访问Google : http://coderschool.cn/1853.html\n6.StackOverflow : http://stackoverflow.com/\n\n7.RX中文文档 : https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html\n8.RecycleView优秀文集 : https://github.com/CymChad/CymChad.github.io\n9.Android官方文档 : https://developer.android.google.cn/index.html\n10.Android源码查询 : http://grepcode.com/ 或者 http://androidxref.com/\n11.Android Tools : http://www.androiddevtools.cn/\n12.Android官方培训课程 : http://hukai.me/android-training-course-in-chinese/index.html\n13.AndroidCat : http://www.androidcat.com/?step=4&view=CatFragment\n14.在线反编译 : http://www.javadecompilers.com/\n\n15.百度统计 : http://tongji.baidu.com/web/welcome/login\n16.多说评论 : http://andwong.duoshuo.com/admin/settings/\n17.贴图库 : http://www.tietuku.com/\n18.NEXT主题使用文档 : http://theme-next.iissnan.com/\n","slug":"开发中经常用到的网站","published":1,"updated":"2017-03-13T13:48:05.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860dnw001dvj2z1h45y372","content":"<p>开发中个人经常用到的网站<br>做个记录</p>\n<p>1.Json解析 : <a href=\"http://www.sojson.com/\" target=\"_blank\" rel=\"external\">http://www.sojson.com/</a><br>2.编码/解码,时间戳等 : <a href=\"http://tool.chinaz.com/tools/unicode.aspx\" target=\"_blank\" rel=\"external\">http://tool.chinaz.com/tools/unicode.aspx</a><br>3.在线正则 : <a href=\"http://tool.oschina.net/regex/\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/regex/</a><br>4.在线进制转换 : <a href=\"http://tool.oschina.net/hexconvert/\" target=\"_blank\" rel=\"external\">http://tool.oschina.net/hexconvert/</a><br><a id=\"more\"></a><br>5.访问Google : <a href=\"http://coderschool.cn/1853.html\" target=\"_blank\" rel=\"external\">http://coderschool.cn/1853.html</a><br>6.StackOverflow : <a href=\"http://stackoverflow.com/\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/</a></p>\n<p>7.RX中文文档 : <a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html\" target=\"_blank\" rel=\"external\">https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html</a><br>8.RecycleView优秀文集 : <a href=\"https://github.com/CymChad/CymChad.github.io\" target=\"_blank\" rel=\"external\">https://github.com/CymChad/CymChad.github.io</a><br>9.Android官方文档 : <a href=\"https://developer.android.google.cn/index.html\" target=\"_blank\" rel=\"external\">https://developer.android.google.cn/index.html</a><br>10.Android源码查询 : <a href=\"http://grepcode.com/\" target=\"_blank\" rel=\"external\">http://grepcode.com/</a> 或者 <a href=\"http://androidxref.com/\" target=\"_blank\" rel=\"external\">http://androidxref.com/</a><br>11.Android Tools : <a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"external\">http://www.androiddevtools.cn/</a><br>12.Android官方培训课程 : <a href=\"http://hukai.me/android-training-course-in-chinese/index.html\" target=\"_blank\" rel=\"external\">http://hukai.me/android-training-course-in-chinese/index.html</a><br>13.AndroidCat : <a href=\"http://www.androidcat.com/?step=4&amp;view=CatFragment\" target=\"_blank\" rel=\"external\">http://www.androidcat.com/?step=4&amp;view=CatFragment</a><br>14.在线反编译 : <a href=\"http://www.javadecompilers.com/\" target=\"_blank\" rel=\"external\">http://www.javadecompilers.com/</a></p>\n<p>15.百度统计 : <a href=\"http://tongji.baidu.com/web/welcome/login\" target=\"_blank\" rel=\"external\">http://tongji.baidu.com/web/welcome/login</a><br>16.多说评论 : <a href=\"http://andwong.duoshuo.com/admin/settings/\" target=\"_blank\" rel=\"external\">http://andwong.duoshuo.com/admin/settings/</a><br>17.贴图库 : <a href=\"http://www.tietuku.com/\" target=\"_blank\" rel=\"external\">http://www.tietuku.com/</a><br>18.NEXT主题使用文档 : <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">http://theme-next.iissnan.com/</a></p>\n","excerpt":"<p>开发中个人经常用到的网站<br>做个记录</p>\n<p>1.Json解析 : <a href=\"http://www.sojson.com/\">http://www.sojson.com/</a><br>2.编码/解码,时间戳等 : <a href=\"http://tool.chinaz.com/tools/unicode.aspx\">http://tool.chinaz.com/tools/unicode.aspx</a><br>3.在线正则 : <a href=\"http://tool.oschina.net/regex/\">http://tool.oschina.net/regex/</a><br>4.在线进制转换 : <a href=\"http://tool.oschina.net/hexconvert/\">http://tool.oschina.net/hexconvert/</a><br>","more":"<br>5.访问Google : <a href=\"http://coderschool.cn/1853.html\">http://coderschool.cn/1853.html</a><br>6.StackOverflow : <a href=\"http://stackoverflow.com/\">http://stackoverflow.com/</a></p>\n<p>7.RX中文文档 : <a href=\"https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html\">https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Just.html</a><br>8.RecycleView优秀文集 : <a href=\"https://github.com/CymChad/CymChad.github.io\">https://github.com/CymChad/CymChad.github.io</a><br>9.Android官方文档 : <a href=\"https://developer.android.google.cn/index.html\">https://developer.android.google.cn/index.html</a><br>10.Android源码查询 : <a href=\"http://grepcode.com/\">http://grepcode.com/</a> 或者 <a href=\"http://androidxref.com/\">http://androidxref.com/</a><br>11.Android Tools : <a href=\"http://www.androiddevtools.cn/\">http://www.androiddevtools.cn/</a><br>12.Android官方培训课程 : <a href=\"http://hukai.me/android-training-course-in-chinese/index.html\">http://hukai.me/android-training-course-in-chinese/index.html</a><br>13.AndroidCat : <a href=\"http://www.androidcat.com/?step=4&amp;view=CatFragment\">http://www.androidcat.com/?step=4&amp;view=CatFragment</a><br>14.在线反编译 : <a href=\"http://www.javadecompilers.com/\">http://www.javadecompilers.com/</a></p>\n<p>15.百度统计 : <a href=\"http://tongji.baidu.com/web/welcome/login\">http://tongji.baidu.com/web/welcome/login</a><br>16.多说评论 : <a href=\"http://andwong.duoshuo.com/admin/settings/\">http://andwong.duoshuo.com/admin/settings/</a><br>17.贴图库 : <a href=\"http://www.tietuku.com/\">http://www.tietuku.com/</a><br>18.NEXT主题使用文档 : <a href=\"http://theme-next.iissnan.com/\">http://theme-next.iissnan.com/</a></p>"},{"title":"自定义View","date":"2017-02-17T13:07:24.000Z","_content":"一.使用LayoutInflater加载视图\n写法一:\n```\nLayoutInflater layoutInflater = LayoutInflater.from(context);\n```\n写法二:\n```\nLayoutInflater layoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  \n```\n加载布局:\n```\nlayoutInflater.inflate(resourceId, root);\n```\n<!--more-->\n补充:layout_width,layout_height其实是用于设置View在布局中的大小的,\n如果控件没有在布局中,这个参数就会不起作用,所以叫layout_width而不是width.\nsetContentView,系统会自动在布局外层嵌套一层FrameLayout.\n\n二.视图的绘制过程\n1. onMeasure\n2. onLayout\n3. onDraw\n\n三.自定义View\n1.自定义属性,编写value/attrs.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n <declare-styleable name=\"test\">\n     <attr name=\"text\" format=\"string\" />\n     <attr name=\"testAttr\" format=\"integer\" />\n </declare-styleable>\n</resources>\n```\n2.在自定义类中使用\n```\npublic class MyTextView extends View {\n    public MyTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.test);\n        String text = ta.getString(R.styleable.test_testAttr);\n        int textAttr = ta.getInteger(R.styleable.test_text, -1);\n        ta.recycle();\n    }\n}\n```\n3.在布局中使用\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:demo=\"http://schemas.android.com/apk/res/com.example.test\" //自定义命名空间\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <com.example.test.MyTextView\n        android:layout_width=\"100dp\"\n        android:layout_height=\"200dp\"\n        demo:testAttr=\"520\"\n        demo:text=\"hello world\" />\n\n</RelativeLayout>\n```\n","source":"_posts/自定义View.md","raw":"---\ntitle: 自定义View\ndate: 2017-02-17 21:07:24\ntags: Android\n---\n一.使用LayoutInflater加载视图\n写法一:\n```\nLayoutInflater layoutInflater = LayoutInflater.from(context);\n```\n写法二:\n```\nLayoutInflater layoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  \n```\n加载布局:\n```\nlayoutInflater.inflate(resourceId, root);\n```\n<!--more-->\n补充:layout_width,layout_height其实是用于设置View在布局中的大小的,\n如果控件没有在布局中,这个参数就会不起作用,所以叫layout_width而不是width.\nsetContentView,系统会自动在布局外层嵌套一层FrameLayout.\n\n二.视图的绘制过程\n1. onMeasure\n2. onLayout\n3. onDraw\n\n三.自定义View\n1.自定义属性,编写value/attrs.xml\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n <declare-styleable name=\"test\">\n     <attr name=\"text\" format=\"string\" />\n     <attr name=\"testAttr\" format=\"integer\" />\n </declare-styleable>\n</resources>\n```\n2.在自定义类中使用\n```\npublic class MyTextView extends View {\n    public MyTextView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.test);\n        String text = ta.getString(R.styleable.test_testAttr);\n        int textAttr = ta.getInteger(R.styleable.test_text, -1);\n        ta.recycle();\n    }\n}\n```\n3.在布局中使用\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:demo=\"http://schemas.android.com/apk/res/com.example.test\" //自定义命名空间\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <com.example.test.MyTextView\n        android:layout_width=\"100dp\"\n        android:layout_height=\"200dp\"\n        demo:testAttr=\"520\"\n        demo:text=\"hello world\" />\n\n</RelativeLayout>\n```\n","slug":"自定义View","published":1,"updated":"2017-03-11T02:46:34.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860do0001fvj2zvy8h4m4g","content":"<p>一.使用LayoutInflater加载视图<br>写法一:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LayoutInflater layoutInflater = LayoutInflater.from(context);</div></pre></td></tr></table></figure></p>\n<p>写法二:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LayoutInflater layoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></p>\n<p>加载布局:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">layoutInflater.inflate(resourceId, root);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>补充:layout_width,layout_height其实是用于设置View在布局中的大小的,<br>如果控件没有在布局中,这个参数就会不起作用,所以叫layout_width而不是width.<br>setContentView,系统会自动在布局外层嵌套一层FrameLayout.</p>\n<p>二.视图的绘制过程</p>\n<ol>\n<li>onMeasure</li>\n<li>onLayout</li>\n<li>onDraw</li>\n</ol>\n<p>三.自定义View<br>1.自定义属性,编写value/attrs.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;resources&gt;</div><div class=\"line\"> &lt;declare-styleable name=&quot;test&quot;&gt;</div><div class=\"line\">     &lt;attr name=&quot;text&quot; format=&quot;string&quot; /&gt;</div><div class=\"line\">     &lt;attr name=&quot;testAttr&quot; format=&quot;integer&quot; /&gt;</div><div class=\"line\"> &lt;/declare-styleable&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>\n<p>2.在自定义类中使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyTextView extends View &#123;</div><div class=\"line\">    public MyTextView(Context context, AttributeSet attrs) &#123;</div><div class=\"line\">        super(context, attrs);</div><div class=\"line\">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.test);</div><div class=\"line\">        String text = ta.getString(R.styleable.test_testAttr);</div><div class=\"line\">        int textAttr = ta.getInteger(R.styleable.test_text, -1);</div><div class=\"line\">        ta.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.在布局中使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:demo=&quot;http://schemas.android.com/apk/res/com.example.test&quot; //自定义命名空间</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;com.example.test.MyTextView</div><div class=\"line\">        android:layout_width=&quot;100dp&quot;</div><div class=\"line\">        android:layout_height=&quot;200dp&quot;</div><div class=\"line\">        demo:testAttr=&quot;520&quot;</div><div class=\"line\">        demo:text=&quot;hello world&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>一.使用LayoutInflater加载视图<br>写法一:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LayoutInflater layoutInflater = LayoutInflater.from(context);</div></pre></td></tr></table></figure></p>\n<p>写法二:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">LayoutInflater layoutInflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</div></pre></td></tr></table></figure></p>\n<p>加载布局:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">layoutInflater.inflate(resourceId, root);</div></pre></td></tr></table></figure></p>","more":"<p>补充:layout_width,layout_height其实是用于设置View在布局中的大小的,<br>如果控件没有在布局中,这个参数就会不起作用,所以叫layout_width而不是width.<br>setContentView,系统会自动在布局外层嵌套一层FrameLayout.</p>\n<p>二.视图的绘制过程</p>\n<ol>\n<li>onMeasure</li>\n<li>onLayout</li>\n<li>onDraw</li>\n</ol>\n<p>三.自定义View<br>1.自定义属性,编写value/attrs.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;resources&gt;</div><div class=\"line\"> &lt;declare-styleable name=&quot;test&quot;&gt;</div><div class=\"line\">     &lt;attr name=&quot;text&quot; format=&quot;string&quot; /&gt;</div><div class=\"line\">     &lt;attr name=&quot;testAttr&quot; format=&quot;integer&quot; /&gt;</div><div class=\"line\"> &lt;/declare-styleable&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>\n<p>2.在自定义类中使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MyTextView extends View &#123;</div><div class=\"line\">    public MyTextView(Context context, AttributeSet attrs) &#123;</div><div class=\"line\">        super(context, attrs);</div><div class=\"line\">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.test);</div><div class=\"line\">        String text = ta.getString(R.styleable.test_testAttr);</div><div class=\"line\">        int textAttr = ta.getInteger(R.styleable.test_text, -1);</div><div class=\"line\">        ta.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.在布局中使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class=\"line\">    xmlns:demo=&quot;http://schemas.android.com/apk/res/com.example.test&quot; //自定义命名空间</div><div class=\"line\">    android:layout_width=&quot;match_parent&quot;</div><div class=\"line\">    android:layout_height=&quot;match_parent&quot; &gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;com.example.test.MyTextView</div><div class=\"line\">        android:layout_width=&quot;100dp&quot;</div><div class=\"line\">        android:layout_height=&quot;200dp&quot;</div><div class=\"line\">        demo:testAttr=&quot;520&quot;</div><div class=\"line\">        demo:text=&quot;hello world&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>"},{"title":"记一次使用Realm的体会","date":"2017-02-16T12:42:40.000Z","_content":">数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。\n官网:https://realm.io/docs/java/latest\n\n一.基于Version-0.87.5\n由于 v0.87.5之后的版本使用的是plugin形式添加引用,\n使用时会发现包增大好多(可能是自己使用时缺少了某些配置),\n所以这里介绍一个该版本的使用.\n1.引入\napp下的build.gradle\n```\ncompile 'io.realm:realm-android:0.87.5'\n```\n<!--more-->\n2.初始化\nApplication中\n```\n  private void initRealm() {\n        RealmConfiguration config = new RealmConfiguration.Builder(this).name(\"guess.realm\").schemaVersion(0).build();\n        Realm.setDefaultConfiguration(config);\n  }\n```\n3.使用\n新建对象\n```\npublic class PskBean extends RealmObject {\n    @PrimaryKey\n    private String ssid;\n    private String bssid;\n    private String psk;\n\n    public PskBean() {\n    }\n\n    public PskBean(String ssid, String bssid, String psk) {\n        this.ssid = ssid;\n        this.bssid = bssid;\n        this.psk = psk;\n    }\n\n    public String getSsid() {\n        return ssid;\n    }\n\n    public void setSsid(String ssid) {\n        this.ssid = ssid;\n    }\n\n    public String getBssid() {\n        return bssid;\n    }\n\n    public void setBssid(String bssid) {\n        this.bssid = bssid;\n    }\n\n    public String getPsk() {\n        return psk;\n    }\n\n    public void setPsk(String psk) {\n        this.psk = psk;\n    }\n}\n```\n数据库帮助类(只示例异步操作)\n```\npublic class RealmDBHelper {\n  private Realm mRealm;\n\n  public RealmDBHelper(Context context) {\n      mRealm = Realm.getInstance(context);\n  }\n\n  public Realm getRealm() {\n      return mRealm;\n  }\n\n  /**\n   * add （增）\n   */\n  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) {\n      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              realm.copyToRealmOrUpdate(bean);\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return addTask;\n  }\n\n  /**\n   * delete （删）\n   */\n  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) {\n      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.removeFromRealm();\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return deleteTask;\n  }\n\n  /**\n   * update （改）\n   */\n  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) {\n      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.setPsk(psk);\n          }\n      },new Realm.Transaction.Callback(){\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return updateTask;\n  }\n\n  /**\n   * query （查询所有）\n   */\n  private void queryAllBean(RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  /**\n   * query (单条)\n   */\n  private void querySingleBean(String ssid, String bssid, RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  public void close() {\n      if (mRealm != null) {\n          mRealm.close();\n      }\n  }\n\n  public interface RealmCallback {\n      void success(RealmResults<PskBean> element);\n\n      void failure(String msg);\n  }\n}\n```\n4.混淆\n```\n# Realm #\n-keep class io.realm.annotations.RealmModule\n-keep @io.realm.annotations.RealmModule class *\n-keep class io.realm.internal.Keep\n-keep @io.realm.internal.Keep class * { *; }\n-dontwarn javax.**\n-dontwarn io.realm.**\n```\n此时打包会发现 包增大好多,大约4M左右.\n原因是默认情况下,Realm会引人所有规格的.so库\n如何处理?\napp下build.gradle,导出你需要的规格.so库\n```\nsplits {\n      abi {\n          enable true\n          reset()\n          include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'\n          universalApk true\n      }\n  }\n```\n5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下\n  而是在data/data/files/name.realm中\n","source":"_posts/记一次使用Realm的体会.md","raw":"---\ntitle: 记一次使用Realm的体会\ndate: 2017-02-16 20:42:40\ntags: Realm\n---\n>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。\n官网:https://realm.io/docs/java/latest\n\n一.基于Version-0.87.5\n由于 v0.87.5之后的版本使用的是plugin形式添加引用,\n使用时会发现包增大好多(可能是自己使用时缺少了某些配置),\n所以这里介绍一个该版本的使用.\n1.引入\napp下的build.gradle\n```\ncompile 'io.realm:realm-android:0.87.5'\n```\n<!--more-->\n2.初始化\nApplication中\n```\n  private void initRealm() {\n        RealmConfiguration config = new RealmConfiguration.Builder(this).name(\"guess.realm\").schemaVersion(0).build();\n        Realm.setDefaultConfiguration(config);\n  }\n```\n3.使用\n新建对象\n```\npublic class PskBean extends RealmObject {\n    @PrimaryKey\n    private String ssid;\n    private String bssid;\n    private String psk;\n\n    public PskBean() {\n    }\n\n    public PskBean(String ssid, String bssid, String psk) {\n        this.ssid = ssid;\n        this.bssid = bssid;\n        this.psk = psk;\n    }\n\n    public String getSsid() {\n        return ssid;\n    }\n\n    public void setSsid(String ssid) {\n        this.ssid = ssid;\n    }\n\n    public String getBssid() {\n        return bssid;\n    }\n\n    public void setBssid(String bssid) {\n        this.bssid = bssid;\n    }\n\n    public String getPsk() {\n        return psk;\n    }\n\n    public void setPsk(String psk) {\n        this.psk = psk;\n    }\n}\n```\n数据库帮助类(只示例异步操作)\n```\npublic class RealmDBHelper {\n  private Realm mRealm;\n\n  public RealmDBHelper(Context context) {\n      mRealm = Realm.getInstance(context);\n  }\n\n  public Realm getRealm() {\n      return mRealm;\n  }\n\n  /**\n   * add （增）\n   */\n  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) {\n      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              realm.copyToRealmOrUpdate(bean);\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return addTask;\n  }\n\n  /**\n   * delete （删）\n   */\n  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) {\n      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.removeFromRealm();\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return deleteTask;\n  }\n\n  /**\n   * update （改）\n   */\n  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) {\n      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.setPsk(psk);\n          }\n      },new Realm.Transaction.Callback(){\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return updateTask;\n  }\n\n  /**\n   * query （查询所有）\n   */\n  private void queryAllBean(RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  /**\n   * query (单条)\n   */\n  private void querySingleBean(String ssid, String bssid, RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  public void close() {\n      if (mRealm != null) {\n          mRealm.close();\n      }\n  }\n\n  public interface RealmCallback {\n      void success(RealmResults<PskBean> element);\n\n      void failure(String msg);\n  }\n}\n```\n4.混淆\n```\n# Realm #\n-keep class io.realm.annotations.RealmModule\n-keep @io.realm.annotations.RealmModule class *\n-keep class io.realm.internal.Keep\n-keep @io.realm.internal.Keep class * { *; }\n-dontwarn javax.**\n-dontwarn io.realm.**\n```\n此时打包会发现 包增大好多,大约4M左右.\n原因是默认情况下,Realm会引人所有规格的.so库\n如何处理?\napp下build.gradle,导出你需要的规格.so库\n```\nsplits {\n      abi {\n          enable true\n          reset()\n          include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'\n          universalApk true\n      }\n  }\n```\n5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下\n  而是在data/data/files/name.realm中\n","slug":"记一次使用Realm的体会","published":1,"updated":"2017-03-11T02:45:18.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0860do3001hvj2zi22z4atk","content":"<blockquote>\n<p>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。<br>官网:<a href=\"https://realm.io/docs/java/latest\" target=\"_blank\" rel=\"external\">https://realm.io/docs/java/latest</a></p>\n</blockquote>\n<p>一.基于Version-0.87.5<br>由于 v0.87.5之后的版本使用的是plugin形式添加引用,<br>使用时会发现包增大好多(可能是自己使用时缺少了某些配置),<br>所以这里介绍一个该版本的使用.<br>1.引入<br>app下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;io.realm:realm-android:0.87.5&apos;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.初始化<br>Application中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initRealm() &#123;</div><div class=\"line\">      RealmConfiguration config = new RealmConfiguration.Builder(this).name(&quot;guess.realm&quot;).schemaVersion(0).build();</div><div class=\"line\">      Realm.setDefaultConfiguration(config);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.使用<br>新建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskBean extends RealmObject &#123;</div><div class=\"line\">    @PrimaryKey</div><div class=\"line\">    private String ssid;</div><div class=\"line\">    private String bssid;</div><div class=\"line\">    private String psk;</div><div class=\"line\"></div><div class=\"line\">    public PskBean() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public PskBean(String ssid, String bssid, String psk) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getSsid() &#123;</div><div class=\"line\">        return ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setSsid(String ssid) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getBssid() &#123;</div><div class=\"line\">        return bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setBssid(String bssid) &#123;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPsk() &#123;</div><div class=\"line\">        return psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setPsk(String psk) &#123;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>数据库帮助类(只示例异步操作)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RealmDBHelper &#123;</div><div class=\"line\">  private Realm mRealm;</div><div class=\"line\"></div><div class=\"line\">  public RealmDBHelper(Context context) &#123;</div><div class=\"line\">      mRealm = Realm.getInstance(context);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public Realm getRealm() &#123;</div><div class=\"line\">      return mRealm;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * add （增）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              realm.copyToRealmOrUpdate(bean);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return addTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * delete （删）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.removeFromRealm();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return deleteTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * update （改）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.setPsk(psk);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,new Realm.Transaction.Callback()&#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return updateTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query （查询所有）</div><div class=\"line\">   */</div><div class=\"line\">  private void queryAllBean(RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query (单条)</div><div class=\"line\">   */</div><div class=\"line\">  private void querySingleBean(String ssid, String bssid, RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public void close() &#123;</div><div class=\"line\">      if (mRealm != null) &#123;</div><div class=\"line\">          mRealm.close();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public interface RealmCallback &#123;</div><div class=\"line\">      void success(RealmResults&lt;PskBean&gt; element);</div><div class=\"line\"></div><div class=\"line\">      void failure(String msg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.混淆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Realm #</div><div class=\"line\">-keep class io.realm.annotations.RealmModule</div><div class=\"line\">-keep @io.realm.annotations.RealmModule class *</div><div class=\"line\">-keep class io.realm.internal.Keep</div><div class=\"line\">-keep @io.realm.internal.Keep class * &#123; *; &#125;</div><div class=\"line\">-dontwarn javax.**</div><div class=\"line\">-dontwarn io.realm.**</div></pre></td></tr></table></figure></p>\n<p>此时打包会发现 包增大好多,大约4M左右.<br>原因是默认情况下,Realm会引人所有规格的.so库<br>如何处理?<br>app下build.gradle,导出你需要的规格.so库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">splits &#123;</div><div class=\"line\">      abi &#123;</div><div class=\"line\">          enable true</div><div class=\"line\">          reset()</div><div class=\"line\">          include &apos;armeabi&apos;, &apos;armeabi-v7a&apos;, &apos;arm64-v8a&apos;, &apos;mips&apos;, &apos;x86&apos;, &apos;x86_64&apos;</div><div class=\"line\">          universalApk true</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下<br>  而是在data/data/files/name.realm中</p>\n","excerpt":"<blockquote>\n<p>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。<br>官网:<a href=\"https://realm.io/docs/java/latest\">https://realm.io/docs/java/latest</a></p>\n</blockquote>\n<p>一.基于Version-0.87.5<br>由于 v0.87.5之后的版本使用的是plugin形式添加引用,<br>使用时会发现包增大好多(可能是自己使用时缺少了某些配置),<br>所以这里介绍一个该版本的使用.<br>1.引入<br>app下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;io.realm:realm-android:0.87.5&apos;</div></pre></td></tr></table></figure></p>","more":"<p>2.初始化<br>Application中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initRealm() &#123;</div><div class=\"line\">      RealmConfiguration config = new RealmConfiguration.Builder(this).name(&quot;guess.realm&quot;).schemaVersion(0).build();</div><div class=\"line\">      Realm.setDefaultConfiguration(config);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.使用<br>新建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskBean extends RealmObject &#123;</div><div class=\"line\">    @PrimaryKey</div><div class=\"line\">    private String ssid;</div><div class=\"line\">    private String bssid;</div><div class=\"line\">    private String psk;</div><div class=\"line\"></div><div class=\"line\">    public PskBean() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public PskBean(String ssid, String bssid, String psk) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getSsid() &#123;</div><div class=\"line\">        return ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setSsid(String ssid) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getBssid() &#123;</div><div class=\"line\">        return bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setBssid(String bssid) &#123;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPsk() &#123;</div><div class=\"line\">        return psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setPsk(String psk) &#123;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>数据库帮助类(只示例异步操作)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RealmDBHelper &#123;</div><div class=\"line\">  private Realm mRealm;</div><div class=\"line\"></div><div class=\"line\">  public RealmDBHelper(Context context) &#123;</div><div class=\"line\">      mRealm = Realm.getInstance(context);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public Realm getRealm() &#123;</div><div class=\"line\">      return mRealm;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * add （增）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              realm.copyToRealmOrUpdate(bean);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return addTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * delete （删）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.removeFromRealm();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return deleteTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * update （改）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.setPsk(psk);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,new Realm.Transaction.Callback()&#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return updateTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query （查询所有）</div><div class=\"line\">   */</div><div class=\"line\">  private void queryAllBean(RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query (单条)</div><div class=\"line\">   */</div><div class=\"line\">  private void querySingleBean(String ssid, String bssid, RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public void close() &#123;</div><div class=\"line\">      if (mRealm != null) &#123;</div><div class=\"line\">          mRealm.close();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public interface RealmCallback &#123;</div><div class=\"line\">      void success(RealmResults&lt;PskBean&gt; element);</div><div class=\"line\"></div><div class=\"line\">      void failure(String msg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.混淆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Realm #</div><div class=\"line\">-keep class io.realm.annotations.RealmModule</div><div class=\"line\">-keep @io.realm.annotations.RealmModule class *</div><div class=\"line\">-keep class io.realm.internal.Keep</div><div class=\"line\">-keep @io.realm.internal.Keep class * &#123; *; &#125;</div><div class=\"line\">-dontwarn javax.**</div><div class=\"line\">-dontwarn io.realm.**</div></pre></td></tr></table></figure></p>\n<p>此时打包会发现 包增大好多,大约4M左右.<br>原因是默认情况下,Realm会引人所有规格的.so库<br>如何处理?<br>app下build.gradle,导出你需要的规格.so库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">splits &#123;</div><div class=\"line\">      abi &#123;</div><div class=\"line\">          enable true</div><div class=\"line\">          reset()</div><div class=\"line\">          include &apos;armeabi&apos;, &apos;armeabi-v7a&apos;, &apos;arm64-v8a&apos;, &apos;mips&apos;, &apos;x86&apos;, &apos;x86_64&apos;</div><div class=\"line\">          universalApk true</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下<br>  而是在data/data/files/name.realm中</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0860dkh0004vj2zjbgg46re","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dkx0007vj2zwq92wknx"},{"post_id":"cj0860djd0000vj2zo6mc4eha","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dl80009vj2z1fpxlc66"},{"post_id":"cj0860dko0005vj2zcu88bfh4","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dlj000cvj2z3qt6jace"},{"post_id":"cj0860dky0008vj2zcnytliq5","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dlm000evj2z6bnobjlb"},{"post_id":"cj0860djt0001vj2zot0qpxq2","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dly000gvj2z7hqbb25o"},{"post_id":"cj0860dlb000avj2zm5td5zt2","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dm5000jvj2zomwiic7u"},{"post_id":"cj0860dlk000dvj2zmif0oakx","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dm9000lvj2zodiu87wc"},{"post_id":"cj0860dkd0003vj2zy94xesvt","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dmd000nvj2z0hlv42so"},{"post_id":"cj0860dma000mvj2zgywyy11p","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dmk000qvj2zjbz36r9o"},{"post_id":"cj0860dlu000fvj2zlz1i02lr","tag_id":"cj0860dm3000ivj2z1erxe7c5","_id":"cj0860dmt000svj2z6iaztmvl"},{"post_id":"cj0860dmd000ovj2z6tobsoof","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dmx000vvj2z91ujaqx3"},{"post_id":"cj0860dlz000hvj2z8psxmhl3","tag_id":"cj0860dmh000pvj2zlvvh44bz","_id":"cj0860dn2000xvj2zlh5k2txv"},{"post_id":"cj0860dmt000tvj2za47x1c9p","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dn70010vj2z8z6c4k6c"},{"post_id":"cj0860dmy000wvj2zpo4jiy6a","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dnd0012vj2zysperapf"},{"post_id":"cj0860dm5000kvj2zxnjeues8","tag_id":"cj0860dmw000uvj2zcyxlru8z","_id":"cj0860dni0015vj2ze20susqo"},{"post_id":"cj0860dn3000yvj2z40wz2klv","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dnk0017vj2z5d36else"},{"post_id":"cj0860dmk000rvj2zckmswm15","tag_id":"cj0860dn6000zvj2z4gctnr98","_id":"cj0860dnn0019vj2zim72spfx"},{"post_id":"cj0860dne0013vj2zlqci2ki0","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860dnu001cvj2z90wgy3aq"},{"post_id":"cj0860dni0016vj2zrbxfmouf","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860do0001evj2zlvl711kw"},{"post_id":"cj0860dn80011vj2z2xfzybc6","tag_id":"cj0860dnh0014vj2zvsyfomao","_id":"cj0860do2001gvj2z7uwyue7a"},{"post_id":"cj0860dno001avj2zfe548s2k","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860do8001jvj2zg2st9c7r"},{"post_id":"cj0860do0001fvj2zvy8h4m4g","tag_id":"cj0860dk60002vj2z2cay0msh","_id":"cj0860do9001kvj2zdarumn3b"},{"post_id":"cj0860dnl0018vj2ztob7fcks","tag_id":"cj0860dnt001bvj2zansa8qhr","_id":"cj0860do9001mvj2z9su9rr3z"},{"post_id":"cj0860dnw001dvj2z1h45y372","tag_id":"cj0860do6001ivj2zqujylmp8","_id":"cj0860doa001nvj2zhez0hlcy"},{"post_id":"cj0860do3001hvj2zi22z4atk","tag_id":"cj0860do9001lvj2zk156jv85","_id":"cj0860dob001ovj2z9spy3p9x"}],"Tag":[{"name":"Android","_id":"cj0860dk60002vj2z2cay0msh"},{"name":"Java","_id":"cj0860dm3000ivj2z1erxe7c5"},{"name":"架构","_id":"cj0860dmh000pvj2zlvvh44bz"},{"name":"tools","_id":"cj0860dmw000uvj2zcyxlru8z"},{"name":"github","_id":"cj0860dn6000zvj2z4gctnr98"},{"name":"四大组件之Activity","_id":"cj0860dnh0014vj2zvsyfomao"},{"name":"Android Studio","_id":"cj0860dnt001bvj2zansa8qhr"},{"name":"记录","_id":"cj0860do6001ivj2zqujylmp8"},{"name":"Realm","_id":"cj0860do9001lvj2zk156jv85"}]}}