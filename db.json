{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486726566620},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1486726566620},{"_id":"themes/huxblog/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1486726566620},{"_id":"source/_posts/Android动态修改某个控件大小.md","hash":"42d7416941204ae8679ca16305f5683ec3bf4423","modified":1486728336304},{"_id":"source/_posts/Android自定义圆形进度条.md","hash":"22c91fb2e4199f072a649e4a368883842ae32143","modified":1486728503719},{"_id":"source/_posts/Android设置全屏的几种方式.md","hash":"9ce6df1812d87a763cac9718b8fe49364de5cf1a","modified":1486726839315},{"_id":"source/_posts/EditText相关.md","hash":"0f312ca71629688ccd6529be38e41658e1a1ad84","modified":1486728452733},{"_id":"source/_posts/WebView-获取网页源码.md","hash":"2e0b266b2be39b4025033253a19ceafacdaacfff","modified":1486728000292},{"_id":"source/_posts/gitbub-blog.md","hash":"193d50f73276404623db5cdd657e5e7eb76ed9ce","modified":1486727665169},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1486726566620},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1486726566620},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1486726566620},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1486726566620},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1486726566620},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1486726566620},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1486726566620},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1486726566620},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"f5689862281e34dbe8402b0e72f632902e53e88b","modified":1486726566620},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1486726566620},{"_id":"themes/huxblog/layout/post.ejs","hash":"fd68124c3de2bbe7d870cecadcf684df7cf82519","modified":1486726566620},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1486726566620},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"e325a9953abc1a3751aa1a927bc3ecbdd627803a","modified":1486726566620},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"87c544a64ea49b835330135a616deb2e9fd39bbb","modified":1486726566620},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1486726566620},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1486726566620},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1486726566624},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1486726566624},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1486726566624},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1486726566624},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1486726566624},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1486726566624},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1486726566624},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1486726566628},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1486726566628},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1486726566628},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1486726566628},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1486726566628},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1486726566624},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1486726566624},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1486726566624},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486726566628},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1486726566620},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1486726566628},{"_id":"public/2017/02/10/Android自定义圆形进度条/index.html","hash":"1d2e9a014e3e701cf09cfa216f5acd7e3728b483","modified":1486728547372},{"_id":"public/2017/02/10/EditText相关/index.html","hash":"5e69e76b8c085b9b0011fb72255baf7949ceef07","modified":1486728547384},{"_id":"public/2017/02/10/Android动态修改某个控件大小/index.html","hash":"b6bee39abd598b54371ded61d1b3ab4b4a135bfd","modified":1486728547388},{"_id":"public/2017/02/10/WebView-获取网页源码/index.html","hash":"2bb1ef8b31b8a72a09530512a3a9abcd05dfc379","modified":1486728547388},{"_id":"public/2017/02/10/Android设置全屏的几种方式/index.html","hash":"2e0710809da644b2143cda085ab45585754def2e","modified":1486728547388},{"_id":"public/2017/02/10/gitbub-blog/index.html","hash":"4f95b5faacc1ad09b9e11adada19825bfe5df8f0","modified":1486728547388},{"_id":"public/archives/index.html","hash":"994aa5dee61f01c6877d4a2db5b81f2d95514d17","modified":1486728547388},{"_id":"public/archives/2017/index.html","hash":"85e7bbcb1fc57384aa456499660ba69668db731d","modified":1486728547389},{"_id":"public/archives/2017/02/index.html","hash":"e84124961158157b3ca03bf9220ef130b94aa85c","modified":1486728547389},{"_id":"public/tags/Android动态修改某个控件大小/index.html","hash":"1c99307cd335b72bc8ba25fa619ae940fa1244eb","modified":1486728547389},{"_id":"public/tags/Android自定义圆形进度条/index.html","hash":"51a09bc4e836efa0b3b6a46eb988229d9271aee3","modified":1486728547389},{"_id":"public/tags/Android设置全屏的几种方式/index.html","hash":"fee8acb0040dd4d7b4a5e2555adb2e9197817a36","modified":1486728547390},{"_id":"public/tags/EditText相关/index.html","hash":"f5b1f26836bf5a4dd861f4a79e0940a92c95820f","modified":1486728547390},{"_id":"public/index.html","hash":"d46579607103ec6c551441d233b9bab2ecd5bad2","modified":1486728547390},{"_id":"public/tags/WebView-获取网页源码/index.html","hash":"0d32a30e2c356615e4f1622833a450fa3874aa5b","modified":1486728547398},{"_id":"public/tags/github博客/index.html","hash":"1b8777b3034ca323d451a838177f58928251fe29","modified":1486728547398},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1486728547398},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1486728547399},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1486728547399},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1486728547399},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1486728547991},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1486728548009},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1486728548009},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1486728548010},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1486728548010},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1486728548011},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1486728548011},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1486728548011},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1486728548012},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1486728548012},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1486728548012},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486728548012},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1486728548012},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1486728548012}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android动态修改某个控件大小","date":"2017-02-10T12:05:15.000Z","_content":"\n1. 动态修改Margin 和 大小\nViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();\nlayoutParams.topMargin= top; //像素px\nparlayoutParamsams.width = width;\nlayoutParams.height = height;\nview.setLayoutParams(layoutParams);\n\n2. 动态修改Padding\nview.setPadding(left,top,right,bottom);\n\n3. 动态修改TextView的drawable\nDrawable icon = getResources().getDrawable(R.mipmap.img);\nicon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());\ntv.setCompoundDrawables(icon, null, null, null);\n","source":"_posts/Android动态修改某个控件大小.md","raw":"---\ntitle: Android动态修改某个控件大小\ndate: 2017-02-10 20:05:15\ntags: Android动态修改某个控件大小\n---\n\n1. 动态修改Margin 和 大小\nViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();\nlayoutParams.topMargin= top; //像素px\nparlayoutParamsams.width = width;\nlayoutParams.height = height;\nview.setLayoutParams(layoutParams);\n\n2. 动态修改Padding\nview.setPadding(left,top,right,bottom);\n\n3. 动态修改TextView的drawable\nDrawable icon = getResources().getDrawable(R.mipmap.img);\nicon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());\ntv.setCompoundDrawables(icon, null, null, null);\n","slug":"Android动态修改某个控件大小","published":1,"updated":"2017-02-10T12:05:36.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyzrsgij0000u32zzguwp5sf","content":"<ol>\n<li><p>动态修改Margin 和 大小<br>ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();<br>layoutParams.topMargin= top; //像素px<br>parlayoutParamsams.width = width;<br>layoutParams.height = height;<br>view.setLayoutParams(layoutParams);</p>\n</li>\n<li><p>动态修改Padding<br>view.setPadding(left,top,right,bottom);</p>\n</li>\n<li><p>动态修改TextView的drawable<br>Drawable icon = getResources().getDrawable(R.mipmap.img);<br>icon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());<br>tv.setCompoundDrawables(icon, null, null, null);</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>动态修改Margin 和 大小<br>ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();<br>layoutParams.topMargin= top; //像素px<br>parlayoutParamsams.width = width;<br>layoutParams.height = height;<br>view.setLayoutParams(layoutParams);</p>\n</li>\n<li><p>动态修改Padding<br>view.setPadding(left,top,right,bottom);</p>\n</li>\n<li><p>动态修改TextView的drawable<br>Drawable icon = getResources().getDrawable(R.mipmap.img);<br>icon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());<br>tv.setCompoundDrawables(icon, null, null, null);</p>\n</li>\n</ol>\n"},{"title":"Android自定义圆形进度条","date":"2017-02-10T12:08:02.000Z","_content":"1.res目录下定义旋转动画 progress_circle：\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rotate xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:drawable=\"@drawable/icon_wifi_connect_gif\"\n    android:fromDegrees=\"0\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:toDegrees=\"360\" >\n</rotate>\n\n2.定义style：\n<style name=\"mProgress_circle\">\n    <item name=\"android:indeterminateDrawable\">@drawable/progress_circle</item>\n    <item name=\"android:minWidth\">25dp</item>\n    <item name=\"android:minHeight\">25dp</item>\n    <item name=\"android:maxWidth\">60dp</item>\n    <item name=\"android:maxHeight\">60dp</item>\n</style>\n\n3.控件中设置style\n<ProgressBar\n    android:id=\"@+id/pb001\"\n    style=\"@style/mProgress_circle\"\n    android:layout_width=\"15dp\"\n    android:layout_height=\"15dp\"\n    android:indeterminateDuration=\"1200\" />\n\n\n（图片资源）\n","source":"_posts/Android自定义圆形进度条.md","raw":"---\ntitle: Android自定义圆形进度条\ndate: 2017-02-10 20:08:02\ntags: Android自定义圆形进度条\n---\n1.res目录下定义旋转动画 progress_circle：\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rotate xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:drawable=\"@drawable/icon_wifi_connect_gif\"\n    android:fromDegrees=\"0\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:toDegrees=\"360\" >\n</rotate>\n\n2.定义style：\n<style name=\"mProgress_circle\">\n    <item name=\"android:indeterminateDrawable\">@drawable/progress_circle</item>\n    <item name=\"android:minWidth\">25dp</item>\n    <item name=\"android:minHeight\">25dp</item>\n    <item name=\"android:maxWidth\">60dp</item>\n    <item name=\"android:maxHeight\">60dp</item>\n</style>\n\n3.控件中设置style\n<ProgressBar\n    android:id=\"@+id/pb001\"\n    style=\"@style/mProgress_circle\"\n    android:layout_width=\"15dp\"\n    android:layout_height=\"15dp\"\n    android:indeterminateDuration=\"1200\" />\n\n\n（图片资源）\n","slug":"Android自定义圆形进度条","published":1,"updated":"2017-02-10T12:08:23.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyzrsgit0001u32zeocwgrdd","content":"<p>1.res目录下定义旋转动画 progress_circle：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>\n<rotate xmlns:android=\"http://schemas.android.com/apk/res/android\" android:drawable=\"@drawable/icon_wifi_connect_gif\" android:fromdegrees=\"0\" android:pivotx=\"50%\" android:pivoty=\"50%\" android:todegrees=\"360\"><br></rotate>\n\n<p>2.定义style：</p>\n<style name=\"mProgress_circle\">\n    <item name=\"android:indeterminateDrawable\">@drawable/progress_circle</item>\n    <item name=\"android:minWidth\">25dp</item>\n    <item name=\"android:minHeight\">25dp</item>\n    <item name=\"android:maxWidth\">60dp</item>\n    <item name=\"android:maxHeight\">60dp</item>\n</style>\n\n<p>3.控件中设置style</p>\n<progressbar android:id=\"@+id/pb001\" style=\"@style/mProgress_circle\" android:layout_width=\"15dp\" android:layout_height=\"15dp\" android:indeterminateduration=\"1200\">\n\n\n<p>（图片资源）</p>\n</progressbar>","excerpt":"","more":"<p>1.res目录下定义旋转动画 progress_circle：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>\n<rotate xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:drawable=\"@drawable/icon_wifi_connect_gif\"\n    android:fromDegrees=\"0\"\n    android:pivotX=\"50%\"\n    android:pivotY=\"50%\"\n    android:toDegrees=\"360\" ><br></rotate>\n\n<p>2.定义style：</p>\n<style name=\"mProgress_circle\">\n    <item name=\"android:indeterminateDrawable\">@drawable/progress_circle</item>\n    <item name=\"android:minWidth\">25dp</item>\n    <item name=\"android:minHeight\">25dp</item>\n    <item name=\"android:maxWidth\">60dp</item>\n    <item name=\"android:maxHeight\">60dp</item>\n</style>\n\n<p>3.控件中设置style</p>\n<ProgressBar\n    android:id=\"@+id/pb001\"\n    style=\"@style/mProgress_circle\"\n    android:layout_width=\"15dp\"\n    android:layout_height=\"15dp\"\n    android:indeterminateDuration=\"1200\" />\n\n\n<p>（图片资源）</p>\n"},{"title":"Android设置全屏的几种方式","date":"2017-02-10T11:39:20.000Z","_content":"\n1. 将状态栏导航栏透明化，API19以上有效\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    //透明状态栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    //透明导航栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n}\n\n2. 设置全屏参数\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n3. 沉浸式\n具体参照 ： http://blog.csdn.net/sinyu890807/article/details/51763825\nView decorView = getWindow().getDecorView();\nint option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\ndecorView.setSystemUiVisibility(option);\n","source":"_posts/Android设置全屏的几种方式.md","raw":"---\ntitle: Android设置全屏的几种方式\ndate: 2017-02-10 19:39:20\ntags: Android设置全屏的几种方式\n---\n\n1. 将状态栏导航栏透明化，API19以上有效\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    //透明状态栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    //透明导航栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n}\n\n2. 设置全屏参数\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n\n3. 沉浸式\n具体参照 ： http://blog.csdn.net/sinyu890807/article/details/51763825\nView decorView = getWindow().getDecorView();\nint option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\ndecorView.setSystemUiVisibility(option);\n","slug":"Android设置全屏的几种方式","published":1,"updated":"2017-02-10T11:40:39.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyzrsgj60003u32z56616fj3","content":"<ol>\n<li><p>将状态栏导航栏透明化，API19以上有效<br>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {<br> //透明状态栏<br> getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);<br> //透明导航栏<br> getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);<br>}</p>\n</li>\n<li><p>设置全屏参数<br>getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</p>\n</li>\n<li><p>沉浸式<br>具体参照 ： <a href=\"http://blog.csdn.net/sinyu890807/article/details/51763825\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sinyu890807/article/details/51763825</a><br>View decorView = getWindow().getDecorView();<br>int option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;<br>decorView.setSystemUiVisibility(option);</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>将状态栏导航栏透明化，API19以上有效<br>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {<br> //透明状态栏<br> getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);<br> //透明导航栏<br> getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);<br>}</p>\n</li>\n<li><p>设置全屏参数<br>getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</p>\n</li>\n<li><p>沉浸式<br>具体参照 ： <a href=\"http://blog.csdn.net/sinyu890807/article/details/51763825\">http://blog.csdn.net/sinyu890807/article/details/51763825</a><br>View decorView = getWindow().getDecorView();<br>int option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;<br>decorView.setSystemUiVisibility(option);</p>\n</li>\n</ol>\n"},{"title":"EditText相关","date":"2017-02-10T12:07:11.000Z","_content":"1.光标\nx_count.setCursorVisible(true); //设置光标\ntx_count.setSelection(tx_count.length()); //设置光标位置\n\n2.自动弹窗软键盘\ntx_count.requestFocus();\nInputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);\n\n3.输入监听\ntx_count.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n\n4.xml:\nandroid:inputType=\"phone\" //输入类型\nandroid:digits=\"0123456789.\" //只能输入数字和点\nandroid:background=\"@null\" //背景为空\nandroid:cursorVisible=\"false\" //不显示光标\nandroid:maxLength=\"5\" //5个字符\n\n5.AndroidManifest.xml\nandroid:windowSoftInputMode=\"stateHidden|stateAlwaysHidden\"  //不弹出软键盘\nandroid:windowSoftInputMode=\"stateVisible|stateAlwaysVisible\"  //自动弹出软键盘\n","source":"_posts/EditText相关.md","raw":"---\ntitle: EditText相关\ndate: 2017-02-10 20:07:11\ntags: EditText相关\n---\n1.光标\nx_count.setCursorVisible(true); //设置光标\ntx_count.setSelection(tx_count.length()); //设置光标位置\n\n2.自动弹窗软键盘\ntx_count.requestFocus();\nInputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);\n\n3.输入监听\ntx_count.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n\n4.xml:\nandroid:inputType=\"phone\" //输入类型\nandroid:digits=\"0123456789.\" //只能输入数字和点\nandroid:background=\"@null\" //背景为空\nandroid:cursorVisible=\"false\" //不显示光标\nandroid:maxLength=\"5\" //5个字符\n\n5.AndroidManifest.xml\nandroid:windowSoftInputMode=\"stateHidden|stateAlwaysHidden\"  //不弹出软键盘\nandroid:windowSoftInputMode=\"stateVisible|stateAlwaysVisible\"  //自动弹出软键盘\n","slug":"EditText相关","published":1,"updated":"2017-02-10T12:07:32.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyzrsgjb0004u32z3i1zmz9v","content":"<p>1.光标<br>x_count.setCursorVisible(true); //设置光标<br>tx_count.setSelection(tx_count.length()); //设置光标位置</p>\n<p>2.自动弹窗软键盘<br>tx_count.requestFocus();<br>InputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);<br>imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</p>\n<p>3.输入监听<br>tx_count.addTextChangedListener(new TextWatcher() {<br>    @Override<br>    public void beforeTextChanged(CharSequence s, int start, int count, int after) {<br>    }<br>    @Override<br>    public void onTextChanged(CharSequence s, int start, int before, int count) {<br>    }<br>    @Override<br>    public void afterTextChanged(Editable s) {<br>    }<br>});</p>\n<p>4.xml:<br>android:inputType=”phone” //输入类型<br>android:digits=”0123456789.” //只能输入数字和点<br>android:background=”@null” //背景为空<br>android:cursorVisible=”false” //不显示光标<br>android:maxLength=”5” //5个字符</p>\n<p>5.AndroidManifest.xml<br>android:windowSoftInputMode=”stateHidden|stateAlwaysHidden”  //不弹出软键盘<br>android:windowSoftInputMode=”stateVisible|stateAlwaysVisible”  //自动弹出软键盘</p>\n","excerpt":"","more":"<p>1.光标<br>x_count.setCursorVisible(true); //设置光标<br>tx_count.setSelection(tx_count.length()); //设置光标位置</p>\n<p>2.自动弹窗软键盘<br>tx_count.requestFocus();<br>InputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);<br>imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</p>\n<p>3.输入监听<br>tx_count.addTextChangedListener(new TextWatcher() {<br>    @Override<br>    public void beforeTextChanged(CharSequence s, int start, int count, int after) {<br>    }<br>    @Override<br>    public void onTextChanged(CharSequence s, int start, int before, int count) {<br>    }<br>    @Override<br>    public void afterTextChanged(Editable s) {<br>    }<br>});</p>\n<p>4.xml:<br>android:inputType=”phone” //输入类型<br>android:digits=”0123456789.” //只能输入数字和点<br>android:background=”@null” //背景为空<br>android:cursorVisible=”false” //不显示光标<br>android:maxLength=”5” //5个字符</p>\n<p>5.AndroidManifest.xml<br>android:windowSoftInputMode=”stateHidden|stateAlwaysHidden”  //不弹出软键盘<br>android:windowSoftInputMode=”stateVisible|stateAlwaysVisible”  //自动弹出软键盘</p>\n"},{"title":"WebView 获取网页源码","date":"2017-02-10T11:59:27.000Z","_content":"Api-19以上获取源码的方式有修改，如下：\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    mWebView.evaluateJavascript(\n            \"(function() { return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>'); })();\",\n            new ValueCallback<String>() {\n                @Override\n                public void onReceiveValue(String html) {\n                    Log.d(\"HTML\", \"whd >>html:\" + html);\n                    mHtmlSource = html;\n                }\n            });\n} else {\n   view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n}\n\nApi-19以上获取源码的方式，如下：\nAndroid： 在WebView中获取网页源码            \n\n1. 使能javascript：\nwebView.getSettings().setJavaScriptEnabled(true);\n\n2. 编写本地接口\nfinal class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(\"HTML\", html);\n    }\n}\n\n3. 向网页暴露本地接口\nwebView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n\n4. 编写自己的WebViewClient，并在onPageFinished中提取网页源码。\nfinal class MyWebViewClient extends WebViewClient{   \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n        view.loadUrl(url);    \n        return true;    \n    }   \n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        Log.d(\"WebView\",\"onPageStarted\"); window.imagelistner.getImage(this.src)\n        super.onPageStarted(view, url, favicon);\n    }     \n    public void onPageFinished(WebView view, String url) {\n        Log.d(\"WebView\",\"onPageFinished \");\n        view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n        super.onPageFinished(view, url);\n    }\n}\n\n\n组合在一起的代码为：\npackage com.hi.briancol.htmlsource;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\npublic class HtmlSource extends Activity {\n    private WebView webView;\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        webView = (WebView)findViewById(R.id.webview);\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n        webView.setWebViewClient(new MyWebViewClient());\n        webView.loadUrl(\"http://www.cnblogs.com/hibraincol/\");\n    }\n\n\n   final class MyWebViewClient extends WebViewClient{   \n        public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n            view.loadUrl(url);    \n            return true;    \n        }   \n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            Log.d(\"WebView\",\"onPageStarted\");\n            super.onPageStarted(view, url, favicon);\n        }     \n        public void onPageFinished(WebView view, String url) {\n            Log.d(\"WebView\",\"onPageFinished \");\n            view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                    \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n            super.onPageFinished(view, url);\n        }\n    }\n\n    final class InJavaScriptLocalObj {\n        public void showSource(String html) {\n            Log.d(\"HTML\", html);\n        }\n    }\n}\n\n\n关键之处在于：\nview.loadUrl(\"javascript:window.local_obj.showSource('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n\n运行，可以看到在showSource(String html)中打印了网页源码。\n","source":"_posts/WebView-获取网页源码.md","raw":"---\ntitle: WebView 获取网页源码\ndate: 2017-02-10 19:59:27\ntags: WebView 获取网页源码\n---\nApi-19以上获取源码的方式有修改，如下：\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    mWebView.evaluateJavascript(\n            \"(function() { return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>'); })();\",\n            new ValueCallback<String>() {\n                @Override\n                public void onReceiveValue(String html) {\n                    Log.d(\"HTML\", \"whd >>html:\" + html);\n                    mHtmlSource = html;\n                }\n            });\n} else {\n   view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n}\n\nApi-19以上获取源码的方式，如下：\nAndroid： 在WebView中获取网页源码            \n\n1. 使能javascript：\nwebView.getSettings().setJavaScriptEnabled(true);\n\n2. 编写本地接口\nfinal class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(\"HTML\", html);\n    }\n}\n\n3. 向网页暴露本地接口\nwebView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n\n4. 编写自己的WebViewClient，并在onPageFinished中提取网页源码。\nfinal class MyWebViewClient extends WebViewClient{   \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n        view.loadUrl(url);    \n        return true;    \n    }   \n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        Log.d(\"WebView\",\"onPageStarted\"); window.imagelistner.getImage(this.src)\n        super.onPageStarted(view, url, favicon);\n    }     \n    public void onPageFinished(WebView view, String url) {\n        Log.d(\"WebView\",\"onPageFinished \");\n        view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n        super.onPageFinished(view, url);\n    }\n}\n\n\n组合在一起的代码为：\npackage com.hi.briancol.htmlsource;\n\nimport android.app.Activity;\nimport android.graphics.Bitmap;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\npublic class HtmlSource extends Activity {\n    private WebView webView;\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        webView = (WebView)findViewById(R.id.webview);\n        webView.getSettings().setJavaScriptEnabled(true);\n        webView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n        webView.setWebViewClient(new MyWebViewClient());\n        webView.loadUrl(\"http://www.cnblogs.com/hibraincol/\");\n    }\n\n\n   final class MyWebViewClient extends WebViewClient{   \n        public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n            view.loadUrl(url);    \n            return true;    \n        }   \n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            Log.d(\"WebView\",\"onPageStarted\");\n            super.onPageStarted(view, url, favicon);\n        }     \n        public void onPageFinished(WebView view, String url) {\n            Log.d(\"WebView\",\"onPageFinished \");\n            view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                    \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n            super.onPageFinished(view, url);\n        }\n    }\n\n    final class InJavaScriptLocalObj {\n        public void showSource(String html) {\n            Log.d(\"HTML\", html);\n        }\n    }\n}\n\n\n关键之处在于：\nview.loadUrl(\"javascript:window.local_obj.showSource('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n\n运行，可以看到在showSource(String html)中打印了网页源码。\n","slug":"WebView-获取网页源码","published":1,"updated":"2017-02-10T12:00:00.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyzrsgji0005u32zyb2sjk4m","content":"<p>Api-19以上获取源码的方式有修改，如下：<br>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {<br>    mWebView.evaluateJavascript(<br>            “(function() { return (‘<html>‘+document.getElementsByTagName(‘html’)[0].innerHTML+’</html>‘); })();”,<br>            new ValueCallback<string>() {<br>                @Override<br>                public void onReceiveValue(String html) {<br>                    Log.d(“HTML”, “whd &gt;&gt;html:” + html);<br>                    mHtmlSource = html;<br>                }<br>            });<br>} else {<br>   view.loadUrl(“javascript:window.local_obj.showSource(‘<head>‘+” +<br>                “document.getElementsByTagName(‘html’)[0].innerHTML+’</head>‘);”);<br>}</string></p>\n<p>Api-19以上获取源码的方式，如下：<br>Android： 在WebView中获取网页源码            </p>\n<ol>\n<li><p>使能javascript：<br>webView.getSettings().setJavaScriptEnabled(true);</p>\n</li>\n<li><p>编写本地接口<br>final class InJavaScriptLocalObj {<br> public void showSource(String html) {</p>\n<pre><code>Log.d(&quot;HTML&quot;, html);\n</code></pre><p> }<br>}</p>\n</li>\n<li><p>向网页暴露本地接口<br>webView.addJavascriptInterface(new InJavaScriptLocalObj(), “local_obj”);</p>\n</li>\n<li><p>编写自己的WebViewClient，并在onPageFinished中提取网页源码。<br>final class MyWebViewClient extends WebViewClient{<br> public boolean shouldOverrideUrlLoading(WebView view, String url) {    </p>\n<pre><code>view.loadUrl(url);    \nreturn true;    \n</code></pre><p> }<br> public void onPageStarted(WebView view, String url, Bitmap favicon) {</p>\n<pre><code>Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;); window.imagelistner.getImage(this.src)\nsuper.onPageStarted(view, url, favicon);\n</code></pre><p> }<br> public void onPageFinished(WebView view, String url) {</p>\n<pre><code>Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);\nview.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +\n        &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);\nsuper.onPageFinished(view, url);\n</code></pre><p> }<br>}</p>\n</li>\n</ol>\n<p>组合在一起的代码为：<br>package com.hi.briancol.htmlsource;</p>\n<p>import android.app.Activity;<br>import android.graphics.Bitmap;<br>import android.os.Bundle;<br>import android.util.Log;<br>import android.webkit.WebView;<br>import android.webkit.WebViewClient;</p>\n<p>public class HtmlSource extends Activity {<br>    private WebView webView;<br>    /<em>* Called when the activity is first created. </em>/<br>    @Override<br>    public void onCreate(Bundle savedInstanceState) {<br>        super.onCreate(savedInstanceState);<br>        setContentView(R.layout.main);<br>        webView = (WebView)findViewById(R.id.webview);<br>        webView.getSettings().setJavaScriptEnabled(true);<br>        webView.addJavascriptInterface(new InJavaScriptLocalObj(), “local_obj”);<br>        webView.setWebViewClient(new MyWebViewClient());<br>        webView.loadUrl(“<a href=\"http://www.cnblogs.com/hibraincol/\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/hibraincol/</a>“);<br>    }</p>\n<p>   final class MyWebViewClient extends WebViewClient{<br>        public boolean shouldOverrideUrlLoading(WebView view, String url) {<br>            view.loadUrl(url);<br>            return true;<br>        }<br>        public void onPageStarted(WebView view, String url, Bitmap favicon) {<br>            Log.d(“WebView”,”onPageStarted”);<br>            super.onPageStarted(view, url, favicon);<br>        }<br>        public void onPageFinished(WebView view, String url) {<br>            Log.d(“WebView”,”onPageFinished “);<br>            view.loadUrl(“javascript:window.local_obj.showSource(‘<head>‘+” +<br>                    “document.getElementsByTagName(‘html’)[0].innerHTML+’</head>‘);”);<br>            super.onPageFinished(view, url);<br>        }<br>    }</p>\n<pre><code>final class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(&quot;HTML&quot;, html);\n    }\n}\n</code></pre><p>}</p>\n<p>关键之处在于：<br>view.loadUrl(“javascript:window.local_obj.showSource(‘<head>‘+document.getElementsByTagName(‘html’)[0].innerHTML+’</head>‘);”);</p>\n<p>运行，可以看到在showSource(String html)中打印了网页源码。</p>\n","excerpt":"","more":"<p>Api-19以上获取源码的方式有修改，如下：<br>if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {<br>    mWebView.evaluateJavascript(<br>            “(function() { return (‘<html>‘+document.getElementsByTagName(‘html’)[0].innerHTML+’</html>‘); })();”,<br>            new ValueCallback<String>() {<br>                @Override<br>                public void onReceiveValue(String html) {<br>                    Log.d(“HTML”, “whd &gt;&gt;html:” + html);<br>                    mHtmlSource = html;<br>                }<br>            });<br>} else {<br>   view.loadUrl(“javascript:window.local_obj.showSource(‘<head>‘+” +<br>                “document.getElementsByTagName(‘html’)[0].innerHTML+’</head>‘);”);<br>}</p>\n<p>Api-19以上获取源码的方式，如下：<br>Android： 在WebView中获取网页源码            </p>\n<ol>\n<li><p>使能javascript：<br>webView.getSettings().setJavaScriptEnabled(true);</p>\n</li>\n<li><p>编写本地接口<br>final class InJavaScriptLocalObj {<br> public void showSource(String html) {</p>\n<pre><code>Log.d(&quot;HTML&quot;, html);\n</code></pre><p> }<br>}</p>\n</li>\n<li><p>向网页暴露本地接口<br>webView.addJavascriptInterface(new InJavaScriptLocalObj(), “local_obj”);</p>\n</li>\n<li><p>编写自己的WebViewClient，并在onPageFinished中提取网页源码。<br>final class MyWebViewClient extends WebViewClient{<br> public boolean shouldOverrideUrlLoading(WebView view, String url) {    </p>\n<pre><code>view.loadUrl(url);    \nreturn true;    \n</code></pre><p> }<br> public void onPageStarted(WebView view, String url, Bitmap favicon) {</p>\n<pre><code>Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;); window.imagelistner.getImage(this.src)\nsuper.onPageStarted(view, url, favicon);\n</code></pre><p> }<br> public void onPageFinished(WebView view, String url) {</p>\n<pre><code>Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);\nview.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +\n        &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);\nsuper.onPageFinished(view, url);\n</code></pre><p> }<br>}</p>\n</li>\n</ol>\n<p>组合在一起的代码为：<br>package com.hi.briancol.htmlsource;</p>\n<p>import android.app.Activity;<br>import android.graphics.Bitmap;<br>import android.os.Bundle;<br>import android.util.Log;<br>import android.webkit.WebView;<br>import android.webkit.WebViewClient;</p>\n<p>public class HtmlSource extends Activity {<br>    private WebView webView;<br>    /<em>* Called when the activity is first created. </em>/<br>    @Override<br>    public void onCreate(Bundle savedInstanceState) {<br>        super.onCreate(savedInstanceState);<br>        setContentView(R.layout.main);<br>        webView = (WebView)findViewById(R.id.webview);<br>        webView.getSettings().setJavaScriptEnabled(true);<br>        webView.addJavascriptInterface(new InJavaScriptLocalObj(), “local_obj”);<br>        webView.setWebViewClient(new MyWebViewClient());<br>        webView.loadUrl(“<a href=\"http://www.cnblogs.com/hibraincol/\">http://www.cnblogs.com/hibraincol/</a>“);<br>    }</p>\n<p>   final class MyWebViewClient extends WebViewClient{<br>        public boolean shouldOverrideUrlLoading(WebView view, String url) {<br>            view.loadUrl(url);<br>            return true;<br>        }<br>        public void onPageStarted(WebView view, String url, Bitmap favicon) {<br>            Log.d(“WebView”,”onPageStarted”);<br>            super.onPageStarted(view, url, favicon);<br>        }<br>        public void onPageFinished(WebView view, String url) {<br>            Log.d(“WebView”,”onPageFinished “);<br>            view.loadUrl(“javascript:window.local_obj.showSource(‘<head>‘+” +<br>                    “document.getElementsByTagName(‘html’)[0].innerHTML+’</head>‘);”);<br>            super.onPageFinished(view, url);<br>        }<br>    }</p>\n<pre><code>final class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(&quot;HTML&quot;, html);\n    }\n}\n</code></pre><p>}</p>\n<p>关键之处在于：<br>view.loadUrl(“javascript:window.local_obj.showSource(‘<head>‘+document.getElementsByTagName(‘html’)[0].innerHTML+’</head>‘);”);</p>\n<p>运行，可以看到在showSource(String html)中打印了网页源码。</p>\n"},{"title":"Ubuntu下使用Hexo创建Gitbub博客","date":"2017-02-10T06:06:55.000Z","_content":"1.环境配置\n安装 node.js : $sudo apt install nodejs-legacy\n安装 npm ： $sudo apt install npm\n安装 git\n安装 hexo ： $sudo npm install hexo -g\n\n2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）\n\n3.初始化博客，命令行输入下列命令：\n$git init\n$git remote add origin \"git url\"\n$git pull origing master\n\n$hexo init\n$hexo s -g #预览\n\n编辑根目录下的_config.yml 末尾添加下列代码:\n  deploy:\n  type: git\n  repository: https://github.com/AndWong/AndWong.github.io.git\n  branch: master\n\n$npm install hexo-deployer-git --save\n$hexo clean\n$hexo d -g #发布\n\n4.访问 https://andwong.github.io/ #查看\n\n「疑问 : 换台电脑后如何发布博客?」\n上述步骤执行完后master主支就有相应的内容,\n此时新建一个分支blog用于存放博客内容,\n新设备只需pull blog分支修改博客并push就行.\n如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g\n\n————–分割线————\n在_config.yml中修改:\ntitle: Wong Blog #修改页面标题\nauthor: Wong #修改作者\ntheme: hexo-theme-aiki #修改主题样式\n","source":"_posts/gitbub-blog.md","raw":"---\ntitle: Ubuntu下使用Hexo创建Gitbub博客\ndate: 2017-02-10 14:06:55\ntags: github博客\n---\n1.环境配置\n安装 node.js : $sudo apt install nodejs-legacy\n安装 npm ： $sudo apt install npm\n安装 git\n安装 hexo ： $sudo npm install hexo -g\n\n2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）\n\n3.初始化博客，命令行输入下列命令：\n$git init\n$git remote add origin \"git url\"\n$git pull origing master\n\n$hexo init\n$hexo s -g #预览\n\n编辑根目录下的_config.yml 末尾添加下列代码:\n  deploy:\n  type: git\n  repository: https://github.com/AndWong/AndWong.github.io.git\n  branch: master\n\n$npm install hexo-deployer-git --save\n$hexo clean\n$hexo d -g #发布\n\n4.访问 https://andwong.github.io/ #查看\n\n「疑问 : 换台电脑后如何发布博客?」\n上述步骤执行完后master主支就有相应的内容,\n此时新建一个分支blog用于存放博客内容,\n新设备只需pull blog分支修改博客并push就行.\n如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g\n\n————–分割线————\n在_config.yml中修改:\ntitle: Wong Blog #修改页面标题\nauthor: Wong #修改作者\ntheme: hexo-theme-aiki #修改主题样式\n","slug":"gitbub-blog","published":1,"updated":"2017-02-10T11:54:25.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyzrsgjm0008u32z1ogl6l8x","content":"<p>1.环境配置<br>安装 node.js : $sudo apt install nodejs-legacy<br>安装 npm ： $sudo apt install npm<br>安装 git<br>安装 hexo ： $sudo npm install hexo -g</p>\n<p>2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）</p>\n<p>3.初始化博客，命令行输入下列命令：<br>$git init<br>$git remote add origin “git url”<br>$git pull origing master</p>\n<p>$hexo init<br>$hexo s -g #预览</p>\n<p>编辑根目录下的_config.yml 末尾添加下列代码:<br>  deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/AndWong/AndWong.github.io.git\" target=\"_blank\" rel=\"external\">https://github.com/AndWong/AndWong.github.io.git</a><br>  branch: master</p>\n<p>$npm install hexo-deployer-git –save<br>$hexo clean<br>$hexo d -g #发布</p>\n<p>4.访问 <a href=\"https://andwong.github.io/\" target=\"_blank\" rel=\"external\">https://andwong.github.io/</a> #查看</p>\n<p>「疑问 : 换台电脑后如何发布博客?」<br>上述步骤执行完后master主支就有相应的内容,<br>此时新建一个分支blog用于存放博客内容,<br>新设备只需pull blog分支修改博客并push就行.<br>如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g</p>\n<p>————–分割线————<br>在_config.yml中修改:<br>title: Wong Blog #修改页面标题<br>author: Wong #修改作者<br>theme: hexo-theme-aiki #修改主题样式</p>\n","excerpt":"","more":"<p>1.环境配置<br>安装 node.js : $sudo apt install nodejs-legacy<br>安装 npm ： $sudo apt install npm<br>安装 git<br>安装 hexo ： $sudo npm install hexo -g</p>\n<p>2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）</p>\n<p>3.初始化博客，命令行输入下列命令：<br>$git init<br>$git remote add origin “git url”<br>$git pull origing master</p>\n<p>$hexo init<br>$hexo s -g #预览</p>\n<p>编辑根目录下的_config.yml 末尾添加下列代码:<br>  deploy:<br>  type: git<br>  repository: <a href=\"https://github.com/AndWong/AndWong.github.io.git\">https://github.com/AndWong/AndWong.github.io.git</a><br>  branch: master</p>\n<p>$npm install hexo-deployer-git –save<br>$hexo clean<br>$hexo d -g #发布</p>\n<p>4.访问 <a href=\"https://andwong.github.io/\">https://andwong.github.io/</a> #查看</p>\n<p>「疑问 : 换台电脑后如何发布博客?」<br>上述步骤执行完后master主支就有相应的内容,<br>此时新建一个分支blog用于存放博客内容,<br>新设备只需pull blog分支修改博客并push就行.<br>如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g</p>\n<p>————–分割线————<br>在_config.yml中修改:<br>title: Wong Blog #修改页面标题<br>author: Wong #修改作者<br>theme: hexo-theme-aiki #修改主题样式</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciyzrsgij0000u32zzguwp5sf","tag_id":"ciyzrsgj00002u32z6bcuv063","_id":"ciyzrsgjl0007u32zh03dk3c0"},{"post_id":"ciyzrsgit0001u32zeocwgrdd","tag_id":"ciyzrsgjk0006u32z1hilm2tv","_id":"ciyzrsgjv000au32ztvpwh5vp"},{"post_id":"ciyzrsgj60003u32z56616fj3","tag_id":"ciyzrsgju0009u32zkui1z5fg","_id":"ciyzrsgjv000cu32zy5m8mzy2"},{"post_id":"ciyzrsgjb0004u32z3i1zmz9v","tag_id":"ciyzrsgjv000bu32zy9b5ql04","_id":"ciyzrsgjw000eu32zbb8kqgrx"},{"post_id":"ciyzrsgji0005u32zyb2sjk4m","tag_id":"ciyzrsgjw000du32zjherzlkz","_id":"ciyzrsgjz000gu32zh73isnof"},{"post_id":"ciyzrsgjm0008u32z1ogl6l8x","tag_id":"ciyzrsgjx000fu32zwcln21eu","_id":"ciyzrsgjz000hu32znmk3yfxk"}],"Tag":[{"name":"Android动态修改某个控件大小","_id":"ciyzrsgj00002u32z6bcuv063"},{"name":"Android自定义圆形进度条","_id":"ciyzrsgjk0006u32z1hilm2tv"},{"name":"Android设置全屏的几种方式","_id":"ciyzrsgju0009u32zkui1z5fg"},{"name":"EditText相关","_id":"ciyzrsgjv000bu32zy9b5ql04"},{"name":"WebView 获取网页源码","_id":"ciyzrsgjw000du32zjherzlkz"},{"name":"github博客","_id":"ciyzrsgjx000fu32zwcln21eu"}]}}