{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/solar-theme-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/earth.png","path":"images/earth.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/mars.png","path":"images/mars.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/mercury.png","path":"images/mercury.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/shadow.png","path":"images/shadow.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/venus.png","path":"images/venus.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/jupiter.png","path":"images/jupiter.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/sun.png","path":"images/sun.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/justified-gallery/justifiedGallery.min.css","path":"lib/justified-gallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/styles.css","path":"lib/meslo-LG/styles.css","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/justified-gallery/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/images/Solar.png","path":"images/Solar.png","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","path":"lib/meslo-LG/fonts/MesloLGS-Regular.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/solar-theme-hexo/LICENSE","hash":"5ba0225e835bf8218d1524f481efc50c85447745","modified":1486815625213},{"_id":"themes/solar-theme-hexo/README.md","hash":"2ff73c09ebd6629da69d289f29849ab3047d948b","modified":1486815625213},{"_id":"themes/solar-theme-hexo/_config.yml","hash":"efb38583b0e54ad4020a79fbad4f250c03bcd4d5","modified":1487247573302},{"_id":"source/_posts/Android-SQLite的使用.md","hash":"89f12a1f6feb2d8b221ef62e74347d2997aafe0d","modified":1487245909156},{"_id":"source/_posts/Android中Handler的简单终结.md","hash":"3c07b96e72d00c3ba8c74e6e9e242f7e0cbb6e36","modified":1487246005526},{"_id":"source/_posts/Android事件分发机制的简单解读.md","hash":"5cf6c69cfa25bf9d428120b708f5001f70ae897b","modified":1486907158487},{"_id":"source/_posts/Android动态修改某个控件大小.md","hash":"ce5b997e6f0f3166f5c1117c2cd07a81cb6ce169","modified":1487246083907},{"_id":"source/_posts/Android设置全屏的几种方式.md","hash":"b2c0bea06c6d3679ba45708a6db2aa46fe7193a7","modified":1487246040421},{"_id":"source/_posts/EditText相关.md","hash":"ddd8acc2887c7b74959c3f99f700deb4147103e9","modified":1487245983109},{"_id":"source/_posts/Markdown的初级使用.md","hash":"2c38b631cab8c30b71c9207b84959d337e6aae58","modified":1487250325806},{"_id":"source/_posts/WebView-获取网页源码.md","hash":"036678f2ebe7fb9f2c03427032c99cd1830827c4","modified":1487245948335},{"_id":"source/_posts/WiFi-Portal检测.md","hash":"16aa338f7e25ea090459aa8076c7b09c980ee93c","modified":1487245810227},{"_id":"source/_posts/gitbub-blog.md","hash":"453878728a287b09c324dab797093aa20be7af4a","modified":1487246118305},{"_id":"source/_posts/四大组件之Activity.md","hash":"40800873620391122761234ee9afce067e487a44","modified":1487247148257},{"_id":"source/_posts/如何在moudle中引入aar.md","hash":"1ffcf15c11ece8de20ea17d1cf0d18a46f3aeb4b","modified":1487248853730},{"_id":"source/_posts/记一次使用Realm的体会.md","hash":"362d8173760d97be89b93012dfd463d9c0a31a2b","modified":1487250434058},{"_id":"themes/solar-theme-hexo/layout/archive.ejs","hash":"f9c0434f023bdf2858aa8447137463c3224814be","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/index.ejs","hash":"0ea23cf9f01820a7e1c86600110afa876041cd25","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout.ejs","hash":"52b18d33641395aa85c1f099380ffe79eb8dd3e1","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1486815625217},{"_id":"themes/solar-theme-hexo/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1486815625217},{"_id":"themes/solar-theme-hexo/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/banner.ejs","hash":"2611a9acb5392f425531610f5a12d396270041f7","modified":1486815625213},{"_id":"themes/solar-theme-hexo/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1486815625213},{"_id":"themes/solar-theme-hexo/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1486815625213},{"_id":"themes/solar-theme-hexo/layout/_partial/head.ejs","hash":"5b6f73a4fb96edde3005f90063509bf851714f72","modified":1486815625213},{"_id":"themes/solar-theme-hexo/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/scripts.ejs","hash":"264e49c76744a2ce5be4cd69910cab8e0f517eda","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/archive.ejs","hash":"f9c0434f023bdf2858aa8447137463c3224814be","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/index.ejs","hash":"0ea23cf9f01820a7e1c86600110afa876041cd25","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/layout.ejs","hash":"52b18d33641395aa85c1f099380ffe79eb8dd3e1","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/page.ejs","hash":"b6b7b1e6dc856a0e62f35da0151f67ba41143e04","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_extend.styl","hash":"2d360cc07d3cfe10fd95640346515f51fa0ea799","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_mixins.styl","hash":"c921ceb620deedddd38c9cec28190995e8764bab","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_util.styl","hash":"f8e286a21c7ec3e771d5ddeb2909ac92390af9bd","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_variables.styl","hash":"05dfdc680b2a156f615433a5978bf80178acb26f","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/style.styl","hash":"2b9c9697d30759cb3c49b52486b6fc34bcfbe464","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/images/apple-touch-icon.png","hash":"bb91acbedda435287809e41148b1b255cdf957dc","modified":1486815625225},{"_id":"themes/solar-theme-hexo/source/images/earth.png","hash":"2cdcc68e36457410c633a578bb7b30a803193ecb","modified":1486815625225},{"_id":"themes/solar-theme-hexo/source/images/favicon-192x192.png","hash":"4b07282018db1888c7bc707a3e1b576c5684eabb","modified":1486815625225},{"_id":"themes/solar-theme-hexo/source/images/favicon.ico","hash":"54972e5dafeb73579b30c17232553c688d702448","modified":1486815625225},{"_id":"themes/solar-theme-hexo/source/images/logo.png","hash":"2084e1813f7310d9543a37608f4e6690d600b9c3","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/images/mars.png","hash":"4b33fb4ef0359cb401d4ed6d862caf55fb560802","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/images/mercury.png","hash":"e5ecda952ae568b8890026c7ab02a175652535a2","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/images/shadow.png","hash":"ec5cfff7997edd1b5e01516604daca7c7a4f3788","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/images/venus.png","hash":"d45968836d952cd017439323135e6fad155c45ae","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/js/main.js","hash":"481f730da10e5c9e1d59dfa9f1c0714ae709a0b8","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/css/_partial/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/images/jupiter.png","hash":"4b7bc03b4cdf2fcde13e982aef340a1d385a3e7d","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/images/sun.png","hash":"62be3d54471271a1e8adb348a3f021ef001b4668","modified":1486815625229},{"_id":"themes/solar-theme-hexo/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/banner.ejs","hash":"f4359350f4b79b14a9d669055911d50d7a3dfd89","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/comments.ejs","hash":"853a4500da515ef3facc51a055886eaf8efd080d","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/footer.ejs","hash":"7f6b3f126a58e6734b658ab57bc6b41822bc9342","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/head.ejs","hash":"5b6f73a4fb96edde3005f90063509bf851714f72","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/header.ejs","hash":"889fe54bbfd1fb3357e8c0614d57a437a72f782a","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/scripts.ejs","hash":"264e49c76744a2ce5be4cd69910cab8e0f517eda","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/kimbie.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/lightcode.styl","hash":"6c61c481836f6cbc3a57be10fa3af21bee83eb09","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/paraiso.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/article.styl","hash":"7bd68ecc8ebeb70daa74bfc179f984032eef18ae","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/comments.styl","hash":"11fb41241a13971d23fc3f7e6d60315c7f248396","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/footer.styl","hash":"b7570de60eaf9aa6b0192bf9c71b9172ff11bfbc","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/header.styl","hash":"1545e8303fe36bbabb4da4a967c424de07d93dec","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/index.styl","hash":"cf43702450ea1e5617541501886982a394cff8ec","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/solar.styl","hash":"3af61c9b8033a4b804f0e1ba52525b55d6e16126","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1486815625245},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1486815625297},{"_id":"themes/solar-theme-hexo/source/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1486815625245},{"_id":"themes/solar-theme-hexo/source/images/Solar.png","hash":"463dbb952527b3d35c6203575eec552f62fd9d8e","modified":1486815625225},{"_id":"themes/solar-theme-hexo/source/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1486815625245},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/actions_desktop.ejs","hash":"2319dea76f205c27dd59c994921f66350df8027a","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/actions_mobile.ejs","hash":"e7638a83e5aaa4bf5b24440ca76fec8eb563bed7","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/share.ejs","hash":"25a3406f97e976ec13239f0d3f32f9e512511f50","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/tag.ejs","hash":"bfab03ef986d35ccad583f2d2b575db4a8d2789e","modified":1486815625217},{"_id":"themes/solar-theme-hexo/layout/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1486815625217},{"_id":"themes/solar-theme-hexo/source/css/_partial/post/actions_desktop.styl","hash":"ee37b3ef5bc3efa0e5795ca72de29ee1a316434f","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/css/_partial/post/actions_mobile.styl","hash":"d308fd8efe15cf089ec170873337cbabefae42ac","modified":1486815625221},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1486815625229},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1486815625233},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1486815625233},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1486815625241},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1486815625245},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1486815625241},{"_id":"themes/solar-theme-hexo/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1486815625237},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1486815625269},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1486815625293},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1486815625297},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1486815625253},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1486815625261},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1486815625277},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1486815625277},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1486815625285},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1486815625293},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1486815625293},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1486815625293},{"_id":"themes/solar-theme-hexo/source/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1486815625297},{"_id":"public/2017/02/16/如何在moudle中引入aar/index.html","hash":"036188c45f6756e9656b0e6a54a22c4606c282a8","modified":1487250478879},{"_id":"public/2017/02/16/Markdown的初级使用/index.html","hash":"2eb8e32f09e84976f98e447ab22659fff1a82bea","modified":1487250478880},{"_id":"public/2017/02/12/Android中Handler的简单终结/index.html","hash":"353742474357cf1bb91265c49c0c756b006fddd4","modified":1487250478881},{"_id":"public/2017/02/12/Android事件分发机制的简单解读/index.html","hash":"189c27023fce135c0e2ca7a516d2e4f8edbf9886","modified":1487250478881},{"_id":"public/2017/02/10/Android设置全屏的几种方式/index.html","hash":"10d0d7807fde393c465dc74453be38141f8f6dc0","modified":1487250478882},{"_id":"public/2017/01/21/EditText相关/index.html","hash":"1160f8594a964b464a7d6c9c057c2708faa00088","modified":1487250478882},{"_id":"public/2017/01/10/Android动态修改某个控件大小/index.html","hash":"817cde7710f3a4e95c01f54c857eb2827a001357","modified":1487250478882},{"_id":"public/2017/01/05/gitbub-blog/index.html","hash":"d22864cf77fa69ae8a33918237a4a3164aaeb43f","modified":1487250478882},{"_id":"public/archives/index.html","hash":"80ccdbb8193151016d1ea15dbefff65f1b4001f9","modified":1487250478882},{"_id":"public/archives/page/2/index.html","hash":"17adbc1eca052e1b6360ea6327b7bee7ebf83af8","modified":1487250478882},{"_id":"public/archives/2017/index.html","hash":"ed5f2b03732d9f56f3f5228582171fb4ee4d2166","modified":1487250478883},{"_id":"public/archives/2017/page/2/index.html","hash":"fa98a3e7e5e932b266cd35ef3fffc17a9e3a8cc4","modified":1487250478883},{"_id":"public/archives/2017/01/index.html","hash":"6da5ce358cb33aa7704f953ee3e0c08b11cfd3ed","modified":1487250478885},{"_id":"public/archives/2017/02/index.html","hash":"a242849d2292431e4297a536dec847ff59942a92","modified":1487250478885},{"_id":"public/index.html","hash":"6e365deb13508a5d948223cfb570202ba5b91ae0","modified":1487250478886},{"_id":"public/page/2/index.html","hash":"a0b8ae6824e7c3d70d9286bb8b84a06c5c53912b","modified":1487250478887},{"_id":"public/tags/Android/index.html","hash":"5ea59d44b3053f479b4e27b30fe703b2d1c11ab3","modified":1487250478887},{"_id":"public/tags/tools/index.html","hash":"699eaa446e5bc1ba3335ce022760e61e9cde7f21","modified":1487250478887},{"_id":"public/tags/github/index.html","hash":"ad0f7178694e387838c63aad8205bf76eb28bbfc","modified":1487250478887},{"_id":"public/tags/四大组件之Activity/index.html","hash":"527c78cf13a2cc143198961bdf8aca0fde44485b","modified":1487250478887},{"_id":"public/tags/Android-Studio/index.html","hash":"945196b138cdcfdb4147105bb92848278714c0c5","modified":1487250478888},{"_id":"public/tags/Realm/index.html","hash":"8012c47720218b27be272e424069f9bb4b217fc4","modified":1487250478888},{"_id":"public/2017/02/16/记一次使用Realm的体会/index.html","hash":"20af432d3372615b57540c04642c6ce545cd6f96","modified":1487250478888},{"_id":"public/2017/02/15/四大组件之Activity/index.html","hash":"68929e98461680b6ccaf19e7d2b8dc47e0745f58","modified":1487250478888},{"_id":"public/2017/02/13/Android-SQLite的使用/index.html","hash":"09b232a609e7acf1729d31eb244b97db8fd792cd","modified":1487250478888},{"_id":"public/2017/02/11/WiFi-Portal检测/index.html","hash":"74c70bf6dd968b3f6249e98c89d0ad5612f5e2b4","modified":1487250478888},{"_id":"public/2017/02/10/WebView-获取网页源码/index.html","hash":"2b13b6bf54e7592a79fc690e253000159cb3853b","modified":1487250478889},{"_id":"public/images/apple-touch-icon.png","hash":"bb91acbedda435287809e41148b1b255cdf957dc","modified":1487250478918},{"_id":"public/images/earth.png","hash":"2cdcc68e36457410c633a578bb7b30a803193ecb","modified":1487250478919},{"_id":"public/images/favicon-192x192.png","hash":"4b07282018db1888c7bc707a3e1b576c5684eabb","modified":1487250478919},{"_id":"public/images/favicon.ico","hash":"54972e5dafeb73579b30c17232553c688d702448","modified":1487250478919},{"_id":"public/images/logo.png","hash":"2084e1813f7310d9543a37608f4e6690d600b9c3","modified":1487250478919},{"_id":"public/images/mars.png","hash":"4b33fb4ef0359cb401d4ed6d862caf55fb560802","modified":1487250478920},{"_id":"public/images/mercury.png","hash":"e5ecda952ae568b8890026c7ab02a175652535a2","modified":1487250478920},{"_id":"public/images/shadow.png","hash":"ec5cfff7997edd1b5e01516604daca7c7a4f3788","modified":1487250478920},{"_id":"public/images/venus.png","hash":"d45968836d952cd017439323135e6fad155c45ae","modified":1487250478920},{"_id":"public/images/jupiter.png","hash":"4b7bc03b4cdf2fcde13e982aef340a1d385a3e7d","modified":1487250480235},{"_id":"public/images/sun.png","hash":"62be3d54471271a1e8adb348a3f021ef001b4668","modified":1487250480241},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1487250480244},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1487250480244},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1487250480244},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1487250480244},{"_id":"public/js/main.js","hash":"481f730da10e5c9e1d59dfa9f1c0714ae709a0b8","modified":1487250480257},{"_id":"public/lib/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1487250480257},{"_id":"public/lib/meslo-LG/styles.css","hash":"eb88d0b9f1bbef99070e9627e2c96d892036bf7e","modified":1487250480257},{"_id":"public/css/style.css","hash":"93e0d149c3dcee4650ba74445e954f46bb91d080","modified":1487250480257},{"_id":"public/lib/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1487250480257},{"_id":"public/lib/jquery/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1487250480257},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1487250480258},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1487250480258},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1487250480258},{"_id":"public/images/Solar.png","hash":"463dbb952527b3d35c6203575eec552f62fd9d8e","modified":1487250480273},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1487250480291},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1487250480316},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1487250480316},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1487250480316},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1487250480323},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1487250480323},{"_id":"public/lib/meslo-LG/fonts/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1487250480324},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1487250480325},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1487250480325},{"_id":"public/lib/meslo-LG/fonts/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1487250480326},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1487250480326},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1487250480327},{"_id":"public/lib/meslo-LG/fonts/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1487250480327}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Android SQLite的使用","date":"2017-02-13T12:34:42.000Z","_content":"Android自带的数据库SQLite，是一个轻量级便捷的数据库。\n\n1.创建\nAndroid SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，\n所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。\n\n示例：\n```\npublic class PskDBHelper extends SQLiteOpenHelper {\n    /**\n     * 构造方法，通常用这个就可以了\n     *\n     * @param context\n     * @param name    数据库名称 如： psk.db\n     * @param factory 数据库游标工厂 通常传入 null\n     * @param version 版本号 如：1\n     */\n    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        //创建表SQL语句\n        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。\n        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。\n        String pskTable = \"create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)\";\n        db.execSQL(pskTable);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n```\n\n2.使用\n通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。\n其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，\n如果调用getWritableDatabase()的数据库不存在则会报错。\n\n3、增删改查\n这里只简单示例用SQL语句操作的方法。\n\n(1)插入数据\n```\npublic void insert(SQLiteDatabase db) {\n    //插入数据SQL语句\n    String insertSQL = \"insert into psktable(ssid,bssid,psk) values('wong','20:6a:8a:68:81:ce','12345678')\";\n    //执行SQL语句\n    db.execSQL(insertSQL);\n}\n```\n\n(2)删除数据\n```\npublic void del(SQLiteDatabase db) {\n    //删除SQL语句\n    String sql = \"delete from psktable where _id = 1\";\n    //执行SQL语句\n    db.execSQL(sql);\n}\n```\n(3)更新数据\n```\npublic void update(SQLiteDatabase db) {\n    //修改SQL语句\n    String sql = \"update psktable set ssid = 'wong' where _id = 1\";\n    //执行SQL\n    db.execSQL(sql);\n}\n```\n//在Android中查询数据是通过Cursor类来实现的，\n// 当我们使用SQLiteDatabase.query()方法时，\n// 会得到一个Cursor对象，Cursor指向的就是每一条数据\n(4)查询数据\n```\npublic void search(SQLiteDatabase db) {\n    //查询获得游标\n    Cursor cursor = db.query(\"psktable\", null, null, null, null, null, null);\n    //判断游标是否为空\n    if (cursor.moveToFirst()) {\n        //遍历游标\n        for (int i = 0; i < cursor.getCount(); i++) {\n            cursor.move(i);\n            //获得ID\n            int id = cursor.getInt(0);\n            //获得ssid\n            String ssid = cursor.getString(1);\n            //获得bssid\n            String bssid = cursor.getString(2);\n            //获取psk\n            String psk = cursor.getString(3);\n        }\n    }\n}\n```\n","source":"_posts/Android-SQLite的使用.md","raw":"---\ntitle: Android SQLite的使用\ndate: 2017-02-13 20:34:42\ntags: Android\n---\nAndroid自带的数据库SQLite，是一个轻量级便捷的数据库。\n\n1.创建\nAndroid SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，\n所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。\n\n示例：\n```\npublic class PskDBHelper extends SQLiteOpenHelper {\n    /**\n     * 构造方法，通常用这个就可以了\n     *\n     * @param context\n     * @param name    数据库名称 如： psk.db\n     * @param factory 数据库游标工厂 通常传入 null\n     * @param version 版本号 如：1\n     */\n    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) {\n        super(context, name, factory, version);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        //创建表SQL语句\n        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。\n        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。\n        String pskTable = \"create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)\";\n        db.execSQL(pskTable);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n    }\n}\n```\n\n2.使用\n通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。\n其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，\n如果调用getWritableDatabase()的数据库不存在则会报错。\n\n3、增删改查\n这里只简单示例用SQL语句操作的方法。\n\n(1)插入数据\n```\npublic void insert(SQLiteDatabase db) {\n    //插入数据SQL语句\n    String insertSQL = \"insert into psktable(ssid,bssid,psk) values('wong','20:6a:8a:68:81:ce','12345678')\";\n    //执行SQL语句\n    db.execSQL(insertSQL);\n}\n```\n\n(2)删除数据\n```\npublic void del(SQLiteDatabase db) {\n    //删除SQL语句\n    String sql = \"delete from psktable where _id = 1\";\n    //执行SQL语句\n    db.execSQL(sql);\n}\n```\n(3)更新数据\n```\npublic void update(SQLiteDatabase db) {\n    //修改SQL语句\n    String sql = \"update psktable set ssid = 'wong' where _id = 1\";\n    //执行SQL\n    db.execSQL(sql);\n}\n```\n//在Android中查询数据是通过Cursor类来实现的，\n// 当我们使用SQLiteDatabase.query()方法时，\n// 会得到一个Cursor对象，Cursor指向的就是每一条数据\n(4)查询数据\n```\npublic void search(SQLiteDatabase db) {\n    //查询获得游标\n    Cursor cursor = db.query(\"psktable\", null, null, null, null, null, null);\n    //判断游标是否为空\n    if (cursor.moveToFirst()) {\n        //遍历游标\n        for (int i = 0; i < cursor.getCount(); i++) {\n            cursor.move(i);\n            //获得ID\n            int id = cursor.getInt(0);\n            //获得ssid\n            String ssid = cursor.getString(1);\n            //获得bssid\n            String bssid = cursor.getString(2);\n            //获取psk\n            String psk = cursor.getString(3);\n        }\n    }\n}\n```\n","slug":"Android-SQLite的使用","published":1,"updated":"2017-02-16T11:51:49.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8c90000po2zfzf133jv","content":"<p>Android自带的数据库SQLite，是一个轻量级便捷的数据库。</p>\n<p>1.创建<br>Android SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，<br>所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskDBHelper extends SQLiteOpenHelper &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构造方法，通常用这个就可以了</div><div class=\"line\">     *</div><div class=\"line\">     * @param context</div><div class=\"line\">     * @param name    数据库名称 如： psk.db</div><div class=\"line\">     * @param factory 数据库游标工厂 通常传入 null</div><div class=\"line\">     * @param version 版本号 如：1</div><div class=\"line\">     */</div><div class=\"line\">    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123;</div><div class=\"line\">        super(context, name, factory, version);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onCreate(SQLiteDatabase db) &#123;</div><div class=\"line\">        //创建表SQL语句</div><div class=\"line\">        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。</div><div class=\"line\">        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。</div><div class=\"line\">        String pskTable = &quot;create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)&quot;;</div><div class=\"line\">        db.execSQL(pskTable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.使用<br>通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。<br>其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，<br>如果调用getWritableDatabase()的数据库不存在则会报错。</p>\n<p>3、增删改查<br>这里只简单示例用SQL语句操作的方法。</p>\n<p>(1)插入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void insert(SQLiteDatabase db) &#123;</div><div class=\"line\">    //插入数据SQL语句</div><div class=\"line\">    String insertSQL = &quot;insert into psktable(ssid,bssid,psk) values(&apos;wong&apos;,&apos;20:6a:8a:68:81:ce&apos;,&apos;12345678&apos;)&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(insertSQL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2)删除数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void del(SQLiteDatabase db) &#123;</div><div class=\"line\">    //删除SQL语句</div><div class=\"line\">    String sql = &quot;delete from psktable where _id = 1&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)更新数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void update(SQLiteDatabase db) &#123;</div><div class=\"line\">    //修改SQL语句</div><div class=\"line\">    String sql = &quot;update psktable set ssid = &apos;wong&apos; where _id = 1&quot;;</div><div class=\"line\">    //执行SQL</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//在Android中查询数据是通过Cursor类来实现的，<br>// 当我们使用SQLiteDatabase.query()方法时，<br>// 会得到一个Cursor对象，Cursor指向的就是每一条数据<br>(4)查询数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void search(SQLiteDatabase db) &#123;</div><div class=\"line\">    //查询获得游标</div><div class=\"line\">    Cursor cursor = db.query(&quot;psktable&quot;, null, null, null, null, null, null);</div><div class=\"line\">    //判断游标是否为空</div><div class=\"line\">    if (cursor.moveToFirst()) &#123;</div><div class=\"line\">        //遍历游标</div><div class=\"line\">        for (int i = 0; i &lt; cursor.getCount(); i++) &#123;</div><div class=\"line\">            cursor.move(i);</div><div class=\"line\">            //获得ID</div><div class=\"line\">            int id = cursor.getInt(0);</div><div class=\"line\">            //获得ssid</div><div class=\"line\">            String ssid = cursor.getString(1);</div><div class=\"line\">            //获得bssid</div><div class=\"line\">            String bssid = cursor.getString(2);</div><div class=\"line\">            //获取psk</div><div class=\"line\">            String psk = cursor.getString(3);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Android自带的数据库SQLite，是一个轻量级便捷的数据库。</p>\n<p>1.创建<br>Android SDK有一个抽象类SQLiteOpenHelper用于创建和升级数据库，<br>所以继承SQLiteOpenHelper并实现其中的onCreate()和onUpgrade()即可创建和升级数据库。</p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskDBHelper extends SQLiteOpenHelper &#123;</div><div class=\"line\">    /**</div><div class=\"line\">     * 构造方法，通常用这个就可以了</div><div class=\"line\">     *</div><div class=\"line\">     * @param context</div><div class=\"line\">     * @param name    数据库名称 如： psk.db</div><div class=\"line\">     * @param factory 数据库游标工厂 通常传入 null</div><div class=\"line\">     * @param version 版本号 如：1</div><div class=\"line\">     */</div><div class=\"line\">    public PskDBHelper(Context context, String name, SQLiteDatabase.CursorFactory factory, int version) &#123;</div><div class=\"line\">        super(context, name, factory, version);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onCreate(SQLiteDatabase db) &#123;</div><div class=\"line\">        //创建表SQL语句</div><div class=\"line\">        //integer 表示整型，real 表示浮点型，text 表示文本类型，blob 表示二进制类型。</div><div class=\"line\">        // 另外，primary key表示将id列设为主键，并用autoincrement关键字表示id列是自增长的。</div><div class=\"line\">        String pskTable = &quot;create table psktable(_id integer primary key autoincrement,ssid text,bssid text,psk text)&quot;;</div><div class=\"line\">        db.execSQL(pskTable);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2.使用<br>通过调用 pskDBHelper.getReadableDatabase() 和 pskDBHelper.getWritableDatabase()来获取 SQLiteDatabase 对象。<br>其中如果getReadableDatabase()的数据库不存在则自动创建，存在则返回相应的对象，<br>如果调用getWritableDatabase()的数据库不存在则会报错。</p>\n<p>3、增删改查<br>这里只简单示例用SQL语句操作的方法。</p>\n<p>(1)插入数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void insert(SQLiteDatabase db) &#123;</div><div class=\"line\">    //插入数据SQL语句</div><div class=\"line\">    String insertSQL = &quot;insert into psktable(ssid,bssid,psk) values(&apos;wong&apos;,&apos;20:6a:8a:68:81:ce&apos;,&apos;12345678&apos;)&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(insertSQL);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(2)删除数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void del(SQLiteDatabase db) &#123;</div><div class=\"line\">    //删除SQL语句</div><div class=\"line\">    String sql = &quot;delete from psktable where _id = 1&quot;;</div><div class=\"line\">    //执行SQL语句</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>(3)更新数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void update(SQLiteDatabase db) &#123;</div><div class=\"line\">    //修改SQL语句</div><div class=\"line\">    String sql = &quot;update psktable set ssid = &apos;wong&apos; where _id = 1&quot;;</div><div class=\"line\">    //执行SQL</div><div class=\"line\">    db.execSQL(sql);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>//在Android中查询数据是通过Cursor类来实现的，<br>// 当我们使用SQLiteDatabase.query()方法时，<br>// 会得到一个Cursor对象，Cursor指向的就是每一条数据<br>(4)查询数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void search(SQLiteDatabase db) &#123;</div><div class=\"line\">    //查询获得游标</div><div class=\"line\">    Cursor cursor = db.query(&quot;psktable&quot;, null, null, null, null, null, null);</div><div class=\"line\">    //判断游标是否为空</div><div class=\"line\">    if (cursor.moveToFirst()) &#123;</div><div class=\"line\">        //遍历游标</div><div class=\"line\">        for (int i = 0; i &lt; cursor.getCount(); i++) &#123;</div><div class=\"line\">            cursor.move(i);</div><div class=\"line\">            //获得ID</div><div class=\"line\">            int id = cursor.getInt(0);</div><div class=\"line\">            //获得ssid</div><div class=\"line\">            String ssid = cursor.getString(1);</div><div class=\"line\">            //获得bssid</div><div class=\"line\">            String bssid = cursor.getString(2);</div><div class=\"line\">            //获取psk</div><div class=\"line\">            String psk = cursor.getString(3);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Android中Handler的简单终结","date":"2017-02-12T13:37:59.000Z","_content":"1.Handler何用？\n在实际开发中Handler是为了解决在子线程更新UI的问题。\n\n2.Handler，Looper，MessageQueue的创建？\n一个Handler通常和一个Looper和一个MessageQueue绑定在一起。\n在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,\n并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），\n而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，\n可以通过getMainLooper()来获取主线程的Looper。\n\n3.Looper,Handler,MessageQueue的引用关系?\nLooper：好比一个泵，循环不断的在MessageQueue中查询消息\nMessageQueue：消息池，用于存放消息\n\n一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。\n\n子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，\n主线程对应的Looper循环不断的在MessageQueue中查询MSG，\n查询到则主线程通过Hanler处理消息。\n\n4.Handler导致内存泄露问题?\n一般我们写Handler:\n```\nHandler mHandler = new Handler() {\n@Override\npublic void handleMessage(Message msg) {\n  }\n}\n```\n当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。\n\n解决方法：\n在Handler中增加一个对Activity的弱引用（WeakReference）：\n```\nstatic class MyHandler extends Handler {\nWeakReference mActivityReference;\n\nMyHandler(Activity activity) {\nmActivityReference= new WeakReference(activity);\n}\n\n@Override\npublic void handleMessage(Message msg) {\nfinal Activity activity = mActivityReference.get();\nif (activity != null) {\n    }\n  }\n}\n```\n对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。\n","source":"_posts/Android中Handler的简单终结.md","raw":"---\ntitle: Android中Handler的简单终结\ndate: 2017-02-12 21:37:59\ntags: Android\n---\n1.Handler何用？\n在实际开发中Handler是为了解决在子线程更新UI的问题。\n\n2.Handler，Looper，MessageQueue的创建？\n一个Handler通常和一个Looper和一个MessageQueue绑定在一起。\n在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,\n并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），\n而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，\n可以通过getMainLooper()来获取主线程的Looper。\n\n3.Looper,Handler,MessageQueue的引用关系?\nLooper：好比一个泵，循环不断的在MessageQueue中查询消息\nMessageQueue：消息池，用于存放消息\n\n一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。\n\n子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，\n主线程对应的Looper循环不断的在MessageQueue中查询MSG，\n查询到则主线程通过Hanler处理消息。\n\n4.Handler导致内存泄露问题?\n一般我们写Handler:\n```\nHandler mHandler = new Handler() {\n@Override\npublic void handleMessage(Message msg) {\n  }\n}\n```\n当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。\n\n解决方法：\n在Handler中增加一个对Activity的弱引用（WeakReference）：\n```\nstatic class MyHandler extends Handler {\nWeakReference mActivityReference;\n\nMyHandler(Activity activity) {\nmActivityReference= new WeakReference(activity);\n}\n\n@Override\npublic void handleMessage(Message msg) {\nfinal Activity activity = mActivityReference.get();\nif (activity != null) {\n    }\n  }\n}\n```\n对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。\n","slug":"Android中Handler的简单终结","published":1,"updated":"2017-02-16T11:53:25.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8cn0001po2zrxyowbiw","content":"<p>1.Handler何用？<br>在实际开发中Handler是为了解决在子线程更新UI的问题。</p>\n<p>2.Handler，Looper，MessageQueue的创建？<br>一个Handler通常和一个Looper和一个MessageQueue绑定在一起。<br>在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,<br>并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），<br>而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，<br>可以通过getMainLooper()来获取主线程的Looper。</p>\n<p>3.Looper,Handler,MessageQueue的引用关系?<br>Looper：好比一个泵，循环不断的在MessageQueue中查询消息<br>MessageQueue：消息池，用于存放消息</p>\n<p>一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。</p>\n<p>子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，<br>主线程对应的Looper循环不断的在MessageQueue中查询MSG，<br>查询到则主线程通过Hanler处理消息。</p>\n<p>4.Handler导致内存泄露问题?<br>一般我们写Handler:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler mHandler = new Handler() &#123;</div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。</p>\n<p>解决方法：<br>在Handler中增加一个对Activity的弱引用（WeakReference）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class MyHandler extends Handler &#123;</div><div class=\"line\">WeakReference mActivityReference;</div><div class=\"line\"></div><div class=\"line\">MyHandler(Activity activity) &#123;</div><div class=\"line\">mActivityReference= new WeakReference(activity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">final Activity activity = mActivityReference.get();</div><div class=\"line\">if (activity != null) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。</p>\n","excerpt":"","more":"<p>1.Handler何用？<br>在实际开发中Handler是为了解决在子线程更新UI的问题。</p>\n<p>2.Handler，Looper，MessageQueue的创建？<br>一个Handler通常和一个Looper和一个MessageQueue绑定在一起。<br>在线程中创建一个Handler时通常会同时创建一个Looper（通过Looper.prepare()为当前线程创建一个Looper,<br>并使用Looper.loop()来开启消息的读取）及MessageQueue（创建Looper的同时创建），<br>而平时我们在主线程中创建Handler却可以省略该步骤主要是由于主线程在开启时就已自动Looper，<br>可以通过getMainLooper()来获取主线程的Looper。</p>\n<p>3.Looper,Handler,MessageQueue的引用关系?<br>Looper：好比一个泵，循环不断的在MessageQueue中查询消息<br>MessageQueue：消息池，用于存放消息</p>\n<p>一个线程对应只有一个Looper和一个MessageQueue，但可以有多个Handler。</p>\n<p>子线程创建一条MSG通过Handler发送消息到主线程的MessageQueue中，<br>主线程对应的Looper循环不断的在MessageQueue中查询MSG，<br>查询到则主线程通过Hanler处理消息。</p>\n<p>4.Handler导致内存泄露问题?<br>一般我们写Handler:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler mHandler = new Handler() &#123;</div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当使用内部类（包括匿名类）来创建Handler的时候，Handler对象会隐式地持有一个外部类对象（通常是一个Activity）的引用,而常常在Activity退出后，消息队列还有未被处理完的消息，此时activity依然被handler引用，导致内存无法回收而内存泄露。</p>\n<p>解决方法：<br>在Handler中增加一个对Activity的弱引用（WeakReference）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class MyHandler extends Handler &#123;</div><div class=\"line\">WeakReference mActivityReference;</div><div class=\"line\"></div><div class=\"line\">MyHandler(Activity activity) &#123;</div><div class=\"line\">mActivityReference= new WeakReference(activity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">public void handleMessage(Message msg) &#123;</div><div class=\"line\">final Activity activity = mActivityReference.get();</div><div class=\"line\">if (activity != null) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对于上面的代码，用户在关闭Activity之后，就算后台线程还没结束，但由于仅有一条来自Handler的弱引用指向Activity，所以GC仍然会在检查的时候把Activity回收掉。这样，内存泄露的问题就不会出现了。</p>\n"},{"title":"Android事件分发机制的简单解读","date":"2017-02-12T12:52:44.000Z","_content":"本篇文章只是简单的终结Android中事件的分发机制便于记忆\n\n首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法\n而View有dispatchTouchEvent和onTouchEvent方法。\n\n每一个事件都是从ViewGroup开始，\n1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），\n  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，\n  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）\n  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。\n\n2.当事件传递到View控件时，先执行onTouchEvent事件，\n  其中onTouchEvent若返回true表示自身消费该事件，\n  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。\n","source":"_posts/Android事件分发机制的简单解读.md","raw":"---\ntitle: Android事件分发机制的简单解读\ndate: 2017-02-12 20:52:44\ntags: Android\n---\n本篇文章只是简单的终结Android中事件的分发机制便于记忆\n\n首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法\n而View有dispatchTouchEvent和onTouchEvent方法。\n\n每一个事件都是从ViewGroup开始，\n1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），\n  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，\n  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）\n  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。\n\n2.当事件传递到View控件时，先执行onTouchEvent事件，\n  其中onTouchEvent若返回true表示自身消费该事件，\n  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。\n","slug":"Android事件分发机制的简单解读","published":1,"updated":"2017-02-12T13:45:58.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8d60003po2z2e4d19re","content":"<p>本篇文章只是简单的终结Android中事件的分发机制便于记忆</p>\n<p>首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法<br>而View有dispatchTouchEvent和onTouchEvent方法。</p>\n<p>每一个事件都是从ViewGroup开始，<br>1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），<br>  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，<br>  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）<br>  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。</p>\n<p>2.当事件传递到View控件时，先执行onTouchEvent事件，<br>  其中onTouchEvent若返回true表示自身消费该事件，<br>  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。</p>\n","excerpt":"","more":"<p>本篇文章只是简单的终结Android中事件的分发机制便于记忆</p>\n<p>首先ViewGroup有onInterceptTouchEvent，dispatchTouchEvent和onTouchEvent方法<br>而View有dispatchTouchEvent和onTouchEvent方法。</p>\n<p>每一个事件都是从ViewGroup开始，<br>1.父控件ViewGroup先执行onInterceptTouchEvent（拦截），<br>  onInterceptTouchEvent若返回true表示拦截则由该ViewGroup的onTouchEvent处理，<br>  （其中onTouchEvent若返回true表示自身消费该事件，若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给ViewGroup的父控件处理该onTouchEvent）<br>  onInterceptTouchEvent若返回false表示不拦截则由该ViewGroup的dispatchTouchEvent（向下传递）给子控件（ViewGroup或View）处理。</p>\n<p>2.当事件传递到View控件时，先执行onTouchEvent事件，<br>  其中onTouchEvent若返回true表示自身消费该事件，<br>  若onTouchEvent返回false则执行dispatchTouchEvent（向上反馈）给父控件处理该onTouchEvent。</p>\n"},{"title":"Android动态修改某个控件大小","date":"2017-01-10T12:05:15.000Z","_content":"\n1. 动态修改Margin 和 大小\n```\nViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();\nlayoutParams.topMargin= top; //像素px\nparlayoutParamsams.width = width;\nlayoutParams.height = height;\nview.setLayoutParams(layoutParams);\n```\n2. 动态修改Padding\n```\nview.setPadding(left,top,right,bottom);\n```\n3. 动态修改TextView的drawable\n```\nDrawable icon = getResources().getDrawable(R.mipmap.img);\nicon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());\ntv.setCompoundDrawables(icon, null, null, null);\n```\n","source":"_posts/Android动态修改某个控件大小.md","raw":"---\ntitle: Android动态修改某个控件大小\ndate: 2017-01-10 20:05:15\ntags: Android\n---\n\n1. 动态修改Margin 和 大小\n```\nViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();\nlayoutParams.topMargin= top; //像素px\nparlayoutParamsams.width = width;\nlayoutParams.height = height;\nview.setLayoutParams(layoutParams);\n```\n2. 动态修改Padding\n```\nview.setPadding(left,top,right,bottom);\n```\n3. 动态修改TextView的drawable\n```\nDrawable icon = getResources().getDrawable(R.mipmap.img);\nicon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());\ntv.setCompoundDrawables(icon, null, null, null);\n```\n","slug":"Android动态修改某个控件大小","published":1,"updated":"2017-02-16T11:54:43.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8dg0004po2zmx2mebwk","content":"<ol>\n<li><p>动态修改Margin 和 大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();</div><div class=\"line\">layoutParams.topMargin= top; //像素px</div><div class=\"line\">parlayoutParamsams.width = width;</div><div class=\"line\">layoutParams.height = height;</div><div class=\"line\">view.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改Padding</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.setPadding(left,top,right,bottom);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改TextView的drawable</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Drawable icon = getResources().getDrawable(R.mipmap.img);</div><div class=\"line\">icon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());</div><div class=\"line\">tv.setCompoundDrawables(icon, null, null, null);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>动态修改Margin 和 大小</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewGroup.LayoutParams layoutParams = (ViewGroup.LayoutParams)view.getLayoutParams();</div><div class=\"line\">layoutParams.topMargin= top; //像素px</div><div class=\"line\">parlayoutParamsams.width = width;</div><div class=\"line\">layoutParams.height = height;</div><div class=\"line\">view.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改Padding</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.setPadding(left,top,right,bottom);</div></pre></td></tr></table></figure>\n</li>\n<li><p>动态修改TextView的drawable</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Drawable icon = getResources().getDrawable(R.mipmap.img);</div><div class=\"line\">icon.setBounds(0,0,iconUp.getMinimumWidth(),iconUp.getMinimumHeight());</div><div class=\"line\">tv.setCompoundDrawables(icon, null, null, null);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Android设置全屏的几种方式","date":"2017-02-10T11:39:20.000Z","_content":"\n1. 将状态栏导航栏透明化，API19以上有效\n```\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    //透明状态栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    //透明导航栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n}\n```\n2. 设置全屏参数\n```\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n```\n3. 沉浸式\n```\nView decorView = getWindow().getDecorView();\nint option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\ndecorView.setSystemUiVisibility(option);\n```\n具体参照 ： http://blog.csdn.net/sinyu890807/article/details/51763825\n","source":"_posts/Android设置全屏的几种方式.md","raw":"---\ntitle: Android设置全屏的几种方式\ndate: 2017-02-10 19:39:20\ntags: Android\n---\n\n1. 将状态栏导航栏透明化，API19以上有效\n```\nif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    //透明状态栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n    //透明导航栏\n    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);\n}\n```\n2. 设置全屏参数\n```\ngetWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n```\n3. 沉浸式\n```\nView decorView = getWindow().getDecorView();\nint option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;\ndecorView.setSystemUiVisibility(option);\n```\n具体参照 ： http://blog.csdn.net/sinyu890807/article/details/51763825\n","slug":"Android设置全屏的几种方式","published":1,"updated":"2017-02-16T11:54:00.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8dr0005po2zef18swxf","content":"<ol>\n<li><p>将状态栏导航栏透明化，API19以上有效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">    //透明状态栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">    //透明导航栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置全屏参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</div></pre></td></tr></table></figure>\n</li>\n<li><p>沉浸式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">View decorView = getWindow().getDecorView();</div><div class=\"line\">int option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;</div><div class=\"line\">decorView.setSystemUiVisibility(option);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体参照 ： <a href=\"http://blog.csdn.net/sinyu890807/article/details/51763825\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/sinyu890807/article/details/51763825</a></p>\n","excerpt":"","more":"<ol>\n<li><p>将状态栏导航栏透明化，API19以上有效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">    //透明状态栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</div><div class=\"line\">    //透明导航栏</div><div class=\"line\">    getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置全屏参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);</div></pre></td></tr></table></figure>\n</li>\n<li><p>沉浸式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">View decorView = getWindow().getDecorView();</div><div class=\"line\">int option = View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;</div><div class=\"line\">decorView.setSystemUiVisibility(option);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>具体参照 ： <a href=\"http://blog.csdn.net/sinyu890807/article/details/51763825\">http://blog.csdn.net/sinyu890807/article/details/51763825</a></p>\n"},{"title":"EditText相关","date":"2017-01-21T12:07:11.000Z","_content":"1.光标\n```\ntx_count.setCursorVisible(true); //设置光标\ntx_count.setSelection(tx_count.length()); //设置光标位置\n```\n2.自动弹窗软键盘\n```\ntx_count.requestFocus();\nInputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);\n```\n3.输入监听\n```\ntx_count.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n4.xml:\n```\nandroid:inputType=\"phone\" //输入类型\nandroid:digits=\"0123456789.\" //只能输入数字和点\nandroid:background=\"@null\" //背景为空\nandroid:cursorVisible=\"false\" //不显示光标\nandroid:maxLength=\"5\" //5个字符\n```\n5.AndroidManifest.xml\n```\nandroid:windowSoftInputMode=\"stateHidden|stateAlwaysHidden\"  //不弹出软键盘\nandroid:windowSoftInputMode=\"stateVisible|stateAlwaysVisible\"  //自动弹出软键盘\n```\n","source":"_posts/EditText相关.md","raw":"---\ntitle: EditText相关\ndate: 2017-01-21 20:07:11\ntags: Android\n---\n1.光标\n```\ntx_count.setCursorVisible(true); //设置光标\ntx_count.setSelection(tx_count.length()); //设置光标位置\n```\n2.自动弹窗软键盘\n```\ntx_count.requestFocus();\nInputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);\nimm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);\n```\n3.输入监听\n```\ntx_count.addTextChangedListener(new TextWatcher() {\n    @Override\n    public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n    }\n    @Override\n    public void onTextChanged(CharSequence s, int start, int before, int count) {\n    }\n    @Override\n    public void afterTextChanged(Editable s) {\n    }\n});\n```\n4.xml:\n```\nandroid:inputType=\"phone\" //输入类型\nandroid:digits=\"0123456789.\" //只能输入数字和点\nandroid:background=\"@null\" //背景为空\nandroid:cursorVisible=\"false\" //不显示光标\nandroid:maxLength=\"5\" //5个字符\n```\n5.AndroidManifest.xml\n```\nandroid:windowSoftInputMode=\"stateHidden|stateAlwaysHidden\"  //不弹出软键盘\nandroid:windowSoftInputMode=\"stateVisible|stateAlwaysVisible\"  //自动弹出软键盘\n```\n","slug":"EditText相关","published":1,"updated":"2017-02-16T11:53:03.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8dx0008po2z4u7ang2w","content":"<p>1.光标<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.setCursorVisible(true); //设置光标</div><div class=\"line\">tx_count.setSelection(tx_count.length()); //设置光标位置</div></pre></td></tr></table></figure></p>\n<p>2.自动弹窗软键盘<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.requestFocus();</div><div class=\"line\">InputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class=\"line\">imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</div></pre></td></tr></table></figure></p>\n<p>3.输入监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.addTextChangedListener(new TextWatcher() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void afterTextChanged(Editable s) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.xml:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inputType=&quot;phone&quot; //输入类型</div><div class=\"line\">android:digits=&quot;0123456789.&quot; //只能输入数字和点</div><div class=\"line\">android:background=&quot;@null&quot; //背景为空</div><div class=\"line\">android:cursorVisible=&quot;false&quot; //不显示光标</div><div class=\"line\">android:maxLength=&quot;5&quot; //5个字符</div></pre></td></tr></table></figure></p>\n<p>5.AndroidManifest.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:windowSoftInputMode=&quot;stateHidden|stateAlwaysHidden&quot;  //不弹出软键盘</div><div class=\"line\">android:windowSoftInputMode=&quot;stateVisible|stateAlwaysVisible&quot;  //自动弹出软键盘</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>1.光标<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.setCursorVisible(true); //设置光标</div><div class=\"line\">tx_count.setSelection(tx_count.length()); //设置光标位置</div></pre></td></tr></table></figure></p>\n<p>2.自动弹窗软键盘<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.requestFocus();</div><div class=\"line\">InputMethodManager imm = (InputMethodManager) tx_count.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class=\"line\">imm.toggleSoftInput(0, InputMethodManager.SHOW_FORCED);</div></pre></td></tr></table></figure></p>\n<p>3.输入监听<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">tx_count.addTextChangedListener(new TextWatcher() &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void afterTextChanged(Editable s) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>4.xml:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:inputType=&quot;phone&quot; //输入类型</div><div class=\"line\">android:digits=&quot;0123456789.&quot; //只能输入数字和点</div><div class=\"line\">android:background=&quot;@null&quot; //背景为空</div><div class=\"line\">android:cursorVisible=&quot;false&quot; //不显示光标</div><div class=\"line\">android:maxLength=&quot;5&quot; //5个字符</div></pre></td></tr></table></figure></p>\n<p>5.AndroidManifest.xml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:windowSoftInputMode=&quot;stateHidden|stateAlwaysHidden&quot;  //不弹出软键盘</div><div class=\"line\">android:windowSoftInputMode=&quot;stateVisible|stateAlwaysVisible&quot;  //自动弹出软键盘</div></pre></td></tr></table></figure></p>\n"},{"title":"Markdown的初级使用","date":"2017-02-16T12:03:33.000Z","_content":"Markdown的初级使用\n```\n1.添加代码段\n  ` : 单行代码(分别放在首尾)\n  ``` : 多行代码，置于这段代码的首行和末行。\n\n2.添加链接\n  使用 [显示文本](链接地址)\n  如 : [Blog](https://andwong.github.io)\n\n4.添加图片\n  使用 ![](图片链接地址)\n  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)\n\n5.引用某段话\n  使用 : >\n  ```\n\n原文链接：http://www.jianshu.com/p/q81RER\n","source":"_posts/Markdown的初级使用.md","raw":"---\ntitle: Markdown的初级使用\ndate: 2017-02-16 20:03:33\ntags: tools\n---\nMarkdown的初级使用\n```\n1.添加代码段\n  ` : 单行代码(分别放在首尾)\n  ``` : 多行代码，置于这段代码的首行和末行。\n\n2.添加链接\n  使用 [显示文本](链接地址)\n  如 : [Blog](https://andwong.github.io)\n\n4.添加图片\n  使用 ![](图片链接地址)\n  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)\n\n5.引用某段话\n  使用 : >\n  ```\n\n原文链接：http://www.jianshu.com/p/q81RER\n","slug":"Markdown的初级使用","published":1,"updated":"2017-02-16T13:05:25.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8e5000apo2zv386mur9","content":"<p>Markdown的初级使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.添加代码段</div><div class=\"line\">  ` : 单行代码(分别放在首尾)</div><div class=\"line\">  ``` : 多行代码，置于这段代码的首行和末行。</div><div class=\"line\"></div><div class=\"line\">2.添加链接</div><div class=\"line\">  使用 [显示文本](链接地址)</div><div class=\"line\">  如 : [Blog](https://andwong.github.io)</div><div class=\"line\"></div><div class=\"line\">4.添加图片</div><div class=\"line\">  使用 ![](图片链接地址)</div><div class=\"line\">  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)</div><div class=\"line\"></div><div class=\"line\">5.引用某段话</div><div class=\"line\">  使用 : &gt;</div></pre></td></tr></table></figure></p>\n<p>原文链接：<a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/q81RER</a></p>\n","excerpt":"","more":"<p>Markdown的初级使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.添加代码段</div><div class=\"line\">  ` : 单行代码(分别放在首尾)</div><div class=\"line\">  ``` : 多行代码，置于这段代码的首行和末行。</div><div class=\"line\"></div><div class=\"line\">2.添加链接</div><div class=\"line\">  使用 [显示文本](链接地址)</div><div class=\"line\">  如 : [Blog](https://andwong.github.io)</div><div class=\"line\"></div><div class=\"line\">4.添加图片</div><div class=\"line\">  使用 ![](图片链接地址)</div><div class=\"line\">  如:![](http://upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg)</div><div class=\"line\"></div><div class=\"line\">5.引用某段话</div><div class=\"line\">  使用 : &gt;</div></pre></td></tr></table></figure></p>\n<p>原文链接：<a href=\"http://www.jianshu.com/p/q81RER\">http://www.jianshu.com/p/q81RER</a></p>\n"},{"title":"WebView 获取网页源码","date":"2017-02-10T11:59:27.000Z","_content":"Android在WebView中获取网页源码  \n\n在Api-19以上获取源码的方式有修改，如下：\n```\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    mWebView.evaluateJavascript(\n            \"(function() {return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');})();\",\n              new ValueCallback<String>() {\n                @Override\n                public void onReceiveValue(String html) {\n                    Log.d(\"HTML\", \"whd >>html:\" + html);\n                }\n            });\n  }\n```\n在Api-19以下获取源码的方式，如下：          \n1. 使能javascript：\n```\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n2. 编写本地接口\n```\nfinal class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(\"HTML\", html);\n    }\n}\n```\n3. 向网页暴露本地接口\n```\nwebView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n```\n4. 编写自己的WebViewClient，并在onPageFinished中提取网页源码。\n```\nfinal class MyWebViewClient extends WebViewClient{   \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n        view.loadUrl(url);    \n        return true;    \n    }   \n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        Log.d(\"WebView\",\"onPageStarted\"); window.imagelistner.getImage(this.src)\n        super.onPageStarted(view, url, favicon);\n    }     \n    public void onPageFinished(WebView view, String url) {\n        Log.d(\"WebView\",\"onPageFinished \");\n        view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n        super.onPageFinished(view, url);\n    }\n}\n```\n关键之处在于：\n```\nview.loadUrl(\"javascript:window.local_obj.showSource('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n```\n运行，可以看到在showSource(String html)中打印了网页源码。\n","source":"_posts/WebView-获取网页源码.md","raw":"---\ntitle: WebView 获取网页源码\ndate: 2017-02-10 19:59:27\ntags: Android\n---\nAndroid在WebView中获取网页源码  \n\n在Api-19以上获取源码的方式有修改，如下：\n```\n  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n    mWebView.evaluateJavascript(\n            \"(function() {return ('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');})();\",\n              new ValueCallback<String>() {\n                @Override\n                public void onReceiveValue(String html) {\n                    Log.d(\"HTML\", \"whd >>html:\" + html);\n                }\n            });\n  }\n```\n在Api-19以下获取源码的方式，如下：          \n1. 使能javascript：\n```\nwebView.getSettings().setJavaScriptEnabled(true);\n```\n2. 编写本地接口\n```\nfinal class InJavaScriptLocalObj {\n    public void showSource(String html) {\n        Log.d(\"HTML\", html);\n    }\n}\n```\n3. 向网页暴露本地接口\n```\nwebView.addJavascriptInterface(new InJavaScriptLocalObj(), \"local_obj\");\n```\n4. 编写自己的WebViewClient，并在onPageFinished中提取网页源码。\n```\nfinal class MyWebViewClient extends WebViewClient{   \n    public boolean shouldOverrideUrlLoading(WebView view, String url) {    \n        view.loadUrl(url);    \n        return true;    \n    }   \n    public void onPageStarted(WebView view, String url, Bitmap favicon) {\n        Log.d(\"WebView\",\"onPageStarted\"); window.imagelistner.getImage(this.src)\n        super.onPageStarted(view, url, favicon);\n    }     \n    public void onPageFinished(WebView view, String url) {\n        Log.d(\"WebView\",\"onPageFinished \");\n        view.loadUrl(\"javascript:window.local_obj.showSource('<head>'+\" +\n                \"document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n        super.onPageFinished(view, url);\n    }\n}\n```\n关键之处在于：\n```\nview.loadUrl(\"javascript:window.local_obj.showSource('<head>'+document.getElementsByTagName('html')[0].innerHTML+'</head>');\");\n```\n运行，可以看到在showSource(String html)中打印了网页源码。\n","slug":"WebView-获取网页源码","published":1,"updated":"2017-02-16T11:52:28.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8eh000dpo2zqwtt8cx6","content":"<p>Android在WebView中获取网页源码  </p>\n<p>在Api-19以上获取源码的方式有修改，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">  mWebView.evaluateJavascript(</div><div class=\"line\">          &quot;(function() &#123;return (&apos;&lt;html&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/html&gt;&apos;);&#125;)();&quot;,</div><div class=\"line\">            new ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">              @Override</div><div class=\"line\">              public void onReceiveValue(String html) &#123;</div><div class=\"line\">                  Log.d(&quot;HTML&quot;, &quot;whd &gt;&gt;html:&quot; + html);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Api-19以下获取源码的方式，如下：          </p>\n<ol>\n<li><p>使能javascript：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(true);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class InJavaScriptLocalObj &#123;</div><div class=\"line\">    public void showSource(String html) &#123;</div><div class=\"line\">        Log.d(&quot;HTML&quot;, html);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>向网页暴露本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(new InJavaScriptLocalObj(), &quot;local_obj&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写自己的WebViewClient，并在onPageFinished中提取网页源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class MyWebViewClient extends WebViewClient&#123;   </div><div class=\"line\">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;    </div><div class=\"line\">        view.loadUrl(url);    </div><div class=\"line\">        return true;    </div><div class=\"line\">    &#125;   </div><div class=\"line\">    public void onPageStarted(WebView view, String url, Bitmap favicon) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;); window.imagelistner.getImage(this.src)</div><div class=\"line\">        super.onPageStarted(view, url, favicon);</div><div class=\"line\">    &#125;     </div><div class=\"line\">    public void onPageFinished(WebView view, String url) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);</div><div class=\"line\">        view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +</div><div class=\"line\">                &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div><div class=\"line\">        super.onPageFinished(view, url);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>关键之处在于：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div></pre></td></tr></table></figure></p>\n<p>运行，可以看到在showSource(String html)中打印了网页源码。</p>\n","excerpt":"","more":"<p>Android在WebView中获取网页源码  </p>\n<p>在Api-19以上获取源码的方式有修改，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">  mWebView.evaluateJavascript(</div><div class=\"line\">          &quot;(function() &#123;return (&apos;&lt;html&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/html&gt;&apos;);&#125;)();&quot;,</div><div class=\"line\">            new ValueCallback&lt;String&gt;() &#123;</div><div class=\"line\">              @Override</div><div class=\"line\">              public void onReceiveValue(String html) &#123;</div><div class=\"line\">                  Log.d(&quot;HTML&quot;, &quot;whd &gt;&gt;html:&quot; + html);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Api-19以下获取源码的方式，如下：          </p>\n<ol>\n<li><p>使能javascript：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.getSettings().setJavaScriptEnabled(true);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class InJavaScriptLocalObj &#123;</div><div class=\"line\">    public void showSource(String html) &#123;</div><div class=\"line\">        Log.d(&quot;HTML&quot;, html);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>向网页暴露本地接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webView.addJavascriptInterface(new InJavaScriptLocalObj(), &quot;local_obj&quot;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>编写自己的WebViewClient，并在onPageFinished中提取网页源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">final class MyWebViewClient extends WebViewClient&#123;   </div><div class=\"line\">    public boolean shouldOverrideUrlLoading(WebView view, String url) &#123;    </div><div class=\"line\">        view.loadUrl(url);    </div><div class=\"line\">        return true;    </div><div class=\"line\">    &#125;   </div><div class=\"line\">    public void onPageStarted(WebView view, String url, Bitmap favicon) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageStarted&quot;); window.imagelistner.getImage(this.src)</div><div class=\"line\">        super.onPageStarted(view, url, favicon);</div><div class=\"line\">    &#125;     </div><div class=\"line\">    public void onPageFinished(WebView view, String url) &#123;</div><div class=\"line\">        Log.d(&quot;WebView&quot;,&quot;onPageFinished &quot;);</div><div class=\"line\">        view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+&quot; +</div><div class=\"line\">                &quot;document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div><div class=\"line\">        super.onPageFinished(view, url);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>关键之处在于：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">view.loadUrl(&quot;javascript:window.local_obj.showSource(&apos;&lt;head&gt;&apos;+document.getElementsByTagName(&apos;html&apos;)[0].innerHTML+&apos;&lt;/head&gt;&apos;);&quot;);</div></pre></td></tr></table></figure></p>\n<p>运行，可以看到在showSource(String html)中打印了网页源码。</p>\n"},{"title":"WiFi Portal检测","date":"2017-02-11T13:35:53.000Z","_content":"WiFi连接上一个开放热点，如何判断是否需要登录认证？\n\n首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。\n这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。\n\n对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。\n\n代码如下：\n```\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport android.os.AsyncTask;\n/**\n * 检测wifi是否需要登陆\n * 使用方式：\n * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() {\n *  @Override\n *  public void needLogin(boolean needLogin) {\n *     if (needLogin) {\n *          wifi 需要登陆\n *     }\n *  }\n * });\n **/\n public class NetNeedLoginCheckUtil extends AsyncTask<Integer, Integer, Boolean>{\n    NeedLoginCallBack callBack;\n    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) {\n        super();\n        this.callBack = callBack;\n    }    \n    @Override\n    protected Boolean doInBackground(Integer... params) {\n        return isWifiSetPortal();\n    }    \n    @Override\n    protected void onPostExecute(Boolean result) {\n        if (callBack != null) {\n            callBack.needLogin(result);\n        }\n    }\n    private boolean isWifiSetPortal() {  \n        final String mWalledGardenUrl = \"http://connect.rom.miui.com/generate_204\";  \n        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  \n        HttpURLConnection urlConnection = null;  \n        try {  \n            URL url = new URL(mWalledGardenUrl);  \n            urlConnection = (HttpURLConnection) url.openConnection();  \n            urlConnection.setInstanceFollowRedirects(false);  \n            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setUseCaches(false);  \n            urlConnection.getInputStream();  \n            return urlConnection.getResponseCode() != 204;  \n        } catch (IOException e) {  \n            return false;  \n        } finally {  \n            if (urlConnection != null) {  \n                urlConnection.disconnect();  \n            }  \n        }  \n    }  \n\n    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) {\n        new NetNeedLoginCheckUtil(callBack).execute();\n    }    \n\n    public interface NeedLoginCallBack{\n       void needLogin(boolean needLogin);\n    }\n}\n```\n\n文／李科吐温（简书作者）\n原文链接：http://www.jianshu.com/p/3187c677bca3\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n","source":"_posts/WiFi-Portal检测.md","raw":"---\ntitle: WiFi Portal检测\ndate: 2017-02-11 21:35:53\ntags: Android\n---\nWiFi连接上一个开放热点，如何判断是否需要登录认证？\n\n首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。\n这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。\n\n对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。\n\n代码如下：\n```\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport android.os.AsyncTask;\n/**\n * 检测wifi是否需要登陆\n * 使用方式：\n * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() {\n *  @Override\n *  public void needLogin(boolean needLogin) {\n *     if (needLogin) {\n *          wifi 需要登陆\n *     }\n *  }\n * });\n **/\n public class NetNeedLoginCheckUtil extends AsyncTask<Integer, Integer, Boolean>{\n    NeedLoginCallBack callBack;\n    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) {\n        super();\n        this.callBack = callBack;\n    }    \n    @Override\n    protected Boolean doInBackground(Integer... params) {\n        return isWifiSetPortal();\n    }    \n    @Override\n    protected void onPostExecute(Boolean result) {\n        if (callBack != null) {\n            callBack.needLogin(result);\n        }\n    }\n    private boolean isWifiSetPortal() {  \n        final String mWalledGardenUrl = \"http://connect.rom.miui.com/generate_204\";  \n        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  \n        HttpURLConnection urlConnection = null;  \n        try {  \n            URL url = new URL(mWalledGardenUrl);  \n            urlConnection = (HttpURLConnection) url.openConnection();  \n            urlConnection.setInstanceFollowRedirects(false);  \n            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  \n            urlConnection.setUseCaches(false);  \n            urlConnection.getInputStream();  \n            return urlConnection.getResponseCode() != 204;  \n        } catch (IOException e) {  \n            return false;  \n        } finally {  \n            if (urlConnection != null) {  \n                urlConnection.disconnect();  \n            }  \n        }  \n    }  \n\n    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) {\n        new NetNeedLoginCheckUtil(callBack).execute();\n    }    \n\n    public interface NeedLoginCallBack{\n       void needLogin(boolean needLogin);\n    }\n}\n```\n\n文／李科吐温（简书作者）\n原文链接：http://www.jianshu.com/p/3187c677bca3\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n","slug":"WiFi-Portal检测","published":1,"updated":"2017-02-16T11:50:10.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8en000fpo2z77w1tumy","content":"<p>WiFi连接上一个开放热点，如何判断是否需要登录认证？</p>\n<p>首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。<br>这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。</p>\n<p>对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。</p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.HttpURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import android.os.AsyncTask;</div><div class=\"line\">/**</div><div class=\"line\"> * 检测wifi是否需要登陆</div><div class=\"line\"> * 使用方式：</div><div class=\"line\"> * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() &#123;</div><div class=\"line\"> *  @Override</div><div class=\"line\"> *  public void needLogin(boolean needLogin) &#123;</div><div class=\"line\"> *     if (needLogin) &#123;</div><div class=\"line\"> *          wifi 需要登陆</div><div class=\"line\"> *     &#125;</div><div class=\"line\"> *  &#125;</div><div class=\"line\"> * &#125;);</div><div class=\"line\"> **/</div><div class=\"line\"> public class NetNeedLoginCheckUtil extends AsyncTask&lt;Integer, Integer, Boolean&gt;&#123;</div><div class=\"line\">    NeedLoginCallBack callBack;</div><div class=\"line\">    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.callBack = callBack;</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected Boolean doInBackground(Integer... params) &#123;</div><div class=\"line\">        return isWifiSetPortal();</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onPostExecute(Boolean result) &#123;</div><div class=\"line\">        if (callBack != null) &#123;</div><div class=\"line\">            callBack.needLogin(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean isWifiSetPortal() &#123;  </div><div class=\"line\">        final String mWalledGardenUrl = &quot;http://connect.rom.miui.com/generate_204&quot;;  </div><div class=\"line\">        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  </div><div class=\"line\">        HttpURLConnection urlConnection = null;  </div><div class=\"line\">        try &#123;  </div><div class=\"line\">            URL url = new URL(mWalledGardenUrl);  </div><div class=\"line\">            urlConnection = (HttpURLConnection) url.openConnection();  </div><div class=\"line\">            urlConnection.setInstanceFollowRedirects(false);  </div><div class=\"line\">            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setUseCaches(false);  </div><div class=\"line\">            urlConnection.getInputStream();  </div><div class=\"line\">            return urlConnection.getResponseCode() != 204;  </div><div class=\"line\">        &#125; catch (IOException e) &#123;  </div><div class=\"line\">            return false;  </div><div class=\"line\">        &#125; finally &#123;  </div><div class=\"line\">            if (urlConnection != null) &#123;  </div><div class=\"line\">                urlConnection.disconnect();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        new NetNeedLoginCheckUtil(callBack).execute();</div><div class=\"line\">    &#125;    </div><div class=\"line\"></div><div class=\"line\">    public interface NeedLoginCallBack&#123;</div><div class=\"line\">       void needLogin(boolean needLogin);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>文／李科吐温（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/3187c677bca3\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/3187c677bca3</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","excerpt":"","more":"<p>WiFi连接上一个开放热点，如何判断是否需要登录认证？</p>\n<p>首先当我们发送一个request请求时，我们得到的response总是会携带一个HTTP状态码（除非请求超时）。WiFi portal同样也要遵循这样的规则，WiFi portal拦截网络请求时，返回给我们一个response（内容是登陆页面）。我们的这次请求虽然被拦截了，但是无疑他是一个成功的请求，也就是说response携带的状态码应该是 200 。这时，我们与服务器端商定一个请求链接http ://www.xx.com/genera_204，固定返回一个状态码 204。当网络状态发生变化时候，我们就去请求这个链接。如果我们的response携带的状态码是204说明我们请求成功，如果我们得到的是200，说明需要进行WiFi 验证。<br>这个方法来自Android4.0.1AOSP源码 WifiWatchdogStateMachine#isWalledGardenConnection()。</p>\n<p>对于个人开发者或者“小厂商”不建议在我们自己的服务器上处理http ://www.xxx.com/generate_204，除非你家的服务器很稳定，基本上不出现问题。这时候我们可以考虑下“大厂商”是否已经有类似的功能。像UC啊什么的。他们都能自动提醒你网络需要登陆，他们也是使用了同样的方式，至于链接地址，就靠大家自己了。</p>\n<p>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.HttpURLConnection;</div><div class=\"line\">import java.net.URL;</div><div class=\"line\">import android.os.AsyncTask;</div><div class=\"line\">/**</div><div class=\"line\"> * 检测wifi是否需要登陆</div><div class=\"line\"> * 使用方式：</div><div class=\"line\"> * NetNeedLoginCheckUtil.needLoginNetworkCheck(new NeedLoginCallBack() &#123;</div><div class=\"line\"> *  @Override</div><div class=\"line\"> *  public void needLogin(boolean needLogin) &#123;</div><div class=\"line\"> *     if (needLogin) &#123;</div><div class=\"line\"> *          wifi 需要登陆</div><div class=\"line\"> *     &#125;</div><div class=\"line\"> *  &#125;</div><div class=\"line\"> * &#125;);</div><div class=\"line\"> **/</div><div class=\"line\"> public class NetNeedLoginCheckUtil extends AsyncTask&lt;Integer, Integer, Boolean&gt;&#123;</div><div class=\"line\">    NeedLoginCallBack callBack;</div><div class=\"line\">    public NetNeedLoginCheckUtil(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        super();</div><div class=\"line\">        this.callBack = callBack;</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected Boolean doInBackground(Integer... params) &#123;</div><div class=\"line\">        return isWifiSetPortal();</div><div class=\"line\">    &#125;    </div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onPostExecute(Boolean result) &#123;</div><div class=\"line\">        if (callBack != null) &#123;</div><div class=\"line\">            callBack.needLogin(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    private boolean isWifiSetPortal() &#123;  </div><div class=\"line\">        final String mWalledGardenUrl = &quot;http://connect.rom.miui.com/generate_204&quot;;  </div><div class=\"line\">        final int WALLED_GARDEN_SOCKET_TIMEOUT_MS = 10000;  </div><div class=\"line\">        HttpURLConnection urlConnection = null;  </div><div class=\"line\">        try &#123;  </div><div class=\"line\">            URL url = new URL(mWalledGardenUrl);  </div><div class=\"line\">            urlConnection = (HttpURLConnection) url.openConnection();  </div><div class=\"line\">            urlConnection.setInstanceFollowRedirects(false);  </div><div class=\"line\">            urlConnection.setConnectTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setReadTimeout(WALLED_GARDEN_SOCKET_TIMEOUT_MS);  </div><div class=\"line\">            urlConnection.setUseCaches(false);  </div><div class=\"line\">            urlConnection.getInputStream();  </div><div class=\"line\">            return urlConnection.getResponseCode() != 204;  </div><div class=\"line\">        &#125; catch (IOException e) &#123;  </div><div class=\"line\">            return false;  </div><div class=\"line\">        &#125; finally &#123;  </div><div class=\"line\">            if (urlConnection != null) &#123;  </div><div class=\"line\">                urlConnection.disconnect();  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    public static void needLoginNetworkCheck(NeedLoginCallBack callBack) &#123;</div><div class=\"line\">        new NetNeedLoginCheckUtil(callBack).execute();</div><div class=\"line\">    &#125;    </div><div class=\"line\"></div><div class=\"line\">    public interface NeedLoginCallBack&#123;</div><div class=\"line\">       void needLogin(boolean needLogin);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>文／李科吐温（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/3187c677bca3\">http://www.jianshu.com/p/3187c677bca3</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n"},{"title":"Ubuntu下使用Hexo创建Gitbub博客","date":"2017-01-05T06:06:55.000Z","_content":"1.环境配置\n```\n安装 node.js : $sudo apt install nodejs-legacy\n安装 npm ： $sudo apt install npm\n安装 git : $sudo apt-get install git\n安装 hexo ： $sudo npm install hexo -g\n```\n\n2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）\n\n3.初始化博客，命令行输入下列命令：\n```\n$git init\n$git remote add origin \"git url\"\n$git pull origin master\n\n$hexo init\n$hexo s -g #预览\n```\n\n编辑根目录下的_config.yml 末尾添加下列代码:\n```\n  deploy:\n  type: git\n  repository: https://github.com/AndWong/AndWong.github.io.git\n  branch: master\n  ```\n```\n$npm install hexo-deployer-git --save\n$hexo clean\n$hexo d -g #发布\n```\n\n4.访问 https://andwong.github.io/ #查看\n\n「疑问 : 换台电脑后如何发布博客?」\n上述步骤执行完后master主支就有相应的内容,\n此时新建一个分支blog用于存放博客内容,\n新设备只需pull blog分支修改博客并push就行.\n如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g\n\n————–分割线————\n在_config.yml中修改:\ntitle: Wong Blog #修改页面标题\nauthor: Wong #修改作者\ntheme: hexo-theme-aiki #修改主题样式\n","source":"_posts/gitbub-blog.md","raw":"---\ntitle: Ubuntu下使用Hexo创建Gitbub博客\ndate: 2017-01-05 14:06:55\ntags: github\n---\n1.环境配置\n```\n安装 node.js : $sudo apt install nodejs-legacy\n安装 npm ： $sudo apt install npm\n安装 git : $sudo apt-get install git\n安装 hexo ： $sudo npm install hexo -g\n```\n\n2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）\n\n3.初始化博客，命令行输入下列命令：\n```\n$git init\n$git remote add origin \"git url\"\n$git pull origin master\n\n$hexo init\n$hexo s -g #预览\n```\n\n编辑根目录下的_config.yml 末尾添加下列代码:\n```\n  deploy:\n  type: git\n  repository: https://github.com/AndWong/AndWong.github.io.git\n  branch: master\n  ```\n```\n$npm install hexo-deployer-git --save\n$hexo clean\n$hexo d -g #发布\n```\n\n4.访问 https://andwong.github.io/ #查看\n\n「疑问 : 换台电脑后如何发布博客?」\n上述步骤执行完后master主支就有相应的内容,\n此时新建一个分支blog用于存放博客内容,\n新设备只需pull blog分支修改博客并push就行.\n如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g\n\n————–分割线————\n在_config.yml中修改:\ntitle: Wong Blog #修改页面标题\nauthor: Wong #修改作者\ntheme: hexo-theme-aiki #修改主题样式\n","slug":"gitbub-blog","published":1,"updated":"2017-02-16T11:55:18.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8ew000ipo2zqljga7sr","content":"<p>1.环境配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 node.js : $sudo apt install nodejs-legacy</div><div class=\"line\">安装 npm ： $sudo apt install npm</div><div class=\"line\">安装 git : $sudo apt-get install git</div><div class=\"line\">安装 hexo ： $sudo npm install hexo -g</div></pre></td></tr></table></figure></p>\n<p>2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）</p>\n<p>3.初始化博客，命令行输入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git init</div><div class=\"line\">$git remote add origin &quot;git url&quot;</div><div class=\"line\">$git pull origin master</div><div class=\"line\"></div><div class=\"line\">$hexo init</div><div class=\"line\">$hexo s -g #预览</div></pre></td></tr></table></figure></p>\n<p>编辑根目录下的_config.yml 末尾添加下列代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">type: git</div><div class=\"line\">repository: https://github.com/AndWong/AndWong.github.io.git</div><div class=\"line\">branch: master</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm install hexo-deployer-git --save</div><div class=\"line\">$hexo clean</div><div class=\"line\">$hexo d -g #发布</div></pre></td></tr></table></figure>\n<p>4.访问 <a href=\"https://andwong.github.io/\" target=\"_blank\" rel=\"external\">https://andwong.github.io/</a> #查看</p>\n<p>「疑问 : 换台电脑后如何发布博客?」<br>上述步骤执行完后master主支就有相应的内容,<br>此时新建一个分支blog用于存放博客内容,<br>新设备只需pull blog分支修改博客并push就行.<br>如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g</p>\n<p>————–分割线————<br>在_config.yml中修改:<br>title: Wong Blog #修改页面标题<br>author: Wong #修改作者<br>theme: hexo-theme-aiki #修改主题样式</p>\n","excerpt":"","more":"<p>1.环境配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 node.js : $sudo apt install nodejs-legacy</div><div class=\"line\">安装 npm ： $sudo apt install npm</div><div class=\"line\">安装 git : $sudo apt-get install git</div><div class=\"line\">安装 hexo ： $sudo npm install hexo -g</div></pre></td></tr></table></figure></p>\n<p>2.注册github帐号，并创建仓库（注意仓库必须以 “用户名.github.io”）</p>\n<p>3.初始化博客，命令行输入下列命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git init</div><div class=\"line\">$git remote add origin &quot;git url&quot;</div><div class=\"line\">$git pull origin master</div><div class=\"line\"></div><div class=\"line\">$hexo init</div><div class=\"line\">$hexo s -g #预览</div></pre></td></tr></table></figure></p>\n<p>编辑根目录下的_config.yml 末尾添加下列代码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">type: git</div><div class=\"line\">repository: https://github.com/AndWong/AndWong.github.io.git</div><div class=\"line\">branch: master</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$npm install hexo-deployer-git --save</div><div class=\"line\">$hexo clean</div><div class=\"line\">$hexo d -g #发布</div></pre></td></tr></table></figure>\n<p>4.访问 <a href=\"https://andwong.github.io/\">https://andwong.github.io/</a> #查看</p>\n<p>「疑问 : 换台电脑后如何发布博客?」<br>上述步骤执行完后master主支就有相应的内容,<br>此时新建一个分支blog用于存放博客内容,<br>新设备只需pull blog分支修改博客并push就行.<br>如果$hexo d -g 失败可以尝试删除根目录下的.deploy_git目录再执行$hexo d -g</p>\n<p>————–分割线————<br>在_config.yml中修改:<br>title: Wong Blog #修改页面标题<br>author: Wong #修改作者<br>theme: hexo-theme-aiki #修改主题样式</p>\n"},{"title":"四大组件之Activity","date":"2017-02-15T11:48:09.000Z","_content":"\nActivity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。\n\n1.生命周期\n正常的一次启动到结束 ：onCreate -> onStart -> onResume -> onPause -> onStop -> onDestory\n\n切换到后台 : onPause -> onStop\n从后台回来 : onRestart ->onStart -> onResume\n\n从A切到B ： A-onPause -> B-onCreate -> B-onStart -> B-onResume -> A-onStop\n从B返回A ： B-onPause -> A-onRestart -> A-onStart -> A-onResume -> B-onStop -> B-onDestroy\n\n横竖屏切换 ： onSaveInstanceState -> onPause -> onStop -> onDestory -> onCreate -> onStart -> onRestoreInstanceState -> onResume\n\n2.启动模式\n（在AndroidManifest.xml中的android:launchMode=\"singleTask\"配置）\n (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中\n (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个\n (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中\n (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用\n\n3.闪屏页的快速启动\n  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，\n  让app启动时activity为展示时先显示theme中的背景图，\n  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。\n\n  1)在AndroidManifest中为闪屏页设置Theme：\n  ```\n  android:theme=\"@style/AppSplash\"\n  ```\n\n  2)AppSplash如下：\n  ```\n  <style name=\"AppSplash\">\n    <item name=\"android:windowBackground\">@drawable/layer_logo_page</item>\n  </style>\n  ```\n\n  3)layer_logo_page如下：\n  ```\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <color android:color=\"@color/C15_white\" />\n    </item>\n    <item android:bottom=\"35dp\">\n        <bitmap\n            android:gravity=\"center_horizontal|bottom\"\n            android:src=\"@drawable/icon_logo\" />\n    </item>\n  </layer-list>\n  ```\n\n4.横竖屏\n  1)如何禁止横竖屏切换时生命周期变换\n  AndroidManifest中为Activity添加配置：\n```\n  android:configChanges=\"orientation|keyboardHidden|screenSize\"\n```\n  2)如何禁止横屏：\n  AndroidManifest中为Activity添加配置：\n```\n   android:screenOrientation=\"portrait\"\n```\n  3)Java代码中设置横竖屏：\n  // 如果是竖屏则转为横屏\n```\n  if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {\n    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n  }\n```\n\n  4)横竖屏变换时通常会有回调：\n```\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n  }\n```\n\n5.Activity设置为首页\n  为Activity配置如下代码：\n```\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n```\n6.启动Actitiy的几种方式\n","source":"_posts/四大组件之Activity.md","raw":"---\ntitle: 四大组件之Activity\ndate: 2017-02-15 19:48:09\ntags: 四大组件之Activity\n---\n\nActivity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。\n\n1.生命周期\n正常的一次启动到结束 ：onCreate -> onStart -> onResume -> onPause -> onStop -> onDestory\n\n切换到后台 : onPause -> onStop\n从后台回来 : onRestart ->onStart -> onResume\n\n从A切到B ： A-onPause -> B-onCreate -> B-onStart -> B-onResume -> A-onStop\n从B返回A ： B-onPause -> A-onRestart -> A-onStart -> A-onResume -> B-onStop -> B-onDestroy\n\n横竖屏切换 ： onSaveInstanceState -> onPause -> onStop -> onDestory -> onCreate -> onStart -> onRestoreInstanceState -> onResume\n\n2.启动模式\n（在AndroidManifest.xml中的android:launchMode=\"singleTask\"配置）\n (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中\n (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个\n (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中\n (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用\n\n3.闪屏页的快速启动\n  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，\n  让app启动时activity为展示时先显示theme中的背景图，\n  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。\n\n  1)在AndroidManifest中为闪屏页设置Theme：\n  ```\n  android:theme=\"@style/AppSplash\"\n  ```\n\n  2)AppSplash如下：\n  ```\n  <style name=\"AppSplash\">\n    <item name=\"android:windowBackground\">@drawable/layer_logo_page</item>\n  </style>\n  ```\n\n  3)layer_logo_page如下：\n  ```\n  <?xml version=\"1.0\" encoding=\"utf-8\"?>\n  <layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item>\n        <color android:color=\"@color/C15_white\" />\n    </item>\n    <item android:bottom=\"35dp\">\n        <bitmap\n            android:gravity=\"center_horizontal|bottom\"\n            android:src=\"@drawable/icon_logo\" />\n    </item>\n  </layer-list>\n  ```\n\n4.横竖屏\n  1)如何禁止横竖屏切换时生命周期变换\n  AndroidManifest中为Activity添加配置：\n```\n  android:configChanges=\"orientation|keyboardHidden|screenSize\"\n```\n  2)如何禁止横屏：\n  AndroidManifest中为Activity添加配置：\n```\n   android:screenOrientation=\"portrait\"\n```\n  3)Java代码中设置横竖屏：\n  // 如果是竖屏则转为横屏\n```\n  if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) {\n    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n  }\n```\n\n  4)横竖屏变换时通常会有回调：\n```\n  @Override\n  public void onConfigurationChanged(Configuration newConfig) {\n    super.onConfigurationChanged(newConfig);\n  }\n```\n\n5.Activity设置为首页\n  为Activity配置如下代码：\n```\n  <intent-filter>\n    <action android:name=\"android.intent.action.MAIN\" />\n    <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n```\n6.启动Actitiy的几种方式\n","slug":"四大组件之Activity","published":1,"updated":"2017-02-16T12:12:28.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8f0000kpo2zehm2mjqg","content":"<p>Activity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。</p>\n<p>1.生命周期<br>正常的一次启动到结束 ：onCreate -&gt; onStart -&gt; onResume -&gt; onPause -&gt; onStop -&gt; onDestory</p>\n<p>切换到后台 : onPause -&gt; onStop<br>从后台回来 : onRestart -&gt;onStart -&gt; onResume</p>\n<p>从A切到B ： A-onPause -&gt; B-onCreate -&gt; B-onStart -&gt; B-onResume -&gt; A-onStop<br>从B返回A ： B-onPause -&gt; A-onRestart -&gt; A-onStart -&gt; A-onResume -&gt; B-onStop -&gt; B-onDestroy</p>\n<p>横竖屏切换 ： onSaveInstanceState -&gt; onPause -&gt; onStop -&gt; onDestory -&gt; onCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume</p>\n<p>2.启动模式<br>（在AndroidManifest.xml中的android:launchMode=”singleTask”配置）<br> (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中<br> (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个<br> (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中<br> (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用</p>\n<p>3.闪屏页的快速启动<br>  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，<br>  让app启动时activity为展示时先显示theme中的背景图，<br>  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。</p>\n<p>  1)在AndroidManifest中为闪屏页设置Theme：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:theme=&quot;@style/AppSplash&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)AppSplash如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppSplash&quot;&gt;</div><div class=\"line\">  &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/layer_logo_page&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>  3)layer_logo_page如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">  &lt;item&gt;</div><div class=\"line\">      &lt;color android:color=&quot;@color/C15_white&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">  &lt;item android:bottom=&quot;35dp&quot;&gt;</div><div class=\"line\">      &lt;bitmap</div><div class=\"line\">          android:gravity=&quot;center_horizontal|bottom&quot;</div><div class=\"line\">          android:src=&quot;@drawable/icon_logo&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">&lt;/layer-list&gt;</div></pre></td></tr></table></figure></p>\n<p>4.横竖屏<br>  1)如何禁止横竖屏切换时生命周期变换<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)如何禁止横屏：<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:screenOrientation=&quot;portrait&quot;</div></pre></td></tr></table></figure></p>\n<p>  3)Java代码中设置横竖屏：<br>  // 如果是竖屏则转为横屏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) &#123;</div><div class=\"line\">  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  4)横竖屏变换时通常会有回调：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void onConfigurationChanged(Configuration newConfig) &#123;</div><div class=\"line\">  super.onConfigurationChanged(newConfig);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.Activity设置为首页<br>  为Activity配置如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class=\"line\">  &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>\n<p>6.启动Actitiy的几种方式</p>\n","excerpt":"","more":"<p>Activity乃Andoid四大组件中的一个，主要负责用户界面的展示和用户交互处理。</p>\n<p>1.生命周期<br>正常的一次启动到结束 ：onCreate -&gt; onStart -&gt; onResume -&gt; onPause -&gt; onStop -&gt; onDestory</p>\n<p>切换到后台 : onPause -&gt; onStop<br>从后台回来 : onRestart -&gt;onStart -&gt; onResume</p>\n<p>从A切到B ： A-onPause -&gt; B-onCreate -&gt; B-onStart -&gt; B-onResume -&gt; A-onStop<br>从B返回A ： B-onPause -&gt; A-onRestart -&gt; A-onStart -&gt; A-onResume -&gt; B-onStop -&gt; B-onDestroy</p>\n<p>横竖屏切换 ： onSaveInstanceState -&gt; onPause -&gt; onStop -&gt; onDestory -&gt; onCreate -&gt; onStart -&gt; onRestoreInstanceState -&gt; onResume</p>\n<p>2.启动模式<br>（在AndroidManifest.xml中的android:launchMode=”singleTask”配置）<br> (1)standard : 默认的标准模式，每次启动Activity都会创建Activity并放人Task栈中<br> (2)singleTop ：当要启动的Activity刚好在Task栈的栈顶时使用这个，否则重新创建一个<br> (3)singleTask ： 只要Task栈中存在就使用，并把该Activity以上的其他Actitity弹出栈中<br> (4)singleInstance ： 只要在该Activity存在Task栈中，如何应用启动都可以直接调用</p>\n<p>3.闪屏页的快速启动<br>  通常闪屏页是一张产品的Logo图，所以可以通过为闪屏页设置theme，<br>  让app启动时activity为展示时先显示theme中的背景图，<br>  以此达到闪屏页的“快速启动”，否则闪屏页显示的app-theme中背景色。</p>\n<p>  1)在AndroidManifest中为闪屏页设置Theme：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:theme=&quot;@style/AppSplash&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)AppSplash如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;style name=&quot;AppSplash&quot;&gt;</div><div class=\"line\">  &lt;item name=&quot;android:windowBackground&quot;&gt;@drawable/layer_logo_page&lt;/item&gt;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure></p>\n<p>  3)layer_logo_page如下：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class=\"line\">&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class=\"line\">  &lt;item&gt;</div><div class=\"line\">      &lt;color android:color=&quot;@color/C15_white&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">  &lt;item android:bottom=&quot;35dp&quot;&gt;</div><div class=\"line\">      &lt;bitmap</div><div class=\"line\">          android:gravity=&quot;center_horizontal|bottom&quot;</div><div class=\"line\">          android:src=&quot;@drawable/icon_logo&quot; /&gt;</div><div class=\"line\">  &lt;/item&gt;</div><div class=\"line\">&lt;/layer-list&gt;</div></pre></td></tr></table></figure></p>\n<p>4.横竖屏<br>  1)如何禁止横竖屏切换时生命周期变换<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;</div></pre></td></tr></table></figure></p>\n<p>  2)如何禁止横屏：<br>  AndroidManifest中为Activity添加配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:screenOrientation=&quot;portrait&quot;</div></pre></td></tr></table></figure></p>\n<p>  3)Java代码中设置横竖屏：<br>  // 如果是竖屏则转为横屏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (activity.getRequestedOrientation() == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT) &#123;</div><div class=\"line\">  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  4)横竖屏变换时通常会有回调：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void onConfigurationChanged(Configuration newConfig) &#123;</div><div class=\"line\">  super.onConfigurationChanged(newConfig);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>5.Activity设置为首页<br>  为Activity配置如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">  &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class=\"line\">  &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p>\n<p>6.启动Actitiy的几种方式</p>\n"},{"title":"如何在moudle中引入aar","date":"2017-02-16T12:32:45.000Z","_content":"app已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?\n\n1.在moudle目录下的build.gradle\n```\nandroid{\n  repositories {\n    flatDir {\n        dirs 'libs'\n    }\n  }\n}\n\ndependencies {\n  compile(name: 'aar-B', ext: 'aar')\n}\n```\n 2.在app目录下的build.gradle\n```\nrepositories {\n    flatDir {\n        dirs('libs','../moudle/libs')\n    }\n}\n```\n","source":"_posts/如何在moudle中引入aar.md","raw":"---\ntitle: 如何在moudle中引入aar\ndate: 2017-02-16 20:32:45\ntags: Android Studio\n---\napp已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?\n\n1.在moudle目录下的build.gradle\n```\nandroid{\n  repositories {\n    flatDir {\n        dirs 'libs'\n    }\n  }\n}\n\ndependencies {\n  compile(name: 'aar-B', ext: 'aar')\n}\n```\n 2.在app目录下的build.gradle\n```\nrepositories {\n    flatDir {\n        dirs('libs','../moudle/libs')\n    }\n}\n```\n","slug":"如何在moudle中引入aar","published":1,"updated":"2017-02-16T12:40:53.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8g5000spo2zkoyhw611","content":"<p>app已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?</p>\n<p>1.在moudle目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs &apos;libs&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile(name: &apos;aar-B&apos;, ext: &apos;aar&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 2.在app目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs(&apos;libs&apos;,&apos;../moudle/libs&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>app已经引入aar-A,如何在moudle中引入aar-B而不会出现问题?</p>\n<p>1.在moudle目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">android&#123;</div><div class=\"line\">  repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs &apos;libs&apos;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile(name: &apos;aar-B&apos;, ext: &apos;aar&apos;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 2.在app目录下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">    flatDir &#123;</div><div class=\"line\">        dirs(&apos;libs&apos;,&apos;../moudle/libs&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"记一次使用Realm的体会","date":"2017-02-16T12:42:40.000Z","_content":">数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。\n官网:https://realm.io/docs/java/latest/\n\n一.基于Version-0.87.5\n由于 v0.87.5之后的版本使用的是plugin形式添加引用,\n使用时会发现包增大好多(可能是自己使用时缺少了某些配置),\n所以这里介绍一个该版本的使用.\n1.引入\napp下的build.gradle\n```\ncompile 'io.realm:realm-android:0.87.5'\n```\n2.初始化\nApplication中\n```\n  private void initRealm() {\n        RealmConfiguration config = new RealmConfiguration.Builder(this).name(\"guess.realm\").schemaVersion(0).build();\n        Realm.setDefaultConfiguration(config);\n  }\n```\n3.使用\n新建对象\n```\npublic class PskBean extends RealmObject {\n    @PrimaryKey\n    private String ssid;\n    private String bssid;\n    private String psk;\n\n    public PskBean() {\n    }\n\n    public PskBean(String ssid, String bssid, String psk) {\n        this.ssid = ssid;\n        this.bssid = bssid;\n        this.psk = psk;\n    }\n\n    public String getSsid() {\n        return ssid;\n    }\n\n    public void setSsid(String ssid) {\n        this.ssid = ssid;\n    }\n\n    public String getBssid() {\n        return bssid;\n    }\n\n    public void setBssid(String bssid) {\n        this.bssid = bssid;\n    }\n\n    public String getPsk() {\n        return psk;\n    }\n\n    public void setPsk(String psk) {\n        this.psk = psk;\n    }\n}\n```\n数据库帮助类(只示例异步操作)\n```\npublic class RealmDBHelper {\n  private Realm mRealm;\n\n  public RealmDBHelper(Context context) {\n      mRealm = Realm.getInstance(context);\n  }\n\n  public Realm getRealm() {\n      return mRealm;\n  }\n\n  /**\n   * add （增）\n   */\n  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) {\n      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              realm.copyToRealmOrUpdate(bean);\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return addTask;\n  }\n\n  /**\n   * delete （删）\n   */\n  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) {\n      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.removeFromRealm();\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return deleteTask;\n  }\n\n  /**\n   * update （改）\n   */\n  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) {\n      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.setPsk(psk);\n          }\n      },new Realm.Transaction.Callback(){\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return updateTask;\n  }\n\n  /**\n   * query （查询所有）\n   */\n  private void queryAllBean(RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  /**\n   * query (单条)\n   */\n  private void querySingleBean(String ssid, String bssid, RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  public void close() {\n      if (mRealm != null) {\n          mRealm.close();\n      }\n  }\n\n  public interface RealmCallback {\n      void success(RealmResults<PskBean> element);\n\n      void failure(String msg);\n  }\n}\n```\n4.混淆\n```\n# Realm #\n-keep class io.realm.annotations.RealmModule\n-keep @io.realm.annotations.RealmModule class *\n-keep class io.realm.internal.Keep\n-keep @io.realm.internal.Keep class * { *; }\n-dontwarn javax.**\n-dontwarn io.realm.**\n```\n此时打包会发现 包增大好多,大约4M左右.\n原因是默认情况下,Realm会引人所有规格的.so库\n如何处理?\napp下build.gradle,导出你需要的规格.so库\n```\nsplits {\n      abi {\n          enable true\n          reset()\n          include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'\n          universalApk true\n      }\n  }\n```\n5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下\n  而是在data/data/files/name.realm中\n","source":"_posts/记一次使用Realm的体会.md","raw":"---\ntitle: 记一次使用Realm的体会\ndate: 2017-02-16 20:42:40\ntags: Realm\n---\n>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。\n官网:https://realm.io/docs/java/latest/\n\n一.基于Version-0.87.5\n由于 v0.87.5之后的版本使用的是plugin形式添加引用,\n使用时会发现包增大好多(可能是自己使用时缺少了某些配置),\n所以这里介绍一个该版本的使用.\n1.引入\napp下的build.gradle\n```\ncompile 'io.realm:realm-android:0.87.5'\n```\n2.初始化\nApplication中\n```\n  private void initRealm() {\n        RealmConfiguration config = new RealmConfiguration.Builder(this).name(\"guess.realm\").schemaVersion(0).build();\n        Realm.setDefaultConfiguration(config);\n  }\n```\n3.使用\n新建对象\n```\npublic class PskBean extends RealmObject {\n    @PrimaryKey\n    private String ssid;\n    private String bssid;\n    private String psk;\n\n    public PskBean() {\n    }\n\n    public PskBean(String ssid, String bssid, String psk) {\n        this.ssid = ssid;\n        this.bssid = bssid;\n        this.psk = psk;\n    }\n\n    public String getSsid() {\n        return ssid;\n    }\n\n    public void setSsid(String ssid) {\n        this.ssid = ssid;\n    }\n\n    public String getBssid() {\n        return bssid;\n    }\n\n    public void setBssid(String bssid) {\n        this.bssid = bssid;\n    }\n\n    public String getPsk() {\n        return psk;\n    }\n\n    public void setPsk(String psk) {\n        this.psk = psk;\n    }\n}\n```\n数据库帮助类(只示例异步操作)\n```\npublic class RealmDBHelper {\n  private Realm mRealm;\n\n  public RealmDBHelper(Context context) {\n      mRealm = Realm.getInstance(context);\n  }\n\n  public Realm getRealm() {\n      return mRealm;\n  }\n\n  /**\n   * add （增）\n   */\n  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) {\n      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              realm.copyToRealmOrUpdate(bean);\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return addTask;\n  }\n\n  /**\n   * delete （删）\n   */\n  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) {\n      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.removeFromRealm();\n          }\n      }, new Realm.Transaction.Callback() {\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return deleteTask;\n  }\n\n  /**\n   * update （改）\n   */\n  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) {\n      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() {\n          @Override\n          public void execute(Realm realm) {\n              PskBean bean = realm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findFirst();\n              bean.setPsk(psk);\n          }\n      },new Realm.Transaction.Callback(){\n          @Override\n          public void onSuccess() {\n              super.onSuccess();\n              callback.success(null);\n          }\n\n          @Override\n          public void onError(Exception e) {\n              super.onError(e);\n              callback.failure(e.getMessage());\n          }\n      });\n      return updateTask;\n  }\n\n  /**\n   * query （查询所有）\n   */\n  private void queryAllBean(RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  /**\n   * query (单条)\n   */\n  private void querySingleBean(String ssid, String bssid, RealmCallback callback) {\n      RealmResults<PskBean> beans = mRealm.where(PskBean.class).equalTo(\"ssid\", ssid).equalTo(\"bssid\", bssid).findAllAsync();\n      callback.success(beans.load() ? beans : null);\n  }\n\n  public void close() {\n      if (mRealm != null) {\n          mRealm.close();\n      }\n  }\n\n  public interface RealmCallback {\n      void success(RealmResults<PskBean> element);\n\n      void failure(String msg);\n  }\n}\n```\n4.混淆\n```\n# Realm #\n-keep class io.realm.annotations.RealmModule\n-keep @io.realm.annotations.RealmModule class *\n-keep class io.realm.internal.Keep\n-keep @io.realm.internal.Keep class * { *; }\n-dontwarn javax.**\n-dontwarn io.realm.**\n```\n此时打包会发现 包增大好多,大约4M左右.\n原因是默认情况下,Realm会引人所有规格的.so库\n如何处理?\napp下build.gradle,导出你需要的规格.so库\n```\nsplits {\n      abi {\n          enable true\n          reset()\n          include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'\n          universalApk true\n      }\n  }\n```\n5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下\n  而是在data/data/files/name.realm中\n","slug":"记一次使用Realm的体会","published":1,"updated":"2017-02-16T13:07:14.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz8ej8g7000tpo2zo9jgxyoi","content":"<blockquote>\n<p>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。<br>官网:<a href=\"https://realm.io/docs/java/latest/\" target=\"_blank\" rel=\"external\">https://realm.io/docs/java/latest/</a></p>\n</blockquote>\n<p>一.基于Version-0.87.5<br>由于 v0.87.5之后的版本使用的是plugin形式添加引用,<br>使用时会发现包增大好多(可能是自己使用时缺少了某些配置),<br>所以这里介绍一个该版本的使用.<br>1.引入<br>app下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;io.realm:realm-android:0.87.5&apos;</div></pre></td></tr></table></figure></p>\n<p>2.初始化<br>Application中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initRealm() &#123;</div><div class=\"line\">      RealmConfiguration config = new RealmConfiguration.Builder(this).name(&quot;guess.realm&quot;).schemaVersion(0).build();</div><div class=\"line\">      Realm.setDefaultConfiguration(config);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.使用<br>新建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskBean extends RealmObject &#123;</div><div class=\"line\">    @PrimaryKey</div><div class=\"line\">    private String ssid;</div><div class=\"line\">    private String bssid;</div><div class=\"line\">    private String psk;</div><div class=\"line\"></div><div class=\"line\">    public PskBean() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public PskBean(String ssid, String bssid, String psk) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getSsid() &#123;</div><div class=\"line\">        return ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setSsid(String ssid) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getBssid() &#123;</div><div class=\"line\">        return bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setBssid(String bssid) &#123;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPsk() &#123;</div><div class=\"line\">        return psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setPsk(String psk) &#123;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>数据库帮助类(只示例异步操作)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RealmDBHelper &#123;</div><div class=\"line\">  private Realm mRealm;</div><div class=\"line\"></div><div class=\"line\">  public RealmDBHelper(Context context) &#123;</div><div class=\"line\">      mRealm = Realm.getInstance(context);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public Realm getRealm() &#123;</div><div class=\"line\">      return mRealm;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * add （增）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              realm.copyToRealmOrUpdate(bean);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return addTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * delete （删）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.removeFromRealm();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return deleteTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * update （改）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.setPsk(psk);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,new Realm.Transaction.Callback()&#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return updateTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query （查询所有）</div><div class=\"line\">   */</div><div class=\"line\">  private void queryAllBean(RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query (单条)</div><div class=\"line\">   */</div><div class=\"line\">  private void querySingleBean(String ssid, String bssid, RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public void close() &#123;</div><div class=\"line\">      if (mRealm != null) &#123;</div><div class=\"line\">          mRealm.close();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public interface RealmCallback &#123;</div><div class=\"line\">      void success(RealmResults&lt;PskBean&gt; element);</div><div class=\"line\"></div><div class=\"line\">      void failure(String msg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.混淆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Realm #</div><div class=\"line\">-keep class io.realm.annotations.RealmModule</div><div class=\"line\">-keep @io.realm.annotations.RealmModule class *</div><div class=\"line\">-keep class io.realm.internal.Keep</div><div class=\"line\">-keep @io.realm.internal.Keep class * &#123; *; &#125;</div><div class=\"line\">-dontwarn javax.**</div><div class=\"line\">-dontwarn io.realm.**</div></pre></td></tr></table></figure></p>\n<p>此时打包会发现 包增大好多,大约4M左右.<br>原因是默认情况下,Realm会引人所有规格的.so库<br>如何处理?<br>app下build.gradle,导出你需要的规格.so库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">splits &#123;</div><div class=\"line\">      abi &#123;</div><div class=\"line\">          enable true</div><div class=\"line\">          reset()</div><div class=\"line\">          include &apos;armeabi&apos;, &apos;armeabi-v7a&apos;, &apos;arm64-v8a&apos;, &apos;mips&apos;, &apos;x86&apos;, &apos;x86_64&apos;</div><div class=\"line\">          universalApk true</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下<br>  而是在data/data/files/name.realm中</p>\n","excerpt":"","more":"<blockquote>\n<p>数据库Realm，是用来替代sqlite的一种解决方案，它有一套自己的数据库存储引擎，比sqlite更轻量级，拥有更快的速度，并且具有很多现代数据库的特性，比如支持JSON，流式api，数据变更通知，自动数据同步,简单身份验证，访问控制，事件处理，最重要的是跨平台，目前已有Java，Objective C，Swift，React-Native，Xamarin这五种实现。<br>官网:<a href=\"https://realm.io/docs/java/latest/\">https://realm.io/docs/java/latest/</a></p>\n</blockquote>\n<p>一.基于Version-0.87.5<br>由于 v0.87.5之后的版本使用的是plugin形式添加引用,<br>使用时会发现包增大好多(可能是自己使用时缺少了某些配置),<br>所以这里介绍一个该版本的使用.<br>1.引入<br>app下的build.gradle<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;io.realm:realm-android:0.87.5&apos;</div></pre></td></tr></table></figure></p>\n<p>2.初始化<br>Application中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void initRealm() &#123;</div><div class=\"line\">      RealmConfiguration config = new RealmConfiguration.Builder(this).name(&quot;guess.realm&quot;).schemaVersion(0).build();</div><div class=\"line\">      Realm.setDefaultConfiguration(config);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.使用<br>新建对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class PskBean extends RealmObject &#123;</div><div class=\"line\">    @PrimaryKey</div><div class=\"line\">    private String ssid;</div><div class=\"line\">    private String bssid;</div><div class=\"line\">    private String psk;</div><div class=\"line\"></div><div class=\"line\">    public PskBean() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public PskBean(String ssid, String bssid, String psk) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getSsid() &#123;</div><div class=\"line\">        return ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setSsid(String ssid) &#123;</div><div class=\"line\">        this.ssid = ssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getBssid() &#123;</div><div class=\"line\">        return bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setBssid(String bssid) &#123;</div><div class=\"line\">        this.bssid = bssid;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public String getPsk() &#123;</div><div class=\"line\">        return psk;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setPsk(String psk) &#123;</div><div class=\"line\">        this.psk = psk;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>数据库帮助类(只示例异步操作)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RealmDBHelper &#123;</div><div class=\"line\">  private Realm mRealm;</div><div class=\"line\"></div><div class=\"line\">  public RealmDBHelper(Context context) &#123;</div><div class=\"line\">      mRealm = Realm.getInstance(context);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public Realm getRealm() &#123;</div><div class=\"line\">      return mRealm;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * add （增）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask addBean(final PskBean bean, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask addTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              realm.copyToRealmOrUpdate(bean);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return addTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * delete （删）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask deleteBean(final String ssid, final String bssid, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask deleteTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.removeFromRealm();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;, new Realm.Transaction.Callback() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return deleteTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * update （改）</div><div class=\"line\">   */</div><div class=\"line\">  public RealmAsyncTask updateBean(final String ssid, final String bssid, final String psk, final RealmCallback callback) &#123;</div><div class=\"line\">      RealmAsyncTask updateTask = mRealm.executeTransaction(new Realm.Transaction() &#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void execute(Realm realm) &#123;</div><div class=\"line\">              PskBean bean = realm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findFirst();</div><div class=\"line\">              bean.setPsk(psk);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;,new Realm.Transaction.Callback()&#123;</div><div class=\"line\">          @Override</div><div class=\"line\">          public void onSuccess() &#123;</div><div class=\"line\">              super.onSuccess();</div><div class=\"line\">              callback.success(null);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          @Override</div><div class=\"line\">          public void onError(Exception e) &#123;</div><div class=\"line\">              super.onError(e);</div><div class=\"line\">              callback.failure(e.getMessage());</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">      return updateTask;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query （查询所有）</div><div class=\"line\">   */</div><div class=\"line\">  private void queryAllBean(RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  /**</div><div class=\"line\">   * query (单条)</div><div class=\"line\">   */</div><div class=\"line\">  private void querySingleBean(String ssid, String bssid, RealmCallback callback) &#123;</div><div class=\"line\">      RealmResults&lt;PskBean&gt; beans = mRealm.where(PskBean.class).equalTo(&quot;ssid&quot;, ssid).equalTo(&quot;bssid&quot;, bssid).findAllAsync();</div><div class=\"line\">      callback.success(beans.load() ? beans : null);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public void close() &#123;</div><div class=\"line\">      if (mRealm != null) &#123;</div><div class=\"line\">          mRealm.close();</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public interface RealmCallback &#123;</div><div class=\"line\">      void success(RealmResults&lt;PskBean&gt; element);</div><div class=\"line\"></div><div class=\"line\">      void failure(String msg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.混淆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Realm #</div><div class=\"line\">-keep class io.realm.annotations.RealmModule</div><div class=\"line\">-keep @io.realm.annotations.RealmModule class *</div><div class=\"line\">-keep class io.realm.internal.Keep</div><div class=\"line\">-keep @io.realm.internal.Keep class * &#123; *; &#125;</div><div class=\"line\">-dontwarn javax.**</div><div class=\"line\">-dontwarn io.realm.**</div></pre></td></tr></table></figure></p>\n<p>此时打包会发现 包增大好多,大约4M左右.<br>原因是默认情况下,Realm会引人所有规格的.so库<br>如何处理?<br>app下build.gradle,导出你需要的规格.so库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">splits &#123;</div><div class=\"line\">      abi &#123;</div><div class=\"line\">          enable true</div><div class=\"line\">          reset()</div><div class=\"line\">          include &apos;armeabi&apos;, &apos;armeabi-v7a&apos;, &apos;arm64-v8a&apos;, &apos;mips&apos;, &apos;x86&apos;, &apos;x86_64&apos;</div><div class=\"line\">          universalApk true</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>5.最后,数据并不是保存在 data/data/pagekageName/databases/目录下<br>  而是在data/data/files/name.realm中</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciz8ej8dg0004po2zmx2mebwk","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8dw0007po2zb3c2k8y1"},{"post_id":"ciz8ej8c90000po2zfzf133jv","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8e40009po2zt82lmgcc"},{"post_id":"ciz8ej8dr0005po2zef18swxf","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8eh000cpo2z4ccz3dtp"},{"post_id":"ciz8ej8dx0008po2z4u7ang2w","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8ek000epo2zdbslxdzn"},{"post_id":"ciz8ej8cn0001po2zrxyowbiw","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8eu000hpo2z3svvm2mm"},{"post_id":"ciz8ej8eh000dpo2zqwtt8cx6","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8ez000jpo2zt5solxh2"},{"post_id":"ciz8ej8d60003po2z2e4d19re","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8f8000mpo2z5jw711rl"},{"post_id":"ciz8ej8en000fpo2z77w1tumy","tag_id":"ciz8ej8cz0002po2z7mbxnlsb","_id":"ciz8ej8f9000npo2z8lifuj17"},{"post_id":"ciz8ej8e5000apo2zv386mur9","tag_id":"ciz8ej8ep000gpo2zenipy2q4","_id":"ciz8ej8fa000opo2zmvob36lo"},{"post_id":"ciz8ej8ew000ipo2zqljga7sr","tag_id":"ciz8ej8f8000lpo2zsndfkjal","_id":"ciz8ej8fb000qpo2zf4r7w2c7"},{"post_id":"ciz8ej8f0000kpo2zehm2mjqg","tag_id":"ciz8ej8fa000ppo2zgzkmzhce","_id":"ciz8ej8fd000rpo2z6nkhzztx"},{"post_id":"ciz8ej8g5000spo2zkoyhw611","tag_id":"ciz8ej8g9000upo2z1zu8hb27","_id":"ciz8ej8gg000wpo2zqg42y4th"},{"post_id":"ciz8ej8g7000tpo2zo9jgxyoi","tag_id":"ciz8ej8gc000vpo2zthaps3zf","_id":"ciz8ej8gi000xpo2zcw1iuupa"}],"Tag":[{"name":"Android","_id":"ciz8ej8cz0002po2z7mbxnlsb"},{"name":"tools","_id":"ciz8ej8ep000gpo2zenipy2q4"},{"name":"github","_id":"ciz8ej8f8000lpo2zsndfkjal"},{"name":"四大组件之Activity","_id":"ciz8ej8fa000ppo2zgzkmzhce"},{"name":"Android Studio","_id":"ciz8ej8g9000upo2z1zu8hb27"},{"name":"Realm","_id":"ciz8ej8gc000vpo2zthaps3zf"}]}}